{
	"name": "xfmIPT222A_RPMOutbound_ApprPromoCount_PX1",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221F_CombineRPMLoadFiles_DS_ComplexPromo_combine",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_UHILV_OPORI_222A1",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOUHILVOPORI"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_TSPCT_222AB1",
						"type": "DatasetReference"
					},
					"name": "RPMTSPCT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Total_ApprovedPromo_Count_IPT_RPM_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFTotalCount"
				}
			],
			"transformations": [
				{
					"name": "RDpromID"
				},
				{
					"name": "rdopromoID"
				},
				{
					"name": "LBMC"
				},
				{
					"name": "lopromoIDBMC"
				},
				{
					"name": "FSplitBMC"
				},
				{
					"name": "LpromoID"
				},
				{
					"name": "loapprpromo"
				},
				{
					"name": "ARPMCount"
				},
				{
					"name": "AIPTCount"
				},
				{
					"name": "FcombineCount"
				},
				{
					"name": "xoStatusF"
				},
				{
					"name": "xoIPTCount"
				},
				{
					"name": "xoStatusE"
				},
				{
					"name": "xoStatusW"
				},
				{
					"name": "xoStatusC"
				},
				{
					"name": "StatusC"
				},
				{
					"name": "StatusW"
				},
				{
					"name": "StatusE"
				},
				{
					"name": "IPTCount"
				},
				{
					"name": "StatusF"
				},
				{
					"name": "filterC"
				},
				{
					"name": "filterW"
				},
				{
					"name": "filterE"
				},
				{
					"name": "filterIPT"
				},
				{
					"name": "filterF"
				},
				{
					"name": "FcombineStatus"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8'),",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          PROMO_ID as integer,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as integer,",
				"          PROMO_COMP_DETAIL_ID as integer,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as integer,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as integer,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IGNORE_CONSTRAINTS as integer,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as integer,",
				"          THRESHOLD_TYPE as integer,",
				"          THRESHOLD_AMOUNT as decimal(15,2),",
				"          THRESHOLD_CURRENCY as integer,",
				"          THRESHOLD_QUANTITY as decimal(15,2),",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as decimal(15,2),",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as decimal(15,2),",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as integer,",
				"          PROCESS_ID as integer,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSComplexPromo",
				"source(output(",
				"          PROMO_ID as integer,",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          GROUP_KEY as integer,",
				"          STATUS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOUHILVOPORI",
				"source(output(",
				"          PROMO_ID as integer,",
				"          STATUS as string,",
				"          GROUP_KEY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMTSPCT",
				"DSComplexPromo aggregate(groupBy(PROMO_ID),",
				"     each(match(!in(['PROMO_ID'],name)), $$ = first($$))) ~> RDpromID",
				"RDpromID select(mapColumn(",
				"          PROMO_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rdopromoID",
				"rdopromoID, IPTTPROOUHILVOPORI lookup(rdopromoID@PROMO_ID == IPTTPROOUHILVOPORI@PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBMC",
				"LBMC select(mapColumn(",
				"          PROMO_ID = rdopromoID@PROMO_ID,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          GROUP_KEY,",
				"          STATUS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lopromoIDBMC",
				"lopromoIDBMC filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> FSplitBMC",
				"FSplitBMC, RPMTSPCT lookup(lopromoIDBMC@PROMO_ID == RPMTSPCT@PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LpromoID",
				"LpromoID select(mapColumn(",
				"          PROMO_ID = lopromoIDBMC@PROMO_ID,",
				"          STATUS = RPMTSPCT@STATUS,",
				"          GROUP_KEY = RPMTSPCT@GROUP_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loapprpromo",
				"loapprpromo aggregate(groupBy(STATUS,",
				"          GROUP_KEY),",
				"     COUNT = count()) ~> ARPMCount",
				"FSplitBMC aggregate(groupBy(STATUS,",
				"          GROUP_KEY),",
				"     COUNT = count()) ~> AIPTCount",
				"AIPTCount, ARPMCount union(byName: true)~> FcombineCount",
				"filterF derive(STATUS = 'Number of Approved Promotions Failed in RPM',",
				"          ACTION_TO_BE_TAKEN = 'For details refer to attached files by the names IPT222_Approved_Promotions_Errored_In_RPM_*',",
				"          SORT_KEY = 3) ~> xoStatusF",
				"filterIPT derive(STATUS = 'Number of Approved Promotions Successfully Processed in IPT',",
				"          ACTION_TO_BE_TAKEN = '',",
				"          SORT_KEY = 0) ~> xoIPTCount",
				"filterE derive(STATUS = 'Number of Approved Promotions Errored Out in RPM(with Some or All components errored)',",
				"          ACTION_TO_BE_TAKEN = 'For details refer to attached files by the names IPT222_Approved_Promotions_Errored_In_RPM_*',",
				"          SORT_KEY = 2) ~> xoStatusE",
				"filterW derive(STATUS = 'Number of Approved Promotions Conflicted in RPM',",
				"          ACTION_TO_BE_TAKEN = 'For details refer to attached files by the names IPT222_Approved_Promotions_Errored_In_RPM_*',",
				"          SORT_KEY = 4) ~> xoStatusW",
				"filterC derive(STATUS = 'Number of Approved Promotions Successfully Processed in RPM',",
				"          ACTION_TO_BE_TAKEN = '',",
				"          SORT_KEY = 1) ~> xoStatusC",
				"xoStatusC select(mapColumn(",
				"          STATUS,",
				"          COUNT,",
				"          ACTION_TO_BE_TAKEN,",
				"          SORT_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StatusC",
				"xoStatusW select(mapColumn(",
				"          STATUS,",
				"          COUNT,",
				"          ACTION_TO_BE_TAKEN,",
				"          SORT_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StatusW",
				"xoStatusE select(mapColumn(",
				"          STATUS,",
				"          COUNT,",
				"          ACTION_TO_BE_TAKEN,",
				"          SORT_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StatusE",
				"xoIPTCount select(mapColumn(",
				"          STATUS,",
				"          COUNT,",
				"          ACTION_TO_BE_TAKEN,",
				"          SORT_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> IPTCount",
				"xoStatusF select(mapColumn(",
				"          STATUS,",
				"          COUNT,",
				"          ACTION_TO_BE_TAKEN,",
				"          SORT_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StatusF",
				"FcombineCount filter(STATUS == 'C') ~> filterC",
				"FcombineCount filter(STATUS == 'W') ~> filterW",
				"FcombineCount filter(STATUS == 'E') ~> filterE",
				"FcombineCount filter(GROUP_KEY == 1) ~> filterIPT",
				"FcombineCount filter(STATUS == 'F') ~> filterF",
				"StatusF, IPTCount, StatusE, StatusW, StatusC union(byName: true)~> FcombineStatus",
				"FcombineStatus select(mapColumn(",
				"          DESCRIPTION = STATUS,",
				"          COUNT,",
				"          ACTION_TO_BE_TAKEN,",
				"          SORT_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DESCRIPTION as string,",
				"          COUNT as string,",
				"          ACTION_TO_BE_TAKEN as string,",
				"          SORT_KEY as string",
				"     ),",
				"     partitionFileNames:[(concat('Total_ApprovedPromo_Count_IPT_RPM_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFTotalCount"
			]
		}
	}
}