{
	"name": "xfmIPT124RPMTrnfrm2_PX",
	"properties": {
		"folder": {
			"name": "12-PriceUpdatesRPM"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_srcIPT121RPMApprPromoExtract1_PX_DS_CCLDI_CCSWS",
						"type": "DatasetReference"
					},
					"name": "DSCCLDICCSWS"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT033BCRItem_Clr_Seq_Trnfrm_PX_DS_OUTPUT_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSOUTPUT"
				},
				{
					"dataset": {
						"referenceName": "AB_srcIPT121RPMApprPromoExtract1_PX_DS_ISCLA",
						"type": "DatasetReference"
					},
					"name": "DSISCLA"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_DS_ApprPromoHier",
						"type": "DatasetReference"
					},
					"name": "DSApprPromoHier"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_ISCLARej",
						"type": "DatasetReference"
					},
					"name": "FFISCLARej"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_InvalidStyRejects",
						"type": "DatasetReference"
					},
					"name": "FFInvalidStyRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_RejPrcStatA",
						"type": "DatasetReference"
					},
					"name": "FFRejPrcStatA"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_DS_ApprPromo",
						"type": "DatasetReference"
					},
					"name": "DSApprPromo"
				}
			],
			"transformations": [
				{
					"name": "inHier"
				},
				{
					"name": "JItmStySeq"
				},
				{
					"name": "loValidPromo"
				},
				{
					"name": "LISCLA"
				},
				{
					"name": "LISCLASelect1"
				},
				{
					"name": "LISCLADerivedColumn1"
				},
				{
					"name": "LISCLASplit1"
				},
				{
					"name": "loISCLA"
				},
				{
					"name": "rejISCLA"
				},
				{
					"name": "split1"
				},
				{
					"name": "loApprPromo"
				},
				{
					"name": "rejInvalidSty"
				},
				{
					"name": "loPrcStatA"
				},
				{
					"name": "rejPrcStatCdA"
				},
				{
					"name": "FApprPromo"
				},
				{
					"name": "Yes"
				},
				{
					"name": "Yes1"
				},
				{
					"name": "No"
				},
				{
					"name": "No1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSCCLDICCSWS",
				"source(output(",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CC_NBR as string,",
				"          MKT_ID as string,",
				"          ITM_STY_NBR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSOUTPUT",
				"source(output(",
				"          LOC_NBR as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_STAT_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSISCLA",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          { BRD_ID} as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSApprPromoHier",
				"DSOUTPUT select(mapColumn(",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CC_NBR,",
				"          MKT_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> inHier",
				"DSCCLDICCSWS, inHier join(DSCCLDICCSWS@ITM_STY_CLR_SEQ_NBR_S == inHier@ITM_STY_CLR_SEQ_NBR_S,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JItmStySeq",
				"JItmStySeq select(mapColumn(",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S = inHier@ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CC_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loValidPromo",
				"loValidPromo, DSISCLA lookup(loValidPromo@ITM_STY_CLR_SEQ_NBR_S == DSISCLA@ITM_STY_CLR_SEQ_NBR_S,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LISCLA",
				"LISCLA select(mapColumn(",
				"          ITM_STY_CLR_SEQ_NBR_S = loValidPromo@ITM_STY_CLR_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CC_NBR,",
				"          LOC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = DSISCLA@ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_STAT_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LISCLASelect1",
				"LISCLASelect1 derive(IsMatch = isMatch()) ~> LISCLADerivedColumn1",
				"LISCLADerivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> LISCLASplit1@(LISCLAMatch, LISCLANotMatch)",
				"LISCLASplit1@LISCLAMatch select(mapColumn(",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CC_NBR,",
				"          LOC_NBR,",
				"          PRC_STAT_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loISCLA",
				"LISCLASplit1@LISCLANotMatch select(mapColumn(",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CC_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejISCLA",
				"DSApprPromoHier split(and(MDSE_LVL_CD == '4', PMOTN_APPL_TYP_CD != 'A'),",
				"     and(MDSE_LVL_CD == '4', PMOTN_APPL_TYP_CD == 'A'),",
				"     disjoint: false) ~> split1@(fioDeptLvlPromo, fioDeptLvlPrcA, rejDeptLvl)",
				"Yes select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loApprPromo",
				"No select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT = PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejInvalidSty",
				"Yes1 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPrcStatA",
				"No1 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPrcStatCdA",
				"split1@rejDeptLvl, loApprPromo, loPrcStatA union(byName: true)~> FApprPromo",
				"split1@fioDeptLvlPromo, loISCLA exists(split1@fioDeptLvlPromo@MDSE_HIER_LVL_SEQ_NBR_S == loISCLA@MDSE_HIER_LVL_SEQ_NBR_S",
				"     && split1@fioDeptLvlPromo@ITM_STY_SEQ_NBR_S == loISCLA@ITM_STY_SEQ_NBR_S",
				"     && STR_NBR == LOC_NBR",
				"     && PMOTN_APPL_TYP_CD == PRC_STAT_CD,",
				"     negate:false,",
				"     broadcast: 'auto')~> Yes",
				"split1@fioDeptLvlPrcA, loISCLA exists(split1@fioDeptLvlPrcA@MDSE_HIER_LVL_SEQ_NBR_S == loISCLA@MDSE_HIER_LVL_SEQ_NBR_S",
				"     && split1@fioDeptLvlPrcA@ITM_STY_SEQ_NBR_S == loISCLA@ITM_STY_SEQ_NBR_S,",
				"     negate:false,",
				"     broadcast: 'auto')~> Yes1",
				"split1@fioDeptLvlPromo, loISCLA exists(split1@fioDeptLvlPromo@MDSE_HIER_LVL_SEQ_NBR_S == loISCLA@MDSE_HIER_LVL_SEQ_NBR_S",
				"     && split1@fioDeptLvlPromo@ITM_STY_SEQ_NBR_S == loISCLA@ITM_STY_SEQ_NBR_S",
				"     && STR_NBR == LOC_NBR",
				"     && PMOTN_APPL_TYP_CD == PRC_STAT_CD,",
				"     negate:true,",
				"     broadcast: 'auto')~> No",
				"split1@fioDeptLvlPrcA, loISCLA exists(split1@fioDeptLvlPrcA@MDSE_HIER_LVL_SEQ_NBR_S == loISCLA@MDSE_HIER_LVL_SEQ_NBR_S",
				"     && split1@fioDeptLvlPrcA@ITM_STY_SEQ_NBR_S == loISCLA@ITM_STY_SEQ_NBR_S,",
				"     negate:true,",
				"     broadcast: 'auto')~> No1",
				"rejISCLA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm2_PX.FF_ISCLARej.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFISCLARej",
				"rejInvalidSty sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          BRD_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          SCLS_ID23 as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          SCLS_ID26 as string",
				"     ),",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm2_PX.FF_InvalidStyRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFInvalidStyRejects",
				"rejPrcStatCdA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm2_PX.FF_RejPrcStatA.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRejPrcStatA",
				"FApprPromo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm2_PX.DS_ApprPromo.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSApprPromo"
			]
		}
	}
}