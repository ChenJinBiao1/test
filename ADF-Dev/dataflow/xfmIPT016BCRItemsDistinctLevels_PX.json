{
	"name": "xfmIPT016BCRItemsDistinctLevels_PX",
	"properties": {
		"folder": {
			"name": "01-BCRItems"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsCorpComp_PX_DS_DistinctCorpComp_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctCorpComp"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsBrand_PX_DS_DistinctBrand_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctBrnd"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsDivision_PX_DS_DistinctDiv_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctDiv"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsDepartment_PX_DS_DistinctDept_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctDept"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsClass_PX_DS_DistinctCls_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctClass"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsSubClass_PX_DS_DistinctSubCls_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctSubClass"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsProgramNbr_PX_DS_DistinctPgmNbr_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctPrgmNbr"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsItemStyle_PX_DS_DistinctStyle_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctItmSty"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsItemStyleClr_PX_DS_DistinctStyleClr_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctItmStyClr"
				},
				{
					"dataset": {
						"referenceName": "AB_UHILV_UNIV_HIER_LVL_T_Distinct",
						"type": "DatasetReference"
					},
					"name": "OraUHILVDistinct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT016BCRItemsDistinctLevels_PX_DS_LHILV_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSLHILV"
				},
				{
					"dataset": {
						"referenceName": "After_016Table",
						"type": "DatasetReference"
					},
					"name": "After"
				},
				{
					"dataset": {
						"referenceName": "016_OUT",
						"type": "DatasetReference"
					},
					"name": "OUT016"
				}
			],
			"transformations": [
				{
					"name": "FDistinctLevelsUnion"
				},
				{
					"name": "foDistinctLevel"
				},
				{
					"name": "UHILVDerivedColumn"
				},
				{
					"name": "LHILVDerivedColumn"
				},
				{
					"name": "UHILVSelect"
				},
				{
					"name": "LHILVSelect"
				},
				{
					"name": "foDistinctLevelDerivedColumn"
				},
				{
					"name": "foDistinctLevelSelect"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA'),",
				"     jsUserId as string ('PIPT014U')",
				"}",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          LGCY_IND as string,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctCorpComp",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          LGCY_IND as string,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctBrnd",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctDiv",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctDept",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctClass",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctSubClass",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctPrgmNbr",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctItmSty",
				"source(output(",
				"          BRD_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDistinctItmStyClr",
				"source(output(",
				"          BRD_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OraUHILVDistinct",
				"DSDistinctCorpComp, DSDistinctBrnd, DSDistinctDiv, DSDistinctDept, DSDistinctClass, DSDistinctSubClass, DSDistinctPrgmNbr, DSDistinctItmSty, DSDistinctItmStyClr union(byName: true)~> FDistinctLevelsUnion",
				"FDistinctLevelsUnion split(and(LGCY_IND == 'N',  MDSE_LVL_CD == '9'),",
				"     and(LGCY_IND == 'Y', MDSE_LVL_CD != '1'),",
				"     and(and(LGCY_IND == 'N',MDSE_LVL_CD != '2'), and(MDSE_LVL_CD != '7',MDSE_LVL_CD != '9' )),",
				"     disjoint: false) ~> foDistinctLevel@(outUHILV, xoNonReclass, outLHILV, outNone)",
				"foDistinctLevel@outUHILV derive(UNIV_HIER_LVL_SEQ_NBR_S = MHIER_LVL_SEQ,",
				"          DIV_ID = iif(TEST >= 1, DIV_ID, 0),",
				"          DEPT_ID = iif(TEST >= 2, DEPT_ID, 0),",
				"          CLS_ID = iif(TEST >= 3, CLS_ID, 0),",
				"          SCLS_ID = iif(TEST >= 5, SCLS_ID, 0),",
				"          ITM_STY_CLR_SEQ_NBR_S = iif(TEST == 7, ITM_STY_CLR_SEQ_NBR_S, 0),",
				"          ITM_STY_SEQ_NBR_S = iif(TEST >= 6, ITM_STY_SEQ_NBR_S, 0),",
				"          CRT_UPDT_USER_ID = $jsUserId,",
				"          CRT_UPDT_DTTM = currentDate(),",
				"          LST_UPDT_USER_ID = $jsUserId,",
				"          LST_UPDT_DTTM = currentDate()) ~> UHILVDerivedColumn",
				"foDistinctLevel@outLHILV derive(LGCY_HIER_LVL_SEQ_NBR_S = MHIER_LVL_SEQ,",
				"          CORP_ID = right('00'+ CORP_ID,2),",
				"          MDSE_CO_ID = CO_ID,",
				"          MDSE_DIV_ID = iif(TEST == -1, toString(null()), toString(DIV_ID)),",
				"          MDSE_DEPT_ID = iif(TEST >= 2, toString(DEPT_ID),toString(null())),",
				"          MDSE_CLS_ID = iif(TEST >= 3,right('00'+ toString(CLS_ID) , 2),toString(null())),",
				"          MDSE_SCLS_ID = iif(TEST >= 5,right('00'+ toString(SCLS_ID) , 2),toString(null())),",
				"          PGM_NBR = iif(TEST == 0,PRGM_NBR, 0),",
				"          ITM_STY_CLR_SEQ_NBR_S = iif(TEST == 7, ITM_STY_CLR_SEQ_NBR_S, 0),",
				"          ITM_STY_SEQ_NBR_S = iif(TEST >= 6, ITM_STY_SEQ_NBR_S, 0),",
				"          MDSE_LVL_CD = MDSE_LVL_CD,",
				"          CRT_UPDT_USER_ID = $jsUserId,",
				"          CRT_UPDT_DTTM = currentDate(),",
				"          LST_UPDT_USER_ID = $jsUserId,",
				"          LST_UPDT_DTTM = currentDate(),",
				"          BRD_ID = BRD_ID) ~> LHILVDerivedColumn",
				"UHILVDerivedColumn select(mapColumn(",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MDSE_LVL_CD,",
				"          CRT_UPDT_USER_ID,",
				"          CRT_UPDT_DTTM,",
				"          LST_UPDT_USER_ID,",
				"          LST_UPDT_DTTM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UHILVSelect",
				"LHILVDerivedColumn select(mapColumn(",
				"          LGCY_HIER_LVL_SEQ_NBR_S,",
				"          CORP_ID,",
				"          MDSE_CO_ID,",
				"          MDSE_DIV_ID,",
				"          MDSE_DEPT_ID,",
				"          MDSE_CLS_ID,",
				"          MDSE_SCLS_ID,",
				"          PGM_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          MDSE_LVL_CD,",
				"          CRT_UPDT_USER_ID,",
				"          CRT_UPDT_DTTM,",
				"          LST_UPDT_USER_ID,",
				"          LST_UPDT_DTTM,",
				"          BRD_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LHILVSelect",
				"foDistinctLevel@xoNonReclass derive(UNIV_HIER_LVL_SEQ_NBR_S = MHIER_LVL_SEQ,",
				"          BRD_ID = BRD_ID,",
				"          DIV_ID = iif(TEST >= 1, DIV_ID, 0),",
				"          DEPT_ID = iif(TEST >= 2, DEPT_ID, 0),",
				"          CLS_ID = iif(TEST >= 3, CLS_ID, 0),",
				"          SCLS_ID = iif(TEST >= 5, SCLS_ID, 0),",
				"          ITM_STY_CLR_SEQ_NBR_S = iif(TEST == 7, ITM_STY_CLR_SEQ_NBR_S, 0),",
				"          ITM_STY_SEQ_NBR_S = iif(TEST >= 6, ITM_STY_SEQ_NBR_S, 0),",
				"          MDSE_LVL_CD = MDSE_LVL_CD,",
				"          CRT_UPDT_USER_ID = $jsUserId,",
				"          CRT_UPDT_DTTM = currentDate(),",
				"          LST_UPDT_USER_ID = $jsUserId,",
				"          LST_UPDT_DTTM = currentDate(),",
				"          change_code = 5) ~> foDistinctLevelDerivedColumn",
				"foDistinctLevelDerivedColumn select(mapColumn(",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MDSE_LVL_CD,",
				"          CRT_UPDT_USER_ID,",
				"          CRT_UPDT_DTTM,",
				"          LST_UPDT_USER_ID,",
				"          LST_UPDT_DTTM,",
				"          change_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> foDistinctLevelSelect",
				"LHILVSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT016BCRItemsDistinctLevels_PX.DS_LHILV.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          LGCY_HIER_LVL_SEQ_NBR_S,",
				"          CORP_ID,",
				"          MDSE_CO_ID,",
				"          MDSE_DIV_ID,",
				"          MDSE_DEPT_ID,",
				"          MDSE_CLS_ID,",
				"          MDSE_SCLS_ID,",
				"          PGM_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          MDSE_LVL_CD,",
				"          CRT_UPDT_USER_ID,",
				"          CRT_UPDT_DTTM,",
				"          LST_UPDT_USER_ID,",
				"          LST_UPDT_DTTM,",
				"          BRD_ID",
				"     ),",
				"     partitionBy('hash', 1)) ~> DSLHILV",
				"UHILVSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S as string,",
				"          GLBL_XREF_IND as string,",
				"          BrdId1 as string",
				"     ),",
				"     partitionFileNames:['Before_016Table.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> After",
				"foDistinctLevelSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as string,",
				"          BRD_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          SCLS_ID as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          MDSE_LVL_CD as string,",
				"          CRT_UPDT_USER_ID as string,",
				"          CRT_UPDT_DTTM as string,",
				"          LST_UPDT_USER_ID as string,",
				"          LST_UPDT_DTTM as string,",
				"          change_code as string",
				"     ),",
				"     partitionFileNames:['016_OUT.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OUT016"
			]
		}
	}
}