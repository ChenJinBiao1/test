{
	"name": "xfmIPT223F_RPMUnApprPromo_Item_PX",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221F_CombineRPMLoadFiles_DS_ComplexPromoUpdate_combine",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromoUpdate"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_UHILV_TPROO_OPORI_223F",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOUHILVOPORI"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_AllDiv_223F",
						"type": "DatasetReference"
					},
					"name": "RPMAllDiv"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_TSPCT_223F",
						"type": "DatasetReference"
					},
					"name": "RPMTSPCT"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_ALLStore_223F",
						"type": "DatasetReference"
					},
					"name": "RPMALLStore"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_PROMO_223F",
						"type": "DatasetReference"
					},
					"name": "RPMPROMO"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT223F_RPMUnApprPromo_Item_PX_FF_TSPCT_Rej_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFTSPCTRej"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT22_UnApprovedPromo_Success_RPMBase_ASIA",
						"type": "DatasetReference"
					},
					"name": "UnApprPromoSuccessItem"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT223_UnApprovedPromo_Errors_RPMBase_ASIA",
						"type": "DatasetReference"
					},
					"name": "UnApprPromoErrorItem"
				}
			],
			"transformations": [
				{
					"name": "LBrdMktChnl"
				},
				{
					"name": "fiBrdMktChnl"
				},
				{
					"name": "loBrdMktChnl"
				},
				{
					"name": "LTSPCTkeys"
				},
				{
					"name": "loTSPCTCompltArejects"
				},
				{
					"name": "split1"
				},
				{
					"name": "AllStore"
				},
				{
					"name": "Div"
				},
				{
					"name": "PROMOkeys"
				},
				{
					"name": "union1"
				},
				{
					"name": "xAddDesc"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "IsMatch"
				},
				{
					"name": "split2"
				},
				{
					"name": "No1"
				},
				{
					"name": "NStore"
				},
				{
					"name": "NDiv"
				},
				{
					"name": "Nrest"
				},
				{
					"name": "union2"
				},
				{
					"name": "YesLAllStore"
				},
				{
					"name": "NoLAllStore"
				},
				{
					"name": "YesLDiv"
				},
				{
					"name": "NoLDiv"
				},
				{
					"name": "NoLPROMOkeys"
				},
				{
					"name": "YesLPROMOkeys"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8'),",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSComplexPromoUpdate",
				"source(output(",
				"          PROMO_ID as integer,",
				"          BRD_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOUHILVOPORI",
				"source(output(",
				"          PROMO_ID as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          MERCH_TYPE as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          GRP as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMAllDiv",
				"source(output(",
				"          PROMO_ID as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          MERCH_TYPE as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          LOCATION as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMTSPCT",
				"source(output(",
				"          PROMO_ID as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          MERCH_TYPE as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          DIV as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMALLStore",
				"source(output(",
				"          PROMO_ID as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          MERCH_TYPE as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMPROMO",
				"DSComplexPromoUpdate, IPTTPROOUHILVOPORI lookup(PMOTN_REQ_ID_S == PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdMktChnl",
				"loBrdMktChnl filter(BRD_ID == $pBrandId && CHNL_ID  == $pChnlId && MKT_ID == $pMarketId) ~> fiBrdMktChnl",
				"LBrdMktChnl select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loBrdMktChnl",
				"fiBrdMktChnl, RPMTSPCT lookup(PMOTN_REQ_ID_S == PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTSPCTkeys",
				"split2@Yes select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loTSPCTCompltArejects",
				"loTSPCTCompltArejects split(MERCH_TYPE == 5,",
				"     MERCH_TYPE == 6,",
				"     disjoint: false) ~> split1@(foAllStr, foDiv, forest)",
				"YesLAllStore select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AllStore",
				"YesLDiv select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Div",
				"YesLPROMOkeys select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PROMOkeys",
				"AllStore, Div, PROMOkeys union(byName: true)~> union1",
				"union2 derive(DESCRIPTION = 'Approved Promo MH-Loc processed successfully in RPM Staging is missing OR not in active state in RPM Base tables OR Apply to code is not matching') ~> xAddDesc",
				"xAddDesc select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_ID = PMOTN_REQ_ID_S,",
				"          START_DATE = PMOTN_STRT_DT,",
				"          END_DATE = PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"union1 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_ID = PMOTN_REQ_ID_S,",
				"          START_DATE = PMOTN_STRT_DT,",
				"          END_DATE = PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"LTSPCTkeys derive(IsMatch = isMatch()) ~> IsMatch",
				"IsMatch split(IsMatch==true(),",
				"     disjoint: false) ~> split2@(Yes, No)",
				"split2@No select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> No1",
				"NoLAllStore select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NStore",
				"NoLDiv select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NDiv",
				"NoLPROMOkeys select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          MERCH_TYPE,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          DIVISION,",
				"          GROUP_NO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Nrest",
				"NStore, NDiv, Nrest union(byName: true)~> union2",
				"split1@foAllStr, RPMALLStore exists(PMOTN_REQ_ID_S == PROMO_ID",
				"     && PMOTN_STRT_DT == START_DATE",
				"     && PMOTN_END_DT == END_DATE,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLAllStore",
				"split1@foAllStr, RPMALLStore exists(PMOTN_REQ_ID_S == PROMO_ID",
				"     && PMOTN_STRT_DT == START_DATE",
				"     && PMOTN_END_DT == END_DATE,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLAllStore",
				"split1@foDiv, RPMAllDiv exists(PMOTN_REQ_ID_S == PROMO_ID",
				"     && PMOTN_STRT_DT == START_DATE",
				"     && PMOTN_END_DT == END_DATE,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLDiv",
				"split1@foDiv, RPMAllDiv exists(PMOTN_REQ_ID_S == PROMO_ID",
				"     && PMOTN_STRT_DT == START_DATE",
				"     && PMOTN_END_DT == END_DATE,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLDiv",
				"split1@forest, RPMPROMO exists(PMOTN_REQ_ID_S == PROMO_ID",
				"     && PMOTN_STRT_DT == START_DATE",
				"     && PMOTN_END_DT == END_DATE",
				"     && split1@forest@MERCH_TYPE == RPMPROMO@MERCH_TYPE",
				"     && split1@forest@DEPT == RPMPROMO@DEPT",
				"     && split1@forest@CLASS == RPMPROMO@CLASS",
				"     && split1@forest@SUBCLASS == RPMPROMO@SUBCLASS",
				"     && split1@forest@ITEM == RPMPROMO@ITEM",
				"     && split1@forest@DIFF_ID == RPMPROMO@DIFF_ID",
				"     && split1@forest@LOCATION == RPMPROMO@LOCATION,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLPROMOkeys",
				"split1@forest, RPMPROMO exists(PMOTN_REQ_ID_S == PROMO_ID",
				"     && PMOTN_STRT_DT == START_DATE",
				"     && PMOTN_END_DT == END_DATE",
				"     && split1@forest@MERCH_TYPE == RPMPROMO@MERCH_TYPE",
				"     && split1@forest@DEPT == RPMPROMO@DEPT",
				"     && split1@forest@CLASS == RPMPROMO@CLASS",
				"     && split1@forest@SUBCLASS == RPMPROMO@SUBCLASS",
				"     && split1@forest@ITEM == RPMPROMO@ITEM",
				"     && split1@forest@DIFF_ID == RPMPROMO@DIFF_ID",
				"     && split1@forest@LOCATION == RPMPROMO@LOCATION,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLPROMOkeys",
				"No1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT223F_RPMUnApprPromo_Item_PX.FF_TSPCT_Rej_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFTSPCTRej",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          PMOTN_ID as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as string,",
				"          MERCH_TYPE as string,",
				"          DEPT as string,",
				"          CLASS as string,",
				"          SUBCLASS as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          LOCATION as string,",
				"          DIVISION as string,",
				"          GROUP_NO as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT22_UnApprovedPromo_Success_RPMBase_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> UnApprPromoSuccessItem",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT223_UnApprovedPromo_Errors_RPMBase_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> UnApprPromoErrorItem"
			]
		}
	}
}