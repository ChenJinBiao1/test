{
	"name": "xfmIPT012BCRItemsGlobalCCNbr_PX",
	"properties": {
		"folder": {
			"name": "01-BCRItems"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_srcIPT011BCRItemsLegacyInd_PX_DS_UMHDS",
						"type": "DatasetReference"
					},
					"name": "DSUMHDSSource"
				},
				{
					"dataset": {
						"referenceName": "AB_UMHDS_UNIV_MDSE_HIER_T",
						"type": "DatasetReference"
					},
					"name": "IPTUMHDSSource"
				},
				{
					"dataset": {
						"referenceName": "AB_GCRPR_GLBL_XREF_PARM_T",
						"type": "DatasetReference"
					},
					"name": "IPTGCRPRSource"
				},
				{
					"dataset": {
						"referenceName": "AB_TCDX_MH_CO_DIV_XRF_TCDX",
						"type": "DatasetReference"
					},
					"name": "DB2TCDXTMCOSource"
				},
				{
					"dataset": {
						"referenceName": "AB_LMGMX_LGCY_MKT_GLBL_MKT_XREF_T",
						"type": "DatasetReference"
					},
					"name": "LMGMXLGCYMKTGLBLMKTXREFT"
				},
				{
					"dataset": {
						"referenceName": "AB_SKUIX_SKU_ITM_XREF_T",
						"type": "DatasetReference"
					},
					"name": "IPTSKUIXSource"
				},
				{
					"dataset": {
						"referenceName": "AB_GSTYX_GLBL_MKT_STY_XREF_T_ASIA",
						"type": "DatasetReference"
					},
					"name": "IPTGSTYSource"
				},
				{
					"dataset": {
						"referenceName": "AB_GSCCX_GLBL_MKT_STY_CLR_XREF_T",
						"type": "DatasetReference"
					},
					"name": "IPTGSCCXSource"
				},
				{
					"dataset": {
						"referenceName": "AB_GSKUX_GLBL_MKT_SKU_XREF_T",
						"type": "DatasetReference"
					},
					"name": "IPTGSKUXSource"
				},
				{
					"dataset": {
						"referenceName": "AB_srcIPT011BCRItemsLegacyInd_PX_DS_LMHDS",
						"type": "DatasetReference"
					},
					"name": "DSLMHDSSource"
				},
				{
					"dataset": {
						"referenceName": "AB_LMHDS_LGCY_MDSE_HIER_T",
						"type": "DatasetReference"
					},
					"name": "IPTLMHDSSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_RejUMHDS_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRejUMHADSSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_RejGCRPRInd_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRejGCRPRIndSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_Rej_TCDX_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRejTCDXSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_Rej_SKUIX_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRejSKUIXSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_GSTYX_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFGSTYXSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_GSCCX_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFGSCCXSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_FF_GSKUIX_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRejGSKUIXSink"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT012BCRItemsGlobalCCNbr_PX_DS_Items_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSItemsSink"
				}
			],
			"transformations": [
				{
					"name": "LUMHDSSeqNbrLookup"
				},
				{
					"name": "LUMHDSSeqNbrerivDedColumn"
				},
				{
					"name": "LUMHDSSeqNbrSplit"
				},
				{
					"name": "LUMHDSSeqNbrSelect"
				},
				{
					"name": "LGCRPRLookup"
				},
				{
					"name": "LGCRPRDerivedColumn"
				},
				{
					"name": "LGCRPRSplit"
				},
				{
					"name": "LGCRPRSelect"
				},
				{
					"name": "FIGCRPRIndFilter"
				},
				{
					"name": "LTCDXLookup"
				},
				{
					"name": "LGSTYLookup"
				},
				{
					"name": "LLGMXLookup"
				},
				{
					"name": "LLGMXSelect"
				},
				{
					"name": "LTCDXDerivedColumn"
				},
				{
					"name": "LTCDXSplit"
				},
				{
					"name": "LSKUIXLookup"
				},
				{
					"name": "LSKUIXDerivedColumn"
				},
				{
					"name": "LSKUIXSplit"
				},
				{
					"name": "LGSTYDerivedColumn"
				},
				{
					"name": "LGSTYSplit"
				},
				{
					"name": "LGSTYSelect"
				},
				{
					"name": "LGSCCXLookup"
				},
				{
					"name": "LGSCCXDerivedColumn"
				},
				{
					"name": "LGSCCXSplit"
				},
				{
					"name": "LGSCCXSelect"
				},
				{
					"name": "LGSKUXLookup"
				},
				{
					"name": "LGSKUXDerivedColumn"
				},
				{
					"name": "LGSKUXSplit"
				},
				{
					"name": "LGSKUXSelect"
				},
				{
					"name": "LSKUIXSelect"
				},
				{
					"name": "FUMHDSUnion"
				},
				{
					"name": "FUMHDSSelect"
				},
				{
					"name": "LLMHDSLookup"
				},
				{
					"name": "LLMHDSSelect"
				},
				{
					"name": "FUMHDSDerivedColumn"
				},
				{
					"name": "XGlblLMHDSDerivedColumn"
				},
				{
					"name": "FLMHDSUMHDSUnion"
				},
				{
					"name": "LTCDXSelect"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as integer,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as integer,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string,",
				"          BrdId1 as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSUMHDSSource",
				"source(output(",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUMHDSSource",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          GLBL_XREF_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTGCRPRSource",
				"source(output(",
				"          BRD_XREF_ID as integer,",
				"          CHANNEL_ID as integer,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          MKT_CD as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DB2TCDXTMCOSource",
				"source(output(",
				"          LGCY_MKT_CD as integer,",
				"          MKT_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LMGMXLGCYMKTGLBLMKTXREFT",
				"source(output(",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          GLBL_ITM_STY_NBR as string,",
				"          CORP_ID as string,",
				"          MDSE_CO_ID as string,",
				"          MKT_CD as integer,",
				"          EGI_ITM_SKU_NBR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTSKUIXSource",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          GLBL_ITM_STY_NBR as string,",
				"          MKT_ITM_STY_NBR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTGSTYSource",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          MKT_ITM_STY_NBR as string,",
				"          MKT_DIFF_1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTGSCCXSource",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          GLBL_SKU_NBR as string,",
				"          MKT_ITM_SKU_NBR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTGSKUXSource",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as integer,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as integer,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSLMHDSSource",
				"source(output(",
				"          LGCY_MDSE_HIER_SEQ_NBR_S as string,",
				"          CORP_ID as string,",
				"          MDSE_CO_ID as string,",
				"          MDSE_DIV_ID as string,",
				"          MDSE_DEPT_ID as string,",
				"          MDSE_CLS_ID as string,",
				"          MDSE_SCLS_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTLMHDSSource",
				"DSUMHDSSource, IPTUMHDSSource lookup(DSUMHDSSource@BRD_ID == IPTUMHDSSource@BRD_ID",
				"     && DSUMHDSSource@DIV_ID == IPTUMHDSSource@DIV_ID",
				"     && DSUMHDSSource@DEPT_ID == IPTUMHDSSource@DEPT_ID",
				"     && DSUMHDSSource@CLS_ID == IPTUMHDSSource@CLS_ID",
				"     && DSUMHDSSource@SCLS_ID == IPTUMHDSSource@SCLS_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LUMHDSSeqNbrLookup",
				"LUMHDSSeqNbrLookup derive(IsMatch = isMatch()) ~> LUMHDSSeqNbrerivDedColumn",
				"LUMHDSSeqNbrerivDedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LUMHDSSeqNbrSplit@(LUMHDSSeqNbrMatch, LUMHDSSeqNbrNotMatch)",
				"LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch select(mapColumn(",
				"          BRD_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          BrdId1,",
				"          BRD_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@BRD_ID,",
				"          DIV_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@DIV_ID,",
				"          DEPT_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@DEPT_ID,",
				"          CLS_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@CLS_ID,",
				"          SCLS_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrMatch@SCLS_ID,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LUMHDSSeqNbrSelect",
				"LUMHDSSeqNbrSelect, IPTGCRPRSource lookup(BrdId1 == IPTGCRPRSource@BRD_ID",
				"     && LUMHDSSeqNbrSelect@MKT_ID == IPTGCRPRSource@MKT_ID",
				"     && LUMHDSSeqNbrSelect@CHNL_ID == IPTGCRPRSource@CHNL_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LGCRPRLookup",
				"LGCRPRLookup derive(IsMatch = isMatch()) ~> LGCRPRDerivedColumn",
				"LGCRPRDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LGCRPRSplit@(LGCRPRMatch, LGCRPRNotMatch)",
				"LGCRPRSplit@LGCRPRMatch select(mapColumn(",
				"          BRD_ID = LGCRPRSplit@LGCRPRMatch@BRD_ID,",
				"          MKT_ID = LGCRPRSplit@LGCRPRMatch@MKT_ID,",
				"          CHNL_ID = LGCRPRSplit@LGCRPRMatch@CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          BrdId1,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          BRD_ID = LGCRPRSplit@LGCRPRMatch@BRD_ID,",
				"          MKT_ID = LGCRPRSplit@LGCRPRMatch@MKT_ID,",
				"          CHNL_ID = LGCRPRSplit@LGCRPRMatch@CHNL_ID,",
				"          GLBL_XREF_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LGCRPRSelect",
				"LGCRPRSelect split(GLBL_XREF_IND == 'N',",
				"     disjoint: true) ~> FIGCRPRIndFilter@(FIGCRPRIndFilterN, FIGCRPRIndFilterY)",
				"FIGCRPRIndFilter@FIGCRPRIndFilterN, LLGMXSelect lookup(BrdId1 == BRD_XREF_ID",
				"     && CHNL_ID == CHANNEL_ID",
				"     && FIGCRPRIndFilter@FIGCRPRIndFilterN@MKT_ID == toString(LLGMXSelect@MKT_ID),",
				"     multiple: true,",
				"     broadcast: 'auto')~> LTCDXLookup",
				"select1, IPTGSTYSource lookup(BrdId1 == IPTGSTYSource@BRD_ID",
				"     && select1@MKT_ID == IPTGSTYSource@MKT_ID",
				"     && ITM_STY_NBR == MKT_ITM_STY_NBR,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LGSTYLookup",
				"DB2TCDXTMCOSource, LMGMXLGCYMKTGLBLMKTXREFT lookup(MKT_CD == LGCY_MKT_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LLGMXLookup",
				"LLGMXLookup select(mapColumn(",
				"          BRD_XREF_ID,",
				"          CHANNEL_ID,",
				"          CORP_ID,",
				"          CO_ID,",
				"          LGCY_MKT_CD,",
				"          MKT_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LLGMXSelect",
				"LTCDXLookup derive(IsMatch = isMatch()) ~> LTCDXDerivedColumn",
				"LTCDXDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LTCDXSplit@(LTCDXLookupMatch, LTCDXLookupNotMatch)",
				"LTCDXSelect, IPTSKUIXSource lookup(LTCDXSelect@CORP_ID == IPTSKUIXSource@CORP_ID",
				"     && CO_ID == MDSE_CO_ID",
				"     && MKT_ID == toString(MKT_CD)",
				"     && ITM_SKU_NBR == EGI_ITM_SKU_NBR,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LSKUIXLookup",
				"LSKUIXLookup derive(IsMatch = isMatch()) ~> LSKUIXDerivedColumn",
				"LSKUIXDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LSKUIXSplit@(LSKUIXLookupMatch, LSKUIXLookupNotMatch)",
				"LGSTYLookup derive(IsMatch = isMatch()) ~> LGSTYDerivedColumn",
				"LGSTYDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LGSTYSplit@(LGSTYLookupMatch, LGSTYLookupNotMatch)",
				"LGSTYSplit@LGSTYLookupMatch select(mapColumn(",
				"          BRD_ID = LGSTYSplit@LGSTYLookupMatch@BRD_ID,",
				"          MKT_ID = LGSTYSplit@LGSTYLookupMatch@MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          {GLBL_ITM_STY_NBR } = GLBL_ITM_STY_NBR,",
				"          BrdId1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LGSTYSelect",
				"LGSTYSelect, IPTGSCCXSource lookup(BrdId1 == IPTGSCCXSource@BRD_ID",
				"     && LGSTYSelect@MKT_ID == IPTGSCCXSource@MKT_ID",
				"     && ITM_STY_NBR == MKT_ITM_STY_NBR",
				"     && MKT_DIFF1_ID == MKT_DIFF_1_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LGSCCXLookup",
				"LGSCCXLookup derive(IsMatch = isMatch()) ~> LGSCCXDerivedColumn",
				"LGSCCXDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LGSCCXSplit@(LGSCCXLookupMatch, LGSCCXLookupNotMatch)",
				"LGSCCXSplit@LGSCCXLookupMatch select(mapColumn(",
				"          BRD_ID = LGSCCXSplit@LGSCCXLookupMatch@BRD_ID,",
				"          MKT_ID = LGSCCXSplit@LGSCCXLookupMatch@MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          {GLBL_ITM_STY_NBR },",
				"          {GLBL_ITM_STY_CC_NBR } = GLBL_ITM_STY_CC_NBR,",
				"          BrdId1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LGSCCXSelect",
				"LGSCCXSelect, IPTGSKUXSource lookup(BrdId1 == IPTGSKUXSource@BRD_ID",
				"     && LGSCCXSelect@MKT_ID == IPTGSKUXSource@MKT_ID",
				"     && ITM_SKU_NBR == GLBL_SKU_NBR,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LGSKUXLookup",
				"LGSKUXLookup derive(IsMatch = isMatch()) ~> LGSKUXDerivedColumn",
				"LGSKUXDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LGSKUXSplit@(LGSKUXLookupMatch, LGSKUXLookupNotMatch)",
				"LGSKUXSplit@LGSKUXLookupMatch select(mapColumn(",
				"          BRD_ID = LGSKUXSplit@LGSKUXLookupMatch@BRD_ID,",
				"          MKT_ID = LGSKUXSplit@LGSKUXLookupMatch@MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          GLBL_ITM_STY_NBR = {GLBL_ITM_STY_NBR },",
				"          GLBL_ITM_STY_CC_NBR = {GLBL_ITM_STY_CC_NBR },",
				"          GLBL_SKU_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LGSKUXSelect",
				"LSKUIXSplit@LSKUIXLookupMatch select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID = LSKUIXSplit@LSKUIXLookupMatch@CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          GLBL_ITM_STY_NBR,",
				"          GLBL_ITM_STY_CC_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LSKUIXSelect",
				"LSKUIXSelect, LGSKUXSelect union(byName: true)~> FUMHDSUnion",
				"FUMHDSUnion select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          MDSE_HIER_SEQ_NBR_S = UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          GLBL_ITM_STY_NBR,",
				"          {GLBL_SKU_NBR } = GLBL_SKU_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FUMHDSSelect",
				"DSLMHDSSource, IPTLMHDSSource lookup(DSLMHDSSource@CORP_ID == IPTLMHDSSource@CORP_ID",
				"     && CO_ID == MDSE_CO_ID",
				"     && DIV_ID == MDSE_DIV_ID",
				"     && DEPT_ID == MDSE_DEPT_ID",
				"     && CLS_ID == MDSE_CLS_ID",
				"     && SCLS_ID == MDSE_SCLS_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LLMHDSLookup",
				"LLMHDSLookup select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID = DSLMHDSSource@CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          LGCY_MDSE_HIER_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LLMHDSSelect",
				"FUMHDSSelect derive(SEASON_DESC = iif(trim(SEASON_DESC) == '', concat(SEASON_CD,toString(SEASON_YR)),SEASON_DESC),",
				"          CORP_ID = '',",
				"          CO_ID = '') ~> FUMHDSDerivedColumn",
				"LLMHDSSelect derive(SEASON_DESC = trim(SEASON_CD)+' '+trim(toString(SEASON_YR)),",
				"          ITM_SKU_NBR = ITM_STY_CC_NBR + right('0000'+SZ_CD,4),",
				"          DIV_ID = toInteger(DIV_ID),",
				"          CLS_ID = toInteger(CLS_ID),",
				"          DEPT_ID = toInteger(DEPT_ID),",
				"          SCLS_ID = toInteger(SCLS_ID)) ~> XGlblLMHDSDerivedColumn",
				"FUMHDSDerivedColumn, XGlblLMHDSDerivedColumn union(byName: true)~> FLMHDSUMHDSUnion",
				"LTCDXSplit@LTCDXLookupMatch select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID = LTCDXSplit@LTCDXLookupMatch@MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID = LTCDXSplit@LTCDXLookupMatch@CORP_ID,",
				"          CO_ID = LTCDXSplit@LTCDXLookupMatch@CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          BrdId1,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          BRD_XREF_ID,",
				"          CHANNEL_ID,",
				"          CORP_ID = LTCDXSplit@LTCDXLookupMatch@CORP_ID,",
				"          CO_ID = LTCDXSplit@LTCDXLookupMatch@CO_ID,",
				"          LGCY_MKT_CD,",
				"          MKT_ID = LTCDXSplit@LTCDXLookupMatch@MKT_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LTCDXSelect",
				"FIGCRPRIndFilter@FIGCRPRIndFilterY select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIF2_ID,",
				"          LGCY_IND,",
				"          BrdId1,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"LUMHDSSeqNbrSplit@LUMHDSSeqNbrNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_RejUMHDS.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrNotMatch@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrNotMatch@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrNotMatch@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrNotMatch@CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID = LUMHDSSeqNbrSplit@LUMHDSSeqNbrNotMatch@SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          BrdId1",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFRejUMHADSSink",
				"LGCRPRSplit@LGCRPRNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_RejGCRPRInd.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID = LGCRPRSplit@LGCRPRNotMatch@BRD_ID,",
				"          MKT_ID = LGCRPRSplit@LGCRPRNotMatch@MKT_ID,",
				"          CHNL_ID = LGCRPRSplit@LGCRPRNotMatch@CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          BrdId1",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFRejGCRPRIndSink",
				"LTCDXSplit@LTCDXLookupNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_Rej_TCDX.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          MKT_ID = LTCDXSplit@LTCDXLookupNotMatch@MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID = LTCDXSplit@LTCDXLookupNotMatch@CORP_ID,",
				"          CO_ID = LTCDXSplit@LTCDXLookupNotMatch@CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          BrdId1",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFRejTCDXSink",
				"LSKUIXSplit@LSKUIXLookupNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_Rej_SKUIX.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID = LSKUIXSplit@LSKUIXLookupNotMatch@CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          LGCY_MKT_CD",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFRejSKUIXSink",
				"LGSTYSplit@LGSTYLookupNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S as string,",
				"          GLBL_XREF_IND as string,",
				"          BrdId1 as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_GSTYX.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          BrdId1",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFGSTYXSink",
				"LGSCCXSplit@LGSCCXLookupNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          ITM_SKU_DESC as string,",
				"          LGCY_IND as string,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S as string,",
				"          GLBL_XREF_IND as string,",
				"          {GLBL_ITM_STY_NBR } as string,",
				"          BrdId1 as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_GSCCX.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_ABBR_DESC,",
				"          ITM_SKU_DESC,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          {GLBL_ITM_STY_NBR },",
				"          BrdId1",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFGSCCXSink",
				"LGSKUXSplit@LGSKUXLookupNotMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S as string,",
				"          GLBL_XREF_IND as string,",
				"          {GLBL_ITM_STY_NBR } as string,",
				"          {GLBL_ITM_STY_CC_NBR } as string,",
				"          BrdId1 as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.FF_GSKUIX.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          UNIV_MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_XREF_IND,",
				"          {GLBL_ITM_STY_NBR },",
				"          {GLBL_ITM_STY_CC_NBR },",
				"          BrdId1",
				"     ),",
				"     partitionBy('hash', 1)) ~> FFRejGSKUIXSink",
				"FLMHDSUMHDSUnion sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string,",
				"          MDSE_HIER_SEQ_NBR_S as string,",
				"          GLBL_ITM_STY_NBR as string,",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          {GLBL_SKU_NBR } as string,",
				"          CO_ID as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT012BCRItemsGlobalCCNbr_PX.DS_Items.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          ITM_STY_CLR_DESC,",
				"          ITM_STY_CC_NBR,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF1_ID,",
				"          MKT_DIF2_ID,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          LGCY_IND,",
				"          MDSE_HIER_SEQ_NBR_S,",
				"          GLBL_ITM_STY_NBR,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          {GLBL_SKU_NBR },",
				"          CO_ID",
				"     ),",
				"     partitionBy('hash', 1)) ~> DSItemsSink"
			]
		}
	}
}