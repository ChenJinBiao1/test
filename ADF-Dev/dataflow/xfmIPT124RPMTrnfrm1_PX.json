{
	"name": "xfmIPT124RPMTrnfrm1_PX",
	"properties": {
		"folder": {
			"name": "12-PriceUpdatesRPM"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm0_PX_DS_Promo",
						"type": "DatasetReference"
					},
					"name": "DSPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_PRGSL_PRC_GRP_ZN_STR_T_124",
						"type": "DatasetReference"
					},
					"name": "PRGSLPRCGRPZNSTRT"
				},
				{
					"dataset": {
						"referenceName": "AB_UHILV_UNIV_HIER_LVL_T_124",
						"type": "DatasetReference"
					},
					"name": "UHILVUNIVHIERLVLT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_PromoZoneRejects",
						"type": "DatasetReference"
					},
					"name": "FFPromoZoneRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPNTrnfrm2_PX_FF_UHILVRejects",
						"type": "DatasetReference"
					},
					"name": "FFUHILVRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_DeptRejects",
						"type": "DatasetReference"
					},
					"name": "FFDeptRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_DS_ApprPromoHier",
						"type": "DatasetReference"
					},
					"name": "DSApprPromoHier"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_ApprPromoSeqNbr",
						"type": "DatasetReference"
					},
					"name": "FFApprPromoSeqNbr"
				}
			],
			"transformations": [
				{
					"name": "LPromoZone"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "LPromoZonesplit1"
				},
				{
					"name": "loPromoZoneStores"
				},
				{
					"name": "rejPromoZone"
				},
				{
					"name": "split1"
				},
				{
					"name": "loPromoStores"
				},
				{
					"name": "LUHILV"
				},
				{
					"name": "LUHILVDerivedColumn"
				},
				{
					"name": "LUHILVsplit2"
				},
				{
					"name": "loUHILV"
				},
				{
					"name": "rejUHILV"
				},
				{
					"name": "FIMerchHierLvls"
				},
				{
					"name": "LDeptid"
				},
				{
					"name": "FiItemSty"
				},
				{
					"name": "LDeptidSelect"
				},
				{
					"name": "LDeptidDerivedColumn2"
				},
				{
					"name": "LDeptidsplit2"
				},
				{
					"name": "loDeptid"
				},
				{
					"name": "rejDeptid"
				},
				{
					"name": "FHierLvl"
				},
				{
					"name": "XNullcheck"
				},
				{
					"name": "coApprPromoSeq"
				},
				{
					"name": "coApprPromo"
				},
				{
					"name": "FApprPromoSty"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSPromo",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          STR_NBR as integer,",
				"          STRT_DT as timestamp,",
				"          END_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PRGSLPRCGRPZNSTRT",
				"source(output(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          MDSE_LVL_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UHILVUNIVHIERLVLT",
				"DSPromo, PRGSLPRCGRPZNSTRT lookup(DSPromo@PRC_GRP_ZN_SEQ_NBR_S == PRGSLPRCGRPZNSTRT@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LPromoZone",
				"LPromoZone derive(IsMatch = isMatch()) ~> derivedColumn1",
				"derivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> LPromoZonesplit1@(LPromoZoneMatch, LPromoZoneNotMatch)",
				"LPromoZonesplit1@LPromoZoneMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S = LPromoZonesplit1@LPromoZoneMatch@PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S = LPromoZonesplit1@LPromoZoneMatch@PRC_GRP_ZN_SEQ_NBR_S,",
				"          STR_NBR,",
				"          STRT_DT,",
				"          END_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoZoneStores",
				"LPromoZonesplit1@LPromoZoneNotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S = LPromoZonesplit1@LPromoZoneNotMatch@PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPromoZone",
				"loPromoZoneStores split(and(PMOTN_STRT_DT >= STRT_DT,PMOTN_STRT_DT <= END_DT),",
				"     disjoint: false) ~> split1@(XfmPromoStore, XfmNone)",
				"split1@XfmPromoStore select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoStores",
				"loPromoStores, UHILVUNIVHIERLVLT lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LUHILV",
				"LUHILV derive(IsMatch = isMatch()) ~> LUHILVDerivedColumn",
				"LUHILVDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LUHILVsplit2@(LUHILVMatch, LUHILVNotMatch)",
				"LUHILVsplit2@LUHILVMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD = LUHILVsplit2@LUHILVMatch@MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUHILV",
				"LUHILVsplit2@LUHILVNotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejUHILV",
				"loUHILV split(MDSE_LVL_CD == '4',",
				"     disjoint: false) ~> FIMerchHierLvls@(fioDeptid, fioMerchRejects)",
				"select2, FiItemSty lookup(select2@BRD_ID == UHILVUNIVHIERLVLT@BRD_ID",
				"     && select2@DIV_ID == UHILVUNIVHIERLVLT@DIV_ID",
				"     && select2@DEPT_ID == UHILVUNIVHIERLVLT@DEPT_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LDeptid",
				"UHILVUNIVHIERLVLT filter(MDSE_LVL_CD  =='8') ~> FiItemSty",
				"LDeptid select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD = select2@MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = select2@ITM_STY_CLR_SEQ_NBR_S,",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID = UHILVUNIVHIERLVLT@BRD_ID,",
				"          DIV_ID = UHILVUNIVHIERLVLT@DIV_ID,",
				"          DEPT_ID = UHILVUNIVHIERLVLT@DEPT_ID,",
				"          CLS_ID = UHILVUNIVHIERLVLT@CLS_ID,",
				"          SCLS_ID = UHILVUNIVHIERLVLT@SCLS_ID,",
				"          ITM_STY_SEQ_NBR_S = UHILVUNIVHIERLVLT@ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LDeptidSelect",
				"LDeptidSelect derive(IsMatch = isMatch()) ~> LDeptidDerivedColumn2",
				"LDeptidDerivedColumn2 split(IsMatch==true(),",
				"     disjoint: false) ~> LDeptidsplit2@(LDeptidMatch, LDeptidNotMatch)",
				"LDeptidsplit2@LDeptidMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S = UNIV_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDeptid",
				"LDeptidsplit2@LDeptidNotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID} = BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejDeptid",
				"loDeptid, select1 union(byName: true)~> FHierLvl",
				"FHierLvl derive(PRC_SYS_EXT_DTTM = iif(isNull(PRC_SYS_EXT_DTTM), toTimestamp(null()), PRC_SYS_EXT_DTTM),",
				"          PMOTN_PRC_UN_AMT = iif(isNull(PMOTN_PRC_UN_AMT), toDecimal(null()), PMOTN_PRC_UN_AMT),",
				"          PMOTN_PCT_OFF_RAT = iif(isNull(PMOTN_PCT_OFF_RAT), toDecimal(null()), PMOTN_PCT_OFF_RAT),",
				"          PMOTN_DLR_OFF_AMT = iif(isNull(PMOTN_DLR_OFF_AMT), toDecimal(null()), PMOTN_DLR_OFF_AMT),",
				"          { BRD_ID} = iif(isNull(BRD_ID), 0, BRD_ID),",
				"          DIV_ID = iif(isNull(DIV_ID), 0, DIV_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID), 0, DEPT_ID),",
				"          CLS_ID = iif(isNull(CLS_ID), 0, CLS_ID),",
				"          ITM_STY_CLR_SEQ_NBR_S = iif(isNull(ITM_STY_CLR_SEQ_NBR_S), 0, ITM_STY_CLR_SEQ_NBR_S),",
				"          ITM_STY_SEQ_NBR_S = iif(isNull(ITM_STY_SEQ_NBR_S), 0, ITM_STY_SEQ_NBR_S),",
				"          SCLS_ID = iif(isNull(SCLS_ID), 0, SCLS_ID)) ~> XNullcheck",
				"XNullcheck select(mapColumn(",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          MDSE_LVL_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coApprPromoSeq",
				"XNullcheck select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coApprPromo",
				"coApprPromoSeq filter(MDSE_LVL_CD == '4') ~> FApprPromoSty",
				"FIMerchHierLvls@fioMerchRejects select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"FIMerchHierLvls@fioDeptid select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"rejPromoZone sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string,",
				"          Count as string",
				"     ),",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm1_PX.FF_PromoZoneRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFPromoZoneRejects",
				"rejUHILV sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string",
				"     ),",
				"     partitionFileNames:['AB_xfmIPT124RPNTrnfrm2_PX_FF_UHILVRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFUHILVRejects",
				"rejDeptid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          BRD_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          SCLS_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string",
				"     ),",
				"     partitionFileNames:['AB_xfmIPT124RPMTrnfrm2_PX_FF_DeptRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDeptRejects",
				"coApprPromo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm1_PX.DS_ApprPromoHier.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSApprPromoHier",
				"FApprPromoSty sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm1_PX.FF_ApprPromoSeqNbr.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFApprPromoSeqNbr"
			]
		}
	}
}