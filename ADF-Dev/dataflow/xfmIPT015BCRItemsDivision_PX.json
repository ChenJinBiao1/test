{
	"name": "xfmIPT015BCRItemsDivision_PX",
	"properties": {
		"folder": {
			"name": "01-BCRItems"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_ldIPT014BCRItemsITMSCC_PX_DS_UHILV_LHILV_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSItemsSource"
				},
				{
					"dataset": {
						"referenceName": "AB_UHILV_UNIV_HIER_LVL_T_DIV",
						"type": "DatasetReference"
					},
					"name": "IPTUHILVSource1"
				},
				{
					"dataset": {
						"referenceName": "AB_LHILV_LGCY_HIER_LVL_T_DIV",
						"type": "DatasetReference"
					},
					"name": "IPTLHILVSource"
				},
				{
					"dataset": {
						"referenceName": "AB_MHIERSEQNBR_UHILV",
						"type": "DatasetReference"
					},
					"name": "UHILVSeqNbrSource"
				},
				{
					"dataset": {
						"referenceName": "AB_TMRCY_MDSE_LVL_TYP_T_DIV",
						"type": "DatasetReference"
					},
					"name": "CopyofIPTTMRCYSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT015BCRItemsDivision_PX_DS_DistinctDiv_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSDistinctDiv"
				}
			],
			"transformations": [
				{
					"name": "LUHILVLookup"
				},
				{
					"name": "LUHILVDerivedColumn"
				},
				{
					"name": "LUHILVSplit"
				},
				{
					"name": "LUHILVMatchSelect"
				},
				{
					"name": "LUHILVNotMatchSelect"
				},
				{
					"name": "LLHILVLookup"
				},
				{
					"name": "LLHILVSelect"
				},
				{
					"name": "LUHILVSeqNbrLookup"
				},
				{
					"name": "UHILVSeqNbrSelect"
				},
				{
					"name": "LUHILVSeqNbrSelect"
				},
				{
					"name": "LLHILVDerivedColumn"
				},
				{
					"name": "LLHILVSplit1"
				},
				{
					"name": "LLHILVLookupNotMatchSelect"
				},
				{
					"name": "UHILVSeqNbrDerivedColumn"
				},
				{
					"name": "LLHILVLookupNotMatchDerivedColumn"
				},
				{
					"name": "CopyofLMDSELVLCDLookup"
				},
				{
					"name": "CopyofIPTTMRCYSelect"
				},
				{
					"name": "CopyofLMDSELVLCDSelect"
				},
				{
					"name": "FDivSeqnbrUnion1"
				},
				{
					"name": "RDDistinctDiv"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          BRD_ID as integer,",
				"          CO_ID as string,",
				"          CORP_ID as string,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          PRGM_NBR as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSItemsSource",
				"source(output(",
				"          MHIER_LVL_SEQ as integer,",
				"          DIV_ID as integer,",
				"          BRD_ID as integer,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUHILVSource1",
				"source(output(",
				"          MHIER_LVL_SEQ as integer,",
				"          MDSE_DIV_ID as integer,",
				"          CORP_ID as string,",
				"          MDSE_CO_ID as string,",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTLHILVSource",
				"source(output(",
				"          MHIER_LVL_SEQ as integer,",
				"          DUMMY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UHILVSeqNbrSource",
				"source(output(",
				"          MDSE_LVL_CD as string,",
				"          TEST as integer,",
				"          DUMMY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CopyofIPTTMRCYSource",
				"RDDistinctDiv, IPTUHILVSource1 lookup(RDDistinctDiv@BRD_ID == IPTUHILVSource1@BRD_ID",
				"     && RDDistinctDiv@DIV_ID == IPTUHILVSource1@DIV_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LUHILVLookup",
				"LUHILVLookup derive(IsMatch = isMatch()) ~> LUHILVDerivedColumn",
				"LUHILVDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LUHILVSplit@(LUHILVLookupMatch, LUHILVLookupNotMatch)",
				"LUHILVSplit@LUHILVLookupMatch select(mapColumn(",
				"          BRD_ID = LUHILVSplit@LUHILVLookupMatch@BRD_ID,",
				"          CORP_ID,",
				"          CO_ID,",
				"          DIV_ID = LUHILVSplit@LUHILVLookupMatch@DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          LGCY_IND,",
				"          MHIER_LVL_SEQ,",
				"          DIV_ID = LUHILVSplit@LUHILVLookupMatch@DIV_ID,",
				"          BRD_ID = LUHILVSplit@LUHILVLookupMatch@BRD_ID,",
				"          MDSE_LVL_CD,",
				"          TEST",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LUHILVMatchSelect",
				"LUHILVSplit@LUHILVLookupNotMatch select(mapColumn(",
				"          BRD_ID = LUHILVSplit@LUHILVLookupNotMatch@BRD_ID,",
				"          CO_ID,",
				"          CORP_ID,",
				"          DIV_ID = LUHILVSplit@LUHILVLookupNotMatch@DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          LGCY_IND,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LUHILVNotMatchSelect",
				"LUHILVNotMatchSelect, IPTLHILVSource lookup(DIV_ID == MDSE_DIV_ID",
				"     && LUHILVNotMatchSelect@CORP_ID == IPTLHILVSource@CORP_ID",
				"     && CO_ID == MDSE_CO_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LLHILVLookup",
				"LLHILVSplit1@LLHILVLookupMatch select(mapColumn(",
				"          BRD_ID,",
				"          CO_ID,",
				"          CORP_ID = LLHILVSplit1@LLHILVLookupMatch@CORP_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          LGCY_IND,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          MHIER_LVL_SEQ,",
				"          MDSE_LVL_CD,",
				"          TEST",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LLHILVSelect",
				"LLHILVLookupNotMatchDerivedColumn, UHILVSeqNbrDerivedColumn lookup(LLHILVLookupNotMatchDerivedColumn@AddColumn == UHILVSeqNbrDerivedColumn@AddColumn,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LUHILVSeqNbrLookup",
				"UHILVSeqNbrSource select(mapColumn(",
				"          MHIER_LVL_SEQ,",
				"          Dummy = DUMMY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UHILVSeqNbrSelect",
				"LUHILVSeqNbrLookup select(mapColumn(",
				"          BRD_ID,",
				"          CO_ID,",
				"          CORP_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          LGCY_IND,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          MHIER_LVL_SEQ,",
				"          Dummy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LUHILVSeqNbrSelect",
				"LLHILVLookup derive(IsMatch = isMatch()) ~> LLHILVDerivedColumn",
				"LLHILVDerivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LLHILVSplit1@(LLHILVLookupMatch, LLHILVLookupNotMatch)",
				"LLHILVSplit1@LLHILVLookupNotMatch select(mapColumn(",
				"          BRD_ID,",
				"          CO_ID,",
				"          CORP_ID = LLHILVSplit1@LLHILVLookupNotMatch@CORP_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          LGCY_IND,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LLHILVLookupNotMatchSelect",
				"UHILVSeqNbrSelect derive(AddColumn = 1) ~> UHILVSeqNbrDerivedColumn",
				"LLHILVLookupNotMatchSelect derive(AddColumn = 1) ~> LLHILVLookupNotMatchDerivedColumn",
				"LUHILVSeqNbrSelect, CopyofIPTTMRCYSelect lookup(LUHILVSeqNbrSelect@Dummy == CopyofIPTTMRCYSelect@Dummy,",
				"     multiple: true,",
				"     broadcast: 'auto')~> CopyofLMDSELVLCDLookup",
				"CopyofIPTTMRCYSource select(mapColumn(",
				"          MDSE_LVL_CD,",
				"          TEST,",
				"          Dummy = DUMMY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CopyofIPTTMRCYSelect",
				"CopyofLMDSELVLCDLookup select(mapColumn(",
				"          BRD_ID,",
				"          CO_ID,",
				"          CORP_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          LGCY_IND,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          MHIER_LVL_SEQ,",
				"          MDSE_LVL_CD,",
				"          TEST",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CopyofLMDSELVLCDSelect",
				"LUHILVMatchSelect, LLHILVSelect, CopyofLMDSELVLCDSelect union(byName: true)~> FDivSeqnbrUnion1",
				"DSItemsSource aggregate(groupBy(CO_ID,",
				"          CORP_ID,",
				"          BRD_ID,",
				"          DIV_ID),",
				"     each(match(!in(['CORP_ID','CO_ID','DIV_ID','BRD_ID'],name)), $$ = first($$))) ~> RDDistinctDiv",
				"FDivSeqnbrUnion1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT015BCRItemsDivision_PX.DS_DistinctDiv.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BRD_ID,",
				"          CORP_ID,",
				"          CO_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          PRGM_NBR,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MHIER_LVL_SEQ,",
				"          MDSE_LVL_CD,",
				"          TEST,",
				"          LGCY_IND",
				"     ),",
				"     partitionBy('hash', 1)) ~> DSDistinctDiv"
			]
		}
	}
}