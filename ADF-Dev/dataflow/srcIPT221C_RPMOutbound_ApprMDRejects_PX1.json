{
	"name": "srcIPT221C_RPMOutbound_ApprMDRejects_PX1",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_ldIPT129RPMClearanceLoad_PX_FF_ClearRej",
						"type": "DatasetReference"
					},
					"name": "FFClearRej"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT12AMKDRQUpdate_PX_FF_MKDRQRej",
						"type": "DatasetReference"
					},
					"name": "FFMKDRQRej"
				},
				{
					"dataset": {
						"referenceName": "AB_MKDRQ_MD_REQ_T_221C",
						"type": "DatasetReference"
					},
					"name": "IPTMKDRQ"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_UHILV_221C",
						"type": "DatasetReference"
					},
					"name": "IPTUHILV"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Brd",
						"type": "DatasetReference"
					},
					"name": "DSBRD"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Currency",
						"type": "DatasetReference"
					},
					"name": "DSCurrency"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_MKDRQ_UHILV_221C",
						"type": "DatasetReference"
					},
					"name": "IPTMKDRQUHILV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects4_ASIA",
						"type": "DatasetReference"
					},
					"name": "AppMDErrorBrdMktChn"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects5_ASIA",
						"type": "DatasetReference"
					},
					"name": "ApprErrorMKT"
				}
			],
			"transformations": [
				{
					"name": "coMKDRQID5"
				},
				{
					"name": "loMDDummy5"
				},
				{
					"name": "rejApprovedMD4"
				},
				{
					"name": "rejApprovedMD5"
				},
				{
					"name": "LBRDClr"
				},
				{
					"name": "LBRDMKDRQ"
				},
				{
					"name": "loBRDClr"
				},
				{
					"name": "loMKDRQ"
				},
				{
					"name": "xAddDesc4"
				},
				{
					"name": "xoMKDRQ"
				},
				{
					"name": "xAddDesc3"
				},
				{
					"name": "xoBRDClr"
				},
				{
					"name": "LMerchDetail"
				},
				{
					"name": "LMerchDetail2"
				},
				{
					"name": "loMerchD"
				},
				{
					"name": "XOMKDID"
				},
				{
					"name": "LCurrency"
				},
				{
					"name": "LCurrency2"
				},
				{
					"name": "loCrncy"
				},
				{
					"name": "inItem"
				},
				{
					"name": "RemoveItemDiff"
				},
				{
					"name": "RemoveItems"
				},
				{
					"name": "LDiff"
				},
				{
					"name": "lMKTID"
				},
				{
					"name": "YesLApprovedMD4"
				},
				{
					"name": "NoLApprovedMD4"
				},
				{
					"name": "YesLApprovedMD5"
				},
				{
					"name": "NoLApprovedMD5"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          REASON_CODE as integer,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          ZONE_NODE_TYPE as integer,",
				"          EFFECTIVE_DATE as timestamp,",
				"          OUT_OF_STOCK_DATE as timestamp,",
				"          RESET_DATE as timestamp,",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as decimal(10,0),",
				"          CHANGE_PERCENT as decimal(10,0),",
				"          PRICE_GUIDE_ID as integer,",
				"          AUTO_APPROVE_IND as integer,",
				"          STATUS as string,",
				"          ERROR_MESSAGE as string,",
				"          PROCESS_ID as integer,",
				"          CLEARANCE_ID as integer,",
				"          CLEARANCE_DISPLAY_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFClearRej",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          START_DT as timestamp,",
				"          MD_PRC_AMT as decimal(10,0),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(10,0),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFMKDRQRej",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTMKDRQ",
				"source(output(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as integer,",
				"          BRD_ID as integer,",
				"          { DIV_ID} as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUHILV",
				"source(output(",
				"          BRD_ID as integer,",
				"          BRD_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSBRD",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSCurrency",
				"source(output(",
				"          CLEARANCE_ID as integer,",
				"          { BRD_ID} as integer,",
				"          { MKT_ID} as string,",
				"          { CHNL_ID} as integer,",
				"          { DIV_ID} as integer,",
				"          { DEPT_ID} as integer,",
				"          { CLS_ID} as integer,",
				"          SCLS_ID as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTMKDRQUHILV",
				"NoLApprovedMD4 select(mapColumn(",
				"          CLEARANCE_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coMKDRQID5",
				"NoLApprovedMD5 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMDDummy5",
				"YesLApprovedMD4 select(mapColumn(",
				"          REASON_CODE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          ZONE_NODE_TYPE,",
				"          EFFECTIVE_DATE,",
				"          OUT_OF_STOCK_DATE,",
				"          RESET_DATE,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_PERCENT,",
				"          PRICE_GUIDE_ID,",
				"          AUTO_APPROVE_IND,",
				"          STATUS,",
				"          ERROR_MESSAGE,",
				"          PROCESS_ID,",
				"          CLEARANCE_ID,",
				"          CLEARANCE_DISPLAY_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejApprovedMD4",
				"YesLApprovedMD5 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          START_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejApprovedMD5",
				"rejApprovedMD4, IPTMKDRQUHILV lookup(rejApprovedMD4@CLEARANCE_ID == IPTMKDRQUHILV@CLEARANCE_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDClr",
				"rejApprovedMD5, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDMKDRQ",
				"LBRDClr select(mapColumn(",
				"          { BRD_ID},",
				"          REASON_CODE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          ZONE_NODE_TYPE,",
				"          EFFECTIVE_DATE,",
				"          OUT_OF_STOCK_DATE,",
				"          RESET_DATE,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_PERCENT,",
				"          PRICE_GUIDE_ID,",
				"          AUTO_APPROVE_IND,",
				"          STATUS,",
				"          ERROR_MESSAGE,",
				"          PROCESS_ID,",
				"          CLEARANCE_ID = rejApprovedMD4@CLEARANCE_ID,",
				"          CLEARANCE_DISPLAY_ID,",
				"          CLEARANCE_ID = IPTMKDRQUHILV@CLEARANCE_ID,",
				"          { MKT_ID},",
				"          { CHNL_ID},",
				"          { DIV_ID},",
				"          { DEPT_ID},",
				"          { CLS_ID},",
				"          SCLS_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loBRDClr",
				"LBRDMKDRQ select(mapColumn(",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          START_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR,",
				"          DIV_ID = { DIV_ID},",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMKDRQ",
				"loMKDRQ derive(DESCRIPTION = 'Approved MD record rejected by Oracle while updatng the status as SENT back in IPT in job ldIPT12AMKDRQUpdate_PX') ~> xAddDesc4",
				"xAddDesc4 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          START_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoMKDRQ",
				"loBRDClr derive(DESCRIPTION = 'Approved MD Record rejected while inserting into RPM Staging in job ldIPT129RPMClearanceLoad_PX') ~> xAddDesc3",
				"xAddDesc3 select(mapColumn(",
				"          BRD_ID = { BRD_ID},",
				"          MKT_ID = { MKT_ID},",
				"          CHNL_ID = { CHNL_ID},",
				"          CLEARANCE_ID,",
				"          DIV_ID = { DIV_ID},",
				"          DEPT_ID = { DEPT_ID},",
				"          CLS_ID = { CLS_ID},",
				"          SCLS_ID,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoBRDClr",
				"xoBRDClr, DSBRD lookup(xoBRDClr@BRD_ID == DSBRD@BRD_ID",
				"     && xoBRDClr@DIV_ID == DSBRD@DIV_ID",
				"     && xoBRDClr@DEPT_ID == DSBRD@DEPT_ID",
				"     && xoBRDClr@CLS_ID == DSBRD@CLS_ID",
				"     && xoBRDClr@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LMerchDetail",
				"xoMKDRQ, DSBRD lookup(xoMKDRQ@BRD_ID == DSBRD@BRD_ID",
				"     && xoMKDRQ@DIV_ID == DSBRD@DIV_ID",
				"     && xoMKDRQ@DEPT_ID == DSBRD@DEPT_ID",
				"     && xoMKDRQ@CLS_ID == DSBRD@CLS_ID",
				"     && xoMKDRQ@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LMerchDetail2",
				"LMerchDetail select(mapColumn(",
				"          BRD_ID = xoBRDClr@BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          CLEARANCE_ID,",
				"          DIV_ID = xoBRDClr@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = xoBRDClr@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = xoBRDClr@CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID = xoBRDClr@SCLS_ID,",
				"          SCLS_DESC,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMerchD",
				"LMerchDetail2 select(mapColumn(",
				"          BRD_ID = xoMKDRQ@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          START_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR,",
				"          DIV_ID = xoMKDRQ@DIV_ID,",
				"          DEPT_ID = xoMKDRQ@DEPT_ID,",
				"          CLS_ID = xoMKDRQ@CLS_ID,",
				"          SCLS_ID = xoMKDRQ@SCLS_ID,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XOMKDID",
				"loMerchD, DSCurrency lookup(loMerchD@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCurrency",
				"XOMKDID, DSCurrency lookup(XOMKDID@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCurrency2",
				"LCurrency select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          CLEARANCE_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR = ITEM,",
				"          DIFF_1_ID = DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          PRC_GRP_ZN_SEQ_NBR_S = loMerchD@PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loCrncy",
				"LCurrency2 select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          CLEARANCE_ID = MD_REQ_SEQ_NBR_S,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID = MKT_DIFF1_ID,",
				"          MD_PRC_AMT,",
				"          START_DT,",
				"          PRC_GRP_ZN_SEQ_NBR_S = XOMKDID@PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> inItem",
				"loCrncy aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CLEARANCE_ID),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PRC_GRP_ZN_SEQ_NBR_S','CLEARANCE_ID'],name)), $$ = first($$))) ~> RemoveItemDiff",
				"inItem aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CLEARANCE_ID),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PRC_GRP_ZN_SEQ_NBR_S','CLEARANCE_ID'],name)), $$ = first($$))) ~> RemoveItems",
				"RemoveItemDiff select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          CLEARANCE_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          MD_PRC_AMT = CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LDiff",
				"RemoveItems select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          CLEARANCE_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          MD_PRC_AMT,",
				"          START_DT,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lMKTID",
				"FFClearRej, IPTMKDRQ exists(CLEARANCE_ID == MD_REQ_SEQ_NBR_S,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLApprovedMD4",
				"FFClearRej, IPTMKDRQ exists(CLEARANCE_ID == MD_REQ_SEQ_NBR_S,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLApprovedMD4",
				"FFMKDRQRej, IPTMKDRQ exists(FFMKDRQRej@MD_REQ_SEQ_NBR_S == IPTMKDRQ@MD_REQ_SEQ_NBR_S,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLApprovedMD5",
				"FFMKDRQRej, IPTMKDRQ exists(FFMKDRQRej@MD_REQ_SEQ_NBR_S == IPTMKDRQ@MD_REQ_SEQ_NBR_S,",
				"     negate:false,",
				"     broadcast: 'auto')~> NoLApprovedMD5",
				"LDiff sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects4_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> AppMDErrorBrdMktChn",
				"lMKTID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects5_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ApprErrorMKT"
			]
		}
	}
}