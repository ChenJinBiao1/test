{
	"name": "srcIPT221A_RPMOutbound_ApprPromoRejects_PX3",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved2_PromoRejects2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject2"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Brd",
						"type": "DatasetReference"
					},
					"name": "DSBRD"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Diffs",
						"type": "DatasetReference"
					},
					"name": "DSItem"
				},
				{
					"dataset": {
						"referenceName": "AB_ExtIPT221_IPT_RPM_Table_Load_DS_TMRCY",
						"type": "DatasetReference"
					},
					"name": "DSTMRCY"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_PromoUser",
						"type": "DatasetReference"
					},
					"name": "DSPromoUser"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Currency",
						"type": "DatasetReference"
					},
					"name": "DSCurrency"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFBrdMktChnItemsRej"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "LDiv2"
				},
				{
					"name": "loDiv2"
				},
				{
					"name": "coDiv2"
				},
				{
					"name": "XDiv2"
				},
				{
					"name": "LDept"
				},
				{
					"name": "coDept2"
				},
				{
					"name": "coClass2"
				},
				{
					"name": "loDept"
				},
				{
					"name": "XDept2"
				},
				{
					"name": "LClass2"
				},
				{
					"name": "loClass2"
				},
				{
					"name": "XClass2"
				},
				{
					"name": "LSubclass2"
				},
				{
					"name": "loSubclass2"
				},
				{
					"name": "coStyleDeptlevel2"
				},
				{
					"name": "LStyleDept21"
				},
				{
					"name": "LStyleDept22"
				},
				{
					"name": "loStyleDept2"
				},
				{
					"name": "LStyleColor21"
				},
				{
					"name": "LStyleColor22"
				},
				{
					"name": "loStyleColor2"
				},
				{
					"name": "FStyleCombine2"
				},
				{
					"name": "LUHLIV"
				},
				{
					"name": "StyleColor"
				},
				{
					"name": "StyleDept"
				},
				{
					"name": "xoUHLIV"
				},
				{
					"name": "LTMRCY"
				},
				{
					"name": "xoTMRCY"
				},
				{
					"name": "rmItems"
				},
				{
					"name": "xoDiffRej"
				},
				{
					"name": "LCC2"
				},
				{
					"name": "xoitemBrdRej"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          MDSE_LVL_CD as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          DESCRIPTION as string,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          DIV_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFReject2",
				"source(output(",
				"          BRD_ID as integer,",
				"          BRD_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSBRD",
				"source(output(",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_NBR as string,",
				"          DIFF_1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSItem",
				"source(output(",
				"          MDSE_LVL_CD as string,",
				"          MDSE_LVL_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSTMRCY",
				"source(output(",
				"          PMOTN_REQ_ID as integer,",
				"          PMOTN_GRP_ID_S as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSPromoUser",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSCurrency",
				"FFReject2 split(MDSE_LVL_CD == '3',",
				"     MDSE_LVL_CD == '4',",
				"     MDSE_LVL_CD == '5',",
				"     MDSE_LVL_CD == '6',",
				"     MDSE_LVL_CD == '8',",
				"     MDSE_LVL_CD == '9',",
				"     disjoint: false) ~> split1@(fioDiv2, fioDept2, fioClass2, fioSubclass2, fiostyledept2, fiostyleColor2)",
				"split1@fioDiv2, coDiv2 lookup(split1@fioDiv2@BRD_ID == coDiv2@BRD_ID",
				"     && split1@fioDiv2@DIV_ID == coDiv2@DIV_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDiv2",
				"LDiv2 select(mapColumn(",
				"          BRD_ID = split1@fioDiv2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DESCRIPTION,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DIV_ID = split1@fioDiv2@DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          BRD_DESC,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDiv2",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDiv2",
				"loDiv2 derive(DEPT_DESC = toString(null()),",
				"          CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDiv2",
				"split1@fiostyledept2, coDept2 lookup(split1@fiostyledept2@BRD_ID == coDept2@BRD_ID",
				"     && split1@fiostyledept2@DIV_ID == coDept2@DIV_ID",
				"     && split1@fiostyledept2@DEPT_ID == coDept2@DEPT_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDept",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDept2",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coClass2",
				"LDept select(mapColumn(",
				"          BRD_ID = split1@fiostyledept2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DESCRIPTION,",
				"          DEPT_ID = split1@fiostyledept2@DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DIV_ID = split1@fiostyledept2@DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDept",
				"loDept derive(CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDept2",
				"split1@fioClass2, coClass2 lookup(split1@fioClass2@BRD_ID == coClass2@BRD_ID",
				"     && split1@fioClass2@DIV_ID == coClass2@DIV_ID",
				"     && split1@fioClass2@DEPT_ID == coClass2@DEPT_ID",
				"     && split1@fioClass2@CLS_ID == coClass2@CLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClass2",
				"LClass2 select(mapColumn(",
				"          BRD_ID = split1@fioClass2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DESCRIPTION,",
				"          DEPT_ID = split1@fioClass2@DEPT_ID,",
				"          CLS_ID = split1@fioClass2@CLS_ID,",
				"          SCLS_ID,",
				"          DIV_ID = split1@fioClass2@DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          BRD_ID = coClass2@BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID = coClass2@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = coClass2@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = coClass2@CLS_ID,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loClass2",
				"loClass2 derive(SCLS_DESC = toString(null())) ~> XClass2",
				"split1@fioSubclass2, DSBRD lookup(split1@fioSubclass2@BRD_ID == DSBRD@BRD_ID",
				"     && split1@fioSubclass2@DIV_ID == DSBRD@DIV_ID",
				"     && split1@fioSubclass2@CLS_ID == DSBRD@CLS_ID",
				"     && split1@fioSubclass2@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LSubclass2",
				"LSubclass2 select(mapColumn(",
				"          BRD_ID = split1@fioSubclass2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DESCRIPTION,",
				"          DEPT_ID = split1@fioSubclass2@DEPT_ID,",
				"          CLS_ID = split1@fioSubclass2@CLS_ID,",
				"          SCLS_ID = split1@fioSubclass2@SCLS_ID,",
				"          DIV_ID = split1@fioSubclass2@DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loSubclass2",
				"DSItem select(mapColumn(",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coStyleDeptlevel2",
				"split1@fioDept2, coStyleDeptlevel2 lookup(ITM_STY_CLR_SEQ_NBR_S == coStyleDeptlevel2@ITM_STY_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleDept21",
				"LStyleDept21, DSBRD lookup(split1@fioDept2@BRD_ID == DSBRD@BRD_ID",
				"     && split1@fioDept2@DIV_ID == DSBRD@DIV_ID",
				"     && split1@fioDept2@DEPT_ID == DSBRD@DEPT_ID",
				"     && split1@fioDept2@CLS_ID == DSBRD@CLS_ID",
				"     && split1@fioDept2@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleDept22",
				"LStyleDept22 select(mapColumn(",
				"          BRD_ID = split1@fioDept2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DESCRIPTION,",
				"          DEPT_ID = split1@fioDept2@DEPT_ID,",
				"          CLS_ID = split1@fioDept2@CLS_ID,",
				"          SCLS_ID = split1@fioDept2@SCLS_ID,",
				"          DIV_ID = split1@fioDept2@DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S = ITM_STY_NBR,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStyleDept2",
				"split1@fiostyleColor2, DSBRD lookup(split1@fiostyleColor2@BRD_ID == DSBRD@BRD_ID",
				"     && split1@fiostyleColor2@DIV_ID == DSBRD@DIV_ID",
				"     && split1@fiostyleColor2@DEPT_ID == DSBRD@DEPT_ID",
				"     && split1@fiostyleColor2@CLS_ID == DSBRD@CLS_ID",
				"     && split1@fiostyleColor2@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleColor21",
				"LStyleColor21, DSItem lookup(split1@fiostyleColor2@ITM_STY_CLR_SEQ_NBR_S == DSItem@ITM_STY_CLR_SEQ_NBR_S",
				"     && split1@fiostyleColor2@ITM_STY_SEQ_NBR_S == DSItem@ITM_STY_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleColor22",
				"LStyleColor22 select(mapColumn(",
				"          BRD_ID = split1@fiostyleColor2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DESCRIPTION,",
				"          DEPT_ID = split1@fiostyleColor2@DEPT_ID,",
				"          CLS_ID = split1@fiostyleColor2@CLS_ID,",
				"          SCLS_ID = split1@fiostyleColor2@SCLS_ID,",
				"          DIV_ID = split1@fiostyleColor2@DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S = DIFF_1_ID,",
				"          ITM_STY_SEQ_NBR_S = ITM_STY_NBR,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStyleColor2",
				"XDiv2, StyleDept, XClass2, loSubclass2, XDept2, StyleColor union(byName: true)~> FStyleCombine2",
				"FStyleCombine2, DSPromoUser lookup(PMOTN_REQ_ID_S == PMOTN_GRP_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LUHLIV",
				"loStyleColor2 cast(output(",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     errors: true) ~> StyleColor",
				"loStyleDept2 cast(output(",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     errors: true) ~> StyleDept",
				"LUHLIV select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_END_DT,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          ITM_STY_NBR = ITM_STY_SEQ_NBR_S,",
				"          DIFF_1_ID = ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoUHLIV",
				"xoUHLIV, DSTMRCY lookup(xoUHLIV@MDSE_LVL_CD == DSTMRCY@MDSE_LVL_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTMRCY",
				"LTMRCY select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_END_DT,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_CD = xoUHLIV@MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          MDSE_LVL_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoTMRCY",
				"xoTMRCY aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PMOTN_REQ_ID_S','PRC_GRP_ZN_SEQ_NBR_S'],name)), $$ = first($$))) ~> rmItems",
				"rmItems select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_END_DT,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_DESC,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDiffRej",
				"xoDiffRej, DSCurrency lookup(xoDiffRej@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCC2",
				"LCC2 select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_END_DT,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_DESC,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S = xoDiffRej@PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoitemBrdRej",
				"xoitemBrdRej sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_PromoRejects2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdMktChnItemsRej"
			]
		}
	}
}