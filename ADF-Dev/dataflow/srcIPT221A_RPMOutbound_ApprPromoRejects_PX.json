{
	"name": "srcIPT221A_RPMOutbound_ApprPromoRejects_PX",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm0_PX_FF_RejMultiCncy",
						"type": "DatasetReference"
					},
					"name": "FFRejMultiCncy"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_PromoZoneRejects",
						"type": "DatasetReference"
					},
					"name": "FFPromoZoneRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPNTrnfrm2_PX_FF_UHILVRejects",
						"type": "DatasetReference"
					},
					"name": "FFUHILVRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_DeptRejects",
						"type": "DatasetReference"
					},
					"name": "FFDeptRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_InvalidStyRejects",
						"type": "DatasetReference"
					},
					"name": "FFInvalidStyRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_RejPrcStatA",
						"type": "DatasetReference"
					},
					"name": "FFRejPrcStatA"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm3_PX_FF_ItmSty",
						"type": "DatasetReference"
					},
					"name": "FFItmSty"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_RMSStyDiff1Rej",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1Rej"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT127RPMComplexLoad_PX_FF_ComplexRej",
						"type": "DatasetReference"
					},
					"name": "FFComplexRej"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT128TPROOApprUpdate_PX_FF_Rej_Pmo_Grp_Id",
						"type": "DatasetReference"
					},
					"name": "FFRejPmoGrpId"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT128TPROOApprUpdate_PX_FF_TPROORej",
						"type": "DatasetReference"
					},
					"name": "FFTPROORej"
				},
				{
					"dataset": {
						"referenceName": "IPT_UHILV",
						"type": "DatasetReference"
					},
					"name": "IPTUHILV"
				},
				{
					"dataset": {
						"referenceName": "IPT_TPROO_UHILV_OPORI",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOUHILVOPORI"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects1_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject1"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject2"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects3_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject3"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects4_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject4"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects5_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject5"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects6_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject6"
				}
			],
			"transformations": [
				{
					"name": "LBRDMultiCncy"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "xAddDesc1"
				},
				{
					"name": "select1"
				},
				{
					"name": "LBRDPromoZone"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "split2"
				},
				{
					"name": "select2"
				},
				{
					"name": "DESCRIPTION2"
				},
				{
					"name": "DESCRIPTION1"
				},
				{
					"name": "xAddDesc2"
				},
				{
					"name": "fuRejects1"
				},
				{
					"name": "LBRDUHILV"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "split3"
				},
				{
					"name": "select3"
				},
				{
					"name": "DESCRIPTION3"
				},
				{
					"name": "xAddDesc3"
				},
				{
					"name": "select4"
				},
				{
					"name": "xAddDesc4"
				},
				{
					"name": "xAddDesc5"
				},
				{
					"name": "xAddDesc6"
				},
				{
					"name": "xAddDesc7"
				},
				{
					"name": "DESCRIPTION5"
				},
				{
					"name": "DESCRIPTION6"
				},
				{
					"name": "DESCRIPTION7"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "xAddDesc8"
				},
				{
					"name": "DESCRIPTION8"
				},
				{
					"name": "union1"
				},
				{
					"name": "select5"
				},
				{
					"name": "LBRDComplx"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "split4"
				},
				{
					"name": "xAddDesc9"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "xAddDesc10"
				},
				{
					"name": "xAddDesc11"
				},
				{
					"name": "union2"
				},
				{
					"name": "select8"
				},
				{
					"name": "select9"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8')",
				"}",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string,",
				"          Count as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejMultiCncy",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string,",
				"          Count as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFPromoZoneRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFUHILVRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFDeptRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID23 as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID26 as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFInvalidStyRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          { BRD_ID} as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejPrcStatA",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRAND_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFItmSty",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRAND_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRMSStyDiff1Rej",
				"source(output(",
				"          PROMO_ID as integer,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as integer,",
				"          PROMO_COMP_DETAIL_ID as integer,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as integer,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as integer,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IGNORE_CONSTRAINTS as integer,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as integer,",
				"          THRESHOLD_TYPE as integer,",
				"          THRESHOLD_AMOUNT as decimal(10,0),",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as decimal(10,0),",
				"          CHANGE_TYPE as string,",
				"          CHANGE_AMOUNT as decimal(10,0),",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_QUANTITY as decimal(10,0),",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as integer,",
				"          PROCESS_ID as integer,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string,",
				"          sqlcode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFComplexRej",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejPmoGrpId",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string,",
				"          sqlcode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFTPROORej",
				"source(output(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as integer,",
				"          BRD_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUHILV",
				"source(output(",
				"          PROMO_ID as integer,",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOUHILVOPORI",
				"FFRejMultiCncy, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDMultiCncy",
				"LBRDMultiCncy derive(IsMatch = isMatch()) ~> derivedColumn1",
				"derivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> split1@(Yes)",
				"DESCRIPTION1 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc1",
				"split1@Yes select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"FFPromoZoneRejects, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDPromoZone",
				"LBRDPromoZone derive(IsMatch = isMatch()) ~> derivedColumn2",
				"derivedColumn2 split(IsMatch==true(),",
				"     disjoint: false) ~> split2@(Yes2)",
				"split2@Yes2 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(DESCRIPTION = 'Approved Promo Record Rejected while exploding Zone to Store in job xfmIPT124RPMTrnfrm1_PX') ~> DESCRIPTION2",
				"select1 derive(DESCRIPTION = 'Approved Promo Record Rejected while splitting the promo based on multi currency logic in job xfmIPT124RPMTrnfrm0_PX') ~> DESCRIPTION1",
				"DESCRIPTION2 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc2",
				"xAddDesc1, xAddDesc2 union(byName: true)~> fuRejects1",
				"FFUHILVRejects, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDUHILV",
				"LBRDUHILV derive(IsMatch = isMatch()) ~> derivedColumn5",
				"derivedColumn5 split(IsMatch==true(),",
				"     disjoint: false) ~> split3@(Yes3)",
				"split3@Yes3 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(DESCRIPTION = 'Approved Promo Record Rejected while fetching MH from UHILV  in job xfmIPT124RPMTrnfrm1_PX') ~> DESCRIPTION3",
				"DESCRIPTION3 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc3",
				"FFInvalidStyRejects select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID = SCLS_ID23,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"FFDeptRejects filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc4",
				"select4 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc5",
				"select11 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc6",
				"select9 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc7",
				"xAddDesc5 derive(DESCRIPTION = 'Approved Dept level Promo applied to both R and M Record Rejected in sales or inv check  in job xfmIPT124RPMTrnfrm2_PX') ~> DESCRIPTION5",
				"xAddDesc6 derive(DESCRIPTION = 'Approved  Promo  Record Rejected in  Items dataset lookup in job xfmIPT124RPMTrnfrm3_PX-BMC for this Style is not matching with BMC in BCR items data') ~> DESCRIPTION6",
				"xAddDesc7 derive(DESCRIPTION = 'Approved  Promo  Record Rejected in  Items dataset lookup in job xfmIPT124RPMTrnfrm3_PX-BMC for this CC is not matching with BMC in BCR items data') ~> DESCRIPTION7",
				"xAddDesc4 derive(DESCRIPTION = 'Approved Promo Record Rejected while exploding Dept to Style  in job xfmIPT124RPMTrnfrm1_PX') ~> derivedColumn6",
				"select10 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc8",
				"xAddDesc8 derive(DESCRIPTION = 'Approved  Promo  Record Rejected in  Items dataset lookup in job xfmIPT124RPMTrnfrm3_PX-BMC for this CC is not matching with BMC in BCR items data') ~> DESCRIPTION8",
				"DESCRIPTION5, DESCRIPTION6, DESCRIPTION7, DESCRIPTION8 union(byName: true)~> union1",
				"union1 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"FFComplexRej, IPTTPROOUHILVOPORI lookup(FFComplexRej@PROMO_ID == IPTTPROOUHILVOPORI@PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDComplx",
				"select6 derive(IsMatch = isMatch()) ~> derivedColumn7",
				"derivedColumn7 split(IsMatch==true(),",
				"     disjoint: false) ~> split4@(Yes4)",
				"split4@Yes4 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc9",
				"LBRDComplx select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID = FFComplexRej@PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_QUANTITY,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"derivedColumn8 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_QUANTITY,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"xAddDesc9 derive(DESCRIPTION = 'Approved Promo Record rejected by Oracle while inserting into RPM Staging in the job ldIPT127RPMComplexLoad_PX') ~> derivedColumn8",
				"FFRejPmoGrpId filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc10",
				"select8 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc11",
				"xAddDesc10, xAddDesc11 union(byName: true)~> union2",
				"FFTPROORej select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"FFItmSty select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"FFRMSStyDiff1Rej select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"FFRejPrcStatA select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"fuRejects1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('IPT221-RPMOutbound_Approved_PromoRejects1_ASIA.txt')],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject1",
				"xAddDesc3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('IPT221-RPMOutbound_Approved_PromoRejects2_ASIA.txt')],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject2",
				"derivedColumn6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('IPT221-RPMOutbound_Approved_PromoRejects3_ASIA.txt')],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject3",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('IPT221-RPMOutbound_Approved_PromoRejects4_ASIA.txt')],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject4",
				"select7 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('IPT221-RPMOutbound_Approved_PromoRejects5_ASIA.txt')],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject5",
				"union2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('IPT221-RPMOutbound_Approved_PromoRejects6_ASIA.txt')],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject6"
			]
		}
	}
}