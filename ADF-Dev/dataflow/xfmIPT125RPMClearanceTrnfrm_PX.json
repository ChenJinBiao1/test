{
	"name": "xfmIPT125RPMClearanceTrnfrm_PX",
	"properties": {
		"folder": {
			"name": "12-PriceUpdatesRPM"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_srcIPT123RPMClearanceExtract_PX_DS_MDReqRPMExtract",
						"type": "DatasetReference"
					},
					"name": "DSMDReqRPMExtract"
				},
				{
					"dataset": {
						"referenceName": "AB_BrandMarket_IPA",
						"type": "DatasetReference"
					},
					"name": "FFBrandMarket"
				},
				{
					"dataset": {
						"referenceName": "AB_PRGSL_PRC_GRP_ZN_STR_T_125",
						"type": "DatasetReference"
					},
					"name": "PRGSLPRCGRPZNSTRT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_FF_BrdMktRejects",
						"type": "DatasetReference"
					},
					"name": "FFBrdMktRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_FF_ZoneRejects",
						"type": "DatasetReference"
					},
					"name": "FFZoneRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_DS_MDReqRPMLoad",
						"type": "DatasetReference"
					},
					"name": "DSMDReqRPMLoad"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_DS_UnApprMDReqRPMUpdate",
						"type": "DatasetReference"
					},
					"name": "DSMDReqRPMUpdate"
				}
			],
			"transformations": [
				{
					"name": "LBrdMktId"
				},
				{
					"name": "LBrdMktIdDerivedColumn1"
				},
				{
					"name": "LBrdMktIdsplit1"
				},
				{
					"name": "loBrdMkt"
				},
				{
					"name": "rejBrdMktId"
				},
				{
					"name": "LStoreNbr"
				},
				{
					"name": "LStoreNbrselect1"
				},
				{
					"name": "LStoreNbrDerivedColumn1"
				},
				{
					"name": "LStoreNbrsplit1"
				},
				{
					"name": "loStrNbr"
				},
				{
					"name": "rejZoneGrp"
				},
				{
					"name": "FApprUnApprMD"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as long,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(10,0),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(10,0),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          BRD_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSMDReqRPMExtract",
				"source(output(",
				"          BrdId as string,",
				"          MktId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFBrandMarket",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          STR_NBR as integer,",
				"          STRT_DT as timestamp,",
				"          END_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PRGSLPRCGRPZNSTRT",
				"DSMDReqRPMExtract, FFBrandMarket lookup(BRD_ID == toInteger(BrdId)",
				"     && MKT_ID == MktId,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LBrdMktId",
				"LBrdMktId derive(IsMatch = isMatch()) ~> LBrdMktIdDerivedColumn1",
				"LBrdMktIdDerivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> LBrdMktIdsplit1@(LBrdMktIdMatch, LBrdMktIdNotMatch)",
				"LBrdMktIdsplit1@LBrdMktIdMatch select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loBrdMkt",
				"LBrdMktIdsplit1@LBrdMktIdNotMatch select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejBrdMktId",
				"loBrdMkt, PRGSLPRCGRPZNSTRT lookup(loBrdMkt@PRC_GRP_ZN_SEQ_NBR_S == PRGSLPRCGRPZNSTRT@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LStoreNbr",
				"LStoreNbr select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S = loBrdMkt@PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT = loBrdMkt@STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S = PRGSLPRCGRPZNSTRT@PRC_GRP_ZN_SEQ_NBR_S,",
				"          STR_NBR,",
				"          STRT_DT = PRGSLPRCGRPZNSTRT@STRT_DT,",
				"          END_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LStoreNbrselect1",
				"LStoreNbrselect1 derive(IsMatch = isMatch()) ~> LStoreNbrDerivedColumn1",
				"LStoreNbrDerivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> LStoreNbrsplit1@(LStoreNbrMatch, LStoreNbrNotMatch)",
				"LStoreNbrsplit1@LStoreNbrMatch select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStrNbr",
				"LStoreNbrsplit1@LStoreNbrNotMatch select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejZoneGrp",
				"loStrNbr split(PROC_STAT_CD=='6',",
				"     PROC_STAT_CD=='8',",
				"     disjoint: false) ~> FApprUnApprMD@(foApprMD, foUnApprMD)",
				"rejBrdMktId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT125RPMClearanceTrnfrm_PX.FF_BrdMktRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdMktRejects",
				"rejZoneGrp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MD_REQ_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          STRT_DT as string,",
				"          MD_PRC_AMT as string,",
				"          RCMD_MD_PCT_OFF_RAT as string,",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          MD_CNT as string,",
				"          PNT_DT as string,",
				"          BRD_ID as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string",
				"     ),",
				"     partitionFileNames:['xfmIPT125RPMClearanceTrnfrm_PX.FF_ZoneRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFZoneRejects",
				"FApprUnApprMD@foApprMD sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MD_REQ_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          STRT_DT as string,",
				"          MD_PRC_AMT as string,",
				"          RCMD_MD_PCT_OFF_RAT as string,",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          MD_CNT as string,",
				"          PNT_DT as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as string",
				"     ),",
				"     partitionFileNames:['xfmIPT125RPMClearanceTrnfrm_PX.DS_MDReqRPMLoad.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSMDReqRPMLoad",
				"FApprUnApprMD@foUnApprMD sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MD_REQ_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          STRT_DT as string,",
				"          MD_PRC_AMT as string,",
				"          RCMD_MD_PCT_OFF_RAT as string,",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          MD_CNT as string,",
				"          PNT_DT as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as string",
				"     ),",
				"     partitionFileNames:['xfmIPT125RPMClearanceTrnfrm_PX.DS_UnApprMDReqRPMUpdate.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSMDReqRPMUpdate"
			]
		}
	}
}