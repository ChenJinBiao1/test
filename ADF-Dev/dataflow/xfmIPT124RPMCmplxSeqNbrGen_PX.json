{
	"name": "xfmIPT124RPMCmplxSeqNbrGen_PX",
	"properties": {
		"folder": {
			"name": "12-PriceUpdatesRPM"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_DS_ComplexPromoLoad",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromoLoad"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_ComplexPromo",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_FF_RejDCCmplxToRPM",
						"type": "DatasetReference"
					},
					"name": "FFRejDCCmplxToRPM"
				}
			],
			"transformations": [
				{
					"name": "XCmplxPromoLoad"
				},
				{
					"name": "XCmplxPromoLoadSelect"
				},
				{
					"name": "split1"
				},
				{
					"name": "xoCompIdPct"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSComplexPromoLoad",
				"DSComplexPromoLoad derive(PROMO_ID = PMOTN_REQ_ID_S,",
				"          PROMO_NAME = PMOTN_DESC,",
				"          COMP_DISPLAY_ID = toString(null()),",
				"          PROMO_COMP_ID = toInteger(''),",
				"          PROMO_COMP_DETAIL_ID = toInteger(null()),",
				"          PROMO_COMP_DETAIL_DISPLAY_ID = toString(null()),",
				"          THRESHOLD_ID = toInteger(null()),",
				"          THRESHOLD_DISPLAY_ID = toString(null()),",
				"          MERCH_TYPE = iif(MDSE_LVL_CD == '9', 4, iif(MDSE_LVL_CD == '4', 0, \r",
				"iif(MDSE_LVL_CD == '5', 2, iif(MDSE_LVL_CD == '8', 0, iif(MDSE_LVL_CD == '3', 6, 5))))),",
				"          DIVISION = iif(MDSE_LVL_CD == '4', toInteger(null()), iif(toInteger(MDSE_LVL_CD) > 5, toInteger(null()), BRD_ID)),",
				"          GROUP_NO = iif(MDSE_LVL_CD == '4', toInteger(null()), iif(toInteger(MDSE_LVL_CD) > 5, toInteger(null()), DIV_ID) ),",
				"          DEPT = iif(MDSE_LVL_CD == '4', toInteger(null()), iif(toInteger(MDSE_LVL_CD) > 5, toInteger(null()), DEPT_ID) ),",
				"          CLASS = iif(toInteger(MDSE_LVL_CD) > 5, toInteger(null()), iif(toInteger(MDSE_LVL_CD) == 4, toInteger(null()), CLS_ID) ),",
				"          SUBCLASS = iif(toInteger(MDSE_LVL_CD) > 6, toInteger(null()), iif(toInteger(MDSE_LVL_CD) == 4, toInteger(null()), SCLS_ID) ),",
				"          DIFF_ID = MKT_DIFF1_ID,",
				"          ITEM = ITM_STY_NBR,",
				"          ATTRIBUTE_1 = toString(null()),",
				"          ATTRIBUTE_2 = toString(null()),",
				"          ATTRIBUTE_3 = toString(null()),",
				"          ZONE_NODE_TYPE = 0,",
				"          ZONE_ID = toInteger(null()),",
				"          LOCATION = STR_NBR,",
				"          APPLY_TO_CODE = iif(PMOTN_APPL_TYP_CD == 'R', 0, iif(PMOTN_APPL_TYP_CD == 'M', 1, 2)),",
				"          START_DATE = PMOTN_STRT_DT,",
				"          END_DATE = PMOTN_END_DT,",
				"          IGNORE_CONSTRAINTS = 0,",
				"          THRESHOLD_NAME = toString(null()),",
				"          CURRENCY_CODE = CNCY_CD,",
				"          QUALIFICATION_TYPE = 1,",
				"          THRESHOLD_TYPE = 1,",
				"          THRESHOLD_AMOUNT = toDecimal(null()),",
				"          THRESHOLD_CURRENCY = toString(null()),",
				"          THRESHOLD_QUANTITY = toDecimal(MIN_QTY),",
				"          CHANGE_TYPE = iif(isNull(PMOTN_PCT_OFF_RAT), iif(isNull(PMOTN_DLR_OFF_AMT), 2, 1), 0),",
				"          CHANGE_AMOUNT = iif(iif(isNull(PMOTN_PCT_OFF_RAT), iif(isNull(PMOTN_DLR_OFF_AMT), 2, 1), 0) == 1, toDecimal(0-PMOTN_DLR_OFF_AMT), \r",
				"iif(iif(isNull(PMOTN_PCT_OFF_RAT), iif(isNull(PMOTN_DLR_OFF_AMT), 2, 1), 0) == 2, PMOTN_PRC_UN_AMT, toDecimal(null()))),",
				"          CHANGE_CURRENCY = CNCY_CD,",
				"          CHANGE_PERCENT = iif(iif(isNull(PMOTN_PCT_OFF_RAT),iif(isNull(PMOTN_DLR_OFF_AMT),2,1),0)==0, toDecimal(0-PMOTN_PCT_OFF_RAT),  toDecimal(null())),",
				"          CHANGE_UOM = iif(iif(isNull(PMOTN_PCT_OFF_RAT), iif(isNull(PMOTN_DLR_OFF_AMT), 2, 1), 0) ==2, 'EA', toString(null())),",
				"          AUTO_APPROVE_IND = 1,",
				"          PROCESS_ID = toInteger(null()),",
				"          STATUS = 'N',",
				"          ERR_MSG_TXT = toString(null())) ~> XCmplxPromoLoad",
				"XCmplxPromoLoad select(mapColumn(",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_PERCENT,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XCmplxPromoLoadSelect",
				"XCmplxPromoLoadSelect split(length(toString(LOCATION ))< 5,",
				"     length(toString(LOCATION )) > 4,",
				"     disjoint: false) ~> split1@(xoCompIdPct, rejDCCmplxToRPM)",
				"split1@xoCompIdPct derive(PROMO_COMP_ID = iif(CHANGE_TYPE  == 0,PROMO_COMP_ID, 1)) ~> xoCompIdPct",
				"xoCompIdPct sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PROMO_ID as string,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as string,",
				"          PROMO_COMP_DETAIL_ID as string,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as string,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as string,",
				"          DIVISION as string,",
				"          GROUP_NO as string,",
				"          DEPT as string,",
				"          CLASS as string,",
				"          SUBCLASS as string,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as string,",
				"          ZONE_ID as string,",
				"          LOCATION as string,",
				"          APPLY_TO_CODE as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          IGNORE_CONSTRAINTS as string,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as string,",
				"          THRESHOLD_TYPE as string,",
				"          THRESHOLD_AMOUNT as string,",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as string,",
				"          CHANGE_TYPE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as string,",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as string,",
				"          PROCESS_ID as string,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string",
				"     ),",
				"     partitionFileNames:['xfmIPT124RPMCmplxSeqNbrGen_PX.DS_ComplexPromo.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSComplexPromo",
				"split1@rejDCCmplxToRPM sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMCmplxSeqNbrGen_PX.FF_RejDCCmplxToRPM.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRejDCCmplxToRPM"
			]
		}
	}
}