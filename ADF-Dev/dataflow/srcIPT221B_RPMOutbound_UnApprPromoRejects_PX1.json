{
	"name": "srcIPT221B_RPMOutbound_UnApprPromoRejects_PX1",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_ldIPT12DTPROOUnApprUpdate_PX_FF_Rej_Pmo_Grp_Id",
						"type": "DatasetReference"
					},
					"name": "FRejPmoGrpId"
				},
				{
					"dataset": {
						"referenceName": "AB_TPROO_UHILV_TPRGP_221_78",
						"type": "DatasetReference"
					},
					"name": "TPROOUHILVTPRGP"
				},
				{
					"dataset": {
						"referenceName": "AB_TPROO_UHILV_TNETP_221_78",
						"type": "DatasetReference"
					},
					"name": "TPROOUHILVTNETP"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Brd",
						"type": "DatasetReference"
					},
					"name": "DSBrdID"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Diffs",
						"type": "DatasetReference"
					},
					"name": "DSDiffs"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_PromoUser",
						"type": "DatasetReference"
					},
					"name": "DSPromoUser"
				},
				{
					"dataset": {
						"referenceName": "AB_ExtIPT221_IPT_RPM_Table_Load_DS_TMRCY",
						"type": "DatasetReference"
					},
					"name": "DSTMRCY"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Currency",
						"type": "DatasetReference"
					},
					"name": "DSCurrency"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_OPORI_221_78",
						"type": "DatasetReference"
					},
					"name": "IPTPROOOPORI"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_UnApproved_PromoRejects1_FF_UnapprovedDummy3_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFUnapprovedDummy3"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_UnApproved_PromoRejects2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFBrdMktChnItemsRej"
				}
			],
			"transformations": [
				{
					"name": "LPromo3"
				},
				{
					"name": "loUnapprovedDummy1"
				},
				{
					"name": "rejUnapprovedItem3"
				},
				{
					"name": "LBRDOPORI"
				},
				{
					"name": "loOPORI"
				},
				{
					"name": "rejBRDOPORPI"
				},
				{
					"name": "LTNETP1"
				},
				{
					"name": "loPromoTPRGP"
				},
				{
					"name": "FAddPromo"
				},
				{
					"name": "xAddDesc"
				},
				{
					"name": "foAddPromoID"
				},
				{
					"name": "xoDesc"
				},
				{
					"name": "split2"
				},
				{
					"name": "coStyle2"
				},
				{
					"name": "coClassLevel2"
				},
				{
					"name": "coDivlevel2"
				},
				{
					"name": "coDeptlevel2"
				},
				{
					"name": "LDiv2"
				},
				{
					"name": "LStyleDept1"
				},
				{
					"name": "LSubclass2"
				},
				{
					"name": "LClass2"
				},
				{
					"name": "LDept2"
				},
				{
					"name": "LStyleColor1"
				},
				{
					"name": "loDiv2"
				},
				{
					"name": "XDiv2"
				},
				{
					"name": "loDept2"
				},
				{
					"name": "XDept2"
				},
				{
					"name": "loClass2"
				},
				{
					"name": "XClass2"
				},
				{
					"name": "loSubclass2"
				},
				{
					"name": "LStyleDept2"
				},
				{
					"name": "loStyleDept1"
				},
				{
					"name": "LStyleColor2"
				},
				{
					"name": "loStyleColor1"
				},
				{
					"name": "FItems2"
				},
				{
					"name": "LTRMCY"
				},
				{
					"name": "xoTMRCY"
				},
				{
					"name": "rmItems"
				},
				{
					"name": "xoDiffRej"
				},
				{
					"name": "LCC3"
				},
				{
					"name": "xoitemBrdRej"
				},
				{
					"name": "loStyleDept2"
				},
				{
					"name": "loStyleColor2"
				},
				{
					"name": "LBrdOPO"
				},
				{
					"name": "XOBRDOPORI"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA'),",
				"     pBrandId as integer (1),",
				"     pChnlId1 as integer (1),",
				"     pMarketId as string ('8')",
				"}",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FRejPmoGrpId",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          PMOTN_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TPROOUHILVTPRGP",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          PMOTN_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TPROOUHILVTNETP",
				"source(output(",
				"          BRD_ID as integer,",
				"          BRD_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSBrdID",
				"source(output(",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_NBR as string,",
				"          DIFF_1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDiffs",
				"source(output(",
				"          PMOTN_REQ_ID as integer,",
				"          PMOTN_GRP_ID_S as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSPromoUser",
				"source(output(",
				"          MDSE_LVL_CD as string,",
				"          MDSE_LVL_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSTMRCY",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSCurrency",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTPROOOPORI",
				"FRejPmoGrpId, IPTPROOOPORI lookup(FRejPmoGrpId@PMOTN_REQ_ID_S == IPTPROOOPORI@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromo3",
				"LPromo3 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FRejPmoGrpId@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUnapprovedDummy1",
				"LPromo3 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FRejPmoGrpId@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejUnapprovedItem3",
				"rejUnapprovedItem3, TPROOUHILVTPRGP lookup(rejUnapprovedItem3@PMOTN_REQ_ID_S == TPROOUHILVTPRGP@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDOPORI",
				"LBRDOPORI select(mapColumn(",
				"          PMOTN_REQ_ID_S = rejUnapprovedItem3@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loOPORI",
				"LBRDOPORI select(mapColumn(",
				"          PMOTN_REQ_ID_S = rejUnapprovedItem3@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejBRDOPORPI",
				"rejBRDOPORPI, TPROOUHILVTNETP lookup(rejBRDOPORPI@PMOTN_REQ_ID_S == TPROOUHILVTNETP@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTNETP1",
				"LTNETP1 select(mapColumn(",
				"          PMOTN_REQ_ID_S = rejBRDOPORPI@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoTPRGP",
				"loPromoTPRGP, loOPORI union(byName: true)~> FAddPromo",
				"foAddPromoID derive(PRC_SYS_EXT_DTTM = iif(isNull(PRC_SYS_EXT_DTTM) ,toTimestamp(null()) , PRC_SYS_EXT_DTTM),",
				"          BRD_ID = iif(isNull(BRD_ID) ,toInteger(null()) , BRD_ID),",
				"          SCLS_ID = iif(isNull(SCLS_ID) ,toInteger(null()) , SCLS_ID),",
				"          CLS_ID = iif(isNull(CLS_ID) ,toInteger(null()) , CLS_ID),",
				"          DIV_ID = iif(isNull(DIV_ID) ,toInteger(null()) , DIV_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID) ,toInteger(null()) , DEPT_ID),",
				"          DESCRIPTION = 'Unapproved Promo Record Rejected in OPORI lookup while updating status back in IPT in job ldIPT12DTPROOUnApprUpdate_PX') ~> xAddDesc",
				"FAddPromo filter((BRD_ID == $pBrandId || BRD_ID == 0) && CHNL_ID == $pChnlId1 && MKT_ID == $pMarketId) ~> foAddPromoID",
				"xAddDesc select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDesc",
				"xoDesc split(MDSE_LVL_CD == '3',",
				"     MDSE_LVL_CD == '4',",
				"     MDSE_LVL_CD == '5',",
				"     MDSE_LVL_CD == '6',",
				"     MDSE_LVL_CD == '8',",
				"     MDSE_LVL_CD == '9',",
				"     disjoint: false) ~> split2@(fioDiv2, fioDept2, fioClass2, fioSubclass2, fioStyleDepte2, fioStyleColor2)",
				"DSDiffs select(mapColumn(",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coStyle2",
				"DSBrdID select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coClassLevel2",
				"DSBrdID select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDivlevel2",
				"DSBrdID select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDeptlevel2",
				"split2@fioDiv2, coDivlevel2 lookup(split2@fioDiv2@BRD_ID == coDivlevel2@BRD_ID",
				"     && split2@fioDiv2@DIV_ID == coDivlevel2@DIV_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDiv2",
				"split2@fioStyleDepte2, coStyle2 lookup(split2@fioStyleDepte2@ITM_STY_SEQ_NBR_S == coStyle2@ITM_STY_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleDept1",
				"split2@fioSubclass2, DSBrdID lookup(split2@fioSubclass2@BRD_ID == DSBrdID@BRD_ID",
				"     && split2@fioSubclass2@DIV_ID == DSBrdID@DIV_ID",
				"     && split2@fioSubclass2@DEPT_ID == DSBrdID@DEPT_ID",
				"     && split2@fioSubclass2@CLS_ID == DSBrdID@CLS_ID",
				"     && split2@fioSubclass2@SCLS_ID == DSBrdID@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LSubclass2",
				"split2@fioClass2, coClassLevel2 lookup(split2@fioClass2@BRD_ID == coClassLevel2@BRD_ID",
				"     && split2@fioClass2@DIV_ID == coClassLevel2@DIV_ID",
				"     && split2@fioClass2@DEPT_ID == coClassLevel2@DEPT_ID",
				"     && split2@fioClass2@CLS_ID == coClassLevel2@CLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClass2",
				"split2@fioDept2, coDeptlevel2 lookup(split2@fioDept2@BRD_ID == coDeptlevel2@BRD_ID",
				"     && split2@fioDept2@DIV_ID == coDeptlevel2@DIV_ID",
				"     && split2@fioDept2@DEPT_ID == coDeptlevel2@DEPT_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDept2",
				"split2@fioStyleColor2, DSBrdID lookup(split2@fioStyleColor2@BRD_ID == DSBrdID@BRD_ID",
				"     && split2@fioStyleColor2@DIV_ID == DSBrdID@DIV_ID",
				"     && split2@fioStyleColor2@DEPT_ID == DSBrdID@DEPT_ID",
				"     && split2@fioStyleColor2@CLS_ID == DSBrdID@CLS_ID",
				"     && split2@fioStyleColor2@SCLS_ID == DSBrdID@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleColor1",
				"LDiv2 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID = split2@fioDiv2@BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID = split2@fioDiv2@DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDiv2",
				"loDiv2 derive(DEPT_DESC = toString(null()),",
				"          CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDiv2",
				"LDept2 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID = split2@fioDept2@BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID = split2@fioDept2@DIV_ID,",
				"          DEPT_ID = split2@fioDept2@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDept2",
				"loDept2 derive(CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDept2",
				"LClass2 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID = split2@fioClass2@BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID = split2@fioClass2@CLS_ID,",
				"          DIV_ID = split2@fioClass2@DIV_ID,",
				"          DEPT_ID = split2@fioClass2@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loClass2",
				"loClass2 derive(SCLS_DESC = toString(null())) ~> XClass2",
				"LSubclass2 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID = split2@fioSubclass2@BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID = split2@fioSubclass2@SCLS_ID,",
				"          CLS_ID = split2@fioSubclass2@CLS_ID,",
				"          DIV_ID = split2@fioSubclass2@DIV_ID,",
				"          DEPT_ID = split2@fioSubclass2@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loSubclass2",
				"LStyleDept1, DSBrdID lookup(split2@fioStyleDepte2@BRD_ID == DSBrdID@BRD_ID",
				"     && split2@fioStyleDepte2@DIV_ID == DSBrdID@DIV_ID",
				"     && split2@fioStyleDepte2@DEPT_ID == DSBrdID@DEPT_ID",
				"     && split2@fioStyleDepte2@CLS_ID == DSBrdID@CLS_ID",
				"     && split2@fioStyleDepte2@SCLS_ID == DSBrdID@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleDept2",
				"LStyleDept2 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID = split2@fioStyleDepte2@BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID = split2@fioStyleDepte2@SCLS_ID,",
				"          CLS_ID = split2@fioStyleDepte2@CLS_ID,",
				"          DIV_ID = split2@fioStyleDepte2@DIV_ID,",
				"          DEPT_ID = split2@fioStyleDepte2@DEPT_ID,",
				"          ITM_STY_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStyleDept1",
				"LStyleColor1, DSDiffs lookup(split2@fioStyleColor2@ITM_STY_SEQ_NBR_S == DSDiffs@ITM_STY_SEQ_NBR_S",
				"     && split2@fioStyleColor2@ITM_STY_CLR_SEQ_NBR_S == DSDiffs@ITM_STY_CLR_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleColor2",
				"LStyleColor2 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          BRD_ID = split2@fioStyleColor2@BRD_ID,",
				"          DESCRIPTION,",
				"          SCLS_ID = split2@fioStyleColor2@SCLS_ID,",
				"          CLS_ID = split2@fioStyleColor2@CLS_ID,",
				"          DIV_ID = split2@fioStyleColor2@DIV_ID,",
				"          DEPT_ID = split2@fioStyleColor2@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S = ITM_STY_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = DIFF_1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStyleColor1",
				"XDiv2, loStyleDept2, loSubclass2, XClass2, XDept2, loStyleColor2 union(byName: true)~> FItems2",
				"XOBRDOPORI, DSTMRCY lookup(XOBRDOPORI@MDSE_LVL_CD == DSTMRCY@MDSE_LVL_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTRMCY",
				"LTRMCY select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD = XOBRDOPORI@MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoTMRCY",
				"xoTMRCY aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PMOTN_REQ_ID_S','PRC_GRP_ZN_SEQ_NBR_S'],name)), $$ = first($$))) ~> rmItems",
				"rmItems select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDiffRej",
				"xoDiffRej, DSCurrency lookup(xoDiffRej@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCC3",
				"LCC3 select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          MDSE_LVL_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S = xoDiffRej@PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          CRT_UPDT_USER_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoitemBrdRej",
				"loStyleDept1 cast(output(",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     errors: true) ~> loStyleDept2",
				"loStyleColor1 cast(output(",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     errors: true) ~> loStyleColor2",
				"FItems2, DSPromoUser lookup(PMOTN_REQ_ID_S == PMOTN_GRP_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdOPO",
				"LBrdOPO select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          PMOTN_GRP_ID_S,",
				"          ITM_STY_NBR = ITM_STY_SEQ_NBR_S,",
				"          DIFF_1_ID = ITM_STY_CLR_SEQ_NBR_S,",
				"          CRT_UPDT_USER_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XOBRDOPORI",
				"loUnapprovedDummy1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_UnApproved_PromoRejects1_FF_UnapprovedDummy3_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFUnapprovedDummy3",
				"xoitemBrdRej sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_UnApproved_PromoRejects2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdMktChnItemsRej"
			]
		}
	}
}