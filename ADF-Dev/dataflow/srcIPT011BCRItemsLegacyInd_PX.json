{
	"name": "srcIPT011BCRItemsLegacyInd_PX",
	"properties": {
		"folder": {
			"name": "01-BCRItems"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_Items_BCR_to_IPT",
						"type": "DatasetReference"
					},
					"name": "FFBCRItemExtract"
				},
				{
					"dataset": {
						"referenceName": "AB_BMCPC_BRD_MKT_CTRY_LGCY_CTL_T_01",
						"type": "DatasetReference"
					},
					"name": "BmcpcBrdMktCtryLgcyctlT"
				},
				{
					"dataset": {
						"referenceName": "AB_UIACX_UNIV_INTR_APPL_XREF_T",
						"type": "DatasetReference"
					},
					"name": "UiacxUnivIntrApplXrefT"
				},
				{
					"dataset": {
						"referenceName": "AB_LIACX_LGCY_INTR_APPL_XREF_T",
						"type": "DatasetReference"
					},
					"name": "LiacxLgcyIntrApplXrefT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_srcIPT011BCRItemsLegacyInd_PX_FF_BMCPC_Rej_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRejBMCPC"
				},
				{
					"dataset": {
						"referenceName": "AB_srcIPT011BCRItemsLegacyInd_PX_DS_UMHDS",
						"type": "DatasetReference"
					},
					"name": "DSUMHDS"
				},
				{
					"dataset": {
						"referenceName": "AB_srcIPT011BCRItemsLegacyInd_PX_DS_LMHDS",
						"type": "DatasetReference"
					},
					"name": "DSLMHDS"
				}
			],
			"transformations": [
				{
					"name": "LLegacyInd"
				},
				{
					"name": "CheckLLegacyIndMatch"
				},
				{
					"name": "LLegacyIndMatchSplit"
				},
				{
					"name": "xoLMHDSSplit"
				},
				{
					"name": "xoUMHDSTransform"
				},
				{
					"name": "xoLMHDSTrandform"
				},
				{
					"name": "LOutletLookup"
				},
				{
					"name": "xoLMHDSLookup"
				},
				{
					"name": "CheckLOutletLookupMatch"
				},
				{
					"name": "split1"
				},
				{
					"name": "FOutlet"
				},
				{
					"name": "CheckxoLMHDSLookup"
				},
				{
					"name": "split2"
				},
				{
					"name": "FOutletLegacyFunnel"
				},
				{
					"name": "FFBCRItemExtractSelect"
				},
				{
					"name": "rejBMCPC"
				},
				{
					"name": "xoUMHDSSelect"
				},
				{
					"name": "xoLMHDSSelect"
				},
				{
					"name": "rejUHILVLoad"
				},
				{
					"name": "loUHILVLoad"
				},
				{
					"name": "rejLMHDSLoad"
				},
				{
					"name": "loLMHDSLoad"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          OPR_BRD_ID as integer,",
				"          OPR_MKT_ID as string,",
				"          OPR_CHNL_ID as integer,",
				"          BCR_BRD_NM as string,",
				"          BCR_MKT_NM as string,",
				"          OPR_MDSE_CORP_ID as string,",
				"          OPR_MDSE_CO_ID as string,",
				"          MDSE_CORP_DESC as string,",
				"          MDSE_CO_DESC as string,",
				"          OPR_MDSE_DIV_ID as string,",
				"          MDSE_DIV_DESC as string,",
				"          OPR_MDSE_DEPT_ID as string,",
				"          MDSE_DEPT_DESC as string,",
				"          OPR_MDSE_CLASS_ID as string,",
				"          MDSE_CLS_DESC as string,",
				"          OPR_MDSE_SCLS_ID as string,",
				"          MDSE_SCLS_DESC as string,",
				"          OPR_STY_CD as string,",
				"          MDSE_STY_DESC as string,",
				"          CLR_ID as string,",
				"          OPR_STY_CLR_NBR as string,",
				"          PRD_UNQ_DESC as string,",
				"          OPR_MDSE_PGM_ID as string,",
				"          MDSE_PGM_DESC as string,",
				"          OPR_BRD_SKU_ID as string,",
				"          BRD_SKU_DESC as string,",
				"          BRD_SKU_ABBR_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_MDL_CD as string,",
				"          SZ_DESC as string,",
				"          SEAS_CD as string,",
				"          SEAS_YR_NBR as string,",
				"          SEAS_YR_DESC as string,",
				"          OPR_SZ_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFBCRItemExtract",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          LGCY_IND as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BmcpcBrdMktCtryLgcyctlT",
				"source(output(",
				"          BrdId as integer,",
				"          DivId as integer,",
				"          APPL_BRD_ID as integer,",
				"          APPL_DIV_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UiacxUnivIntrApplXrefT",
				"source(output(",
				"          CorpId as string,",
				"          CoId as string,",
				"          DivId as string,",
				"          MDSE_CORP_ID as string,",
				"          MDSE_CO_ID as string,",
				"          MDSE_DIV_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LiacxLgcyIntrApplXrefT",
				"FFBCRItemExtractSelect, BmcpcBrdMktCtryLgcyctlT lookup(FFBCRItemExtractSelect@BRD_ID == BmcpcBrdMktCtryLgcyctlT@BRD_ID",
				"     && FFBCRItemExtractSelect@MKT_ID == BmcpcBrdMktCtryLgcyctlT@MKT_ID",
				"     && FFBCRItemExtractSelect@CHNL_ID == BmcpcBrdMktCtryLgcyctlT@CHNL_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LLegacyInd",
				"LLegacyInd derive(IsMatch = isMatch()) ~> CheckLLegacyIndMatch",
				"CheckLLegacyIndMatch split(IsMatch==true(),",
				"     disjoint: true) ~> LLegacyIndMatchSplit@(LLegacyIndMatch, LLegacyIndNotMatch)",
				"LLegacyIndMatchSplit@LLegacyIndMatch split(LGCY_IND=='Y',",
				"     LGCY_IND=='N',",
				"     disjoint: false) ~> xoLMHDSSplit@(xoLMHDS, xoUMHDS1)",
				"xoUMHDSSelect derive(CORP_ID = trim(CORP_ID),",
				"          CO_ID = trim(CO_ID),",
				"          BrdId1 = BRD_ID,",
				"          DIV_ID = toInteger(DIV_ID)) ~> xoUMHDSTransform",
				"xoLMHDSSelect derive(CORP_ID = right('00'+ CORP_ID,2),",
				"          CLS_ID = right('00'+ CLS_ID,2),",
				"          SCLS_ID = right('00'+ SCLS_ID,2)) ~> xoLMHDSTrandform",
				"xoUMHDSTransform, UiacxUnivIntrApplXrefT lookup(BRD_ID == BrdId",
				"     && DIV_ID == DivId,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LOutletLookup",
				"xoLMHDSTrandform, LiacxLgcyIntrApplXrefT lookup(CORP_ID == CorpId",
				"     && SCLS_ID == CoId",
				"     && DIV_ID == DivId,",
				"     multiple: true,",
				"     broadcast: 'auto')~> xoLMHDSLookup",
				"LOutletLookup derive(isMatch = isMatch()) ~> CheckLOutletLookupMatch",
				"CheckLOutletLookupMatch split(isMatch==true(),",
				"     disjoint: false) ~> split1@(LOutletLookupMatch, LOutletLookupNotMatch)",
				"rejUHILVLoad, loUHILVLoad union(byName: true)~> FOutlet",
				"xoLMHDSLookup derive(isMatch = isMatch()) ~> CheckxoLMHDSLookup",
				"CheckxoLMHDSLookup split(isMatch==true(),",
				"     disjoint: true) ~> split2@(xoLMHDSLookupMatch, xoLMHDSLookupNotMatch)",
				"loLMHDSLoad, rejLMHDSLoad union(byName: true)~> FOutletLegacyFunnel",
				"FFBCRItemExtract select(mapColumn(",
				"          BRD_ID = OPR_BRD_ID,",
				"          MKT_ID = OPR_MKT_ID,",
				"          CHNL_ID = OPR_CHNL_ID,",
				"          BRD_DESC = BCR_BRD_NM,",
				"          MKT_DESC = BCR_MKT_NM,",
				"          CORP_ID = OPR_MDSE_CORP_ID,",
				"          CO_ID = OPR_MDSE_CO_ID,",
				"          CORP_DESC = MDSE_CORP_DESC,",
				"          CO_DESC = MDSE_CO_DESC,",
				"          DIV_ID = OPR_MDSE_DIV_ID,",
				"          DIV_DESC = MDSE_DIV_DESC,",
				"          DEPT_ID = OPR_MDSE_DEPT_ID,",
				"          DEPT_DESC = MDSE_DEPT_DESC,",
				"          CLS_ID = OPR_MDSE_CLASS_ID,",
				"          CLS_DESC = MDSE_CLS_DESC,",
				"          SCLS_ID = OPR_MDSE_SCLS_ID,",
				"          SCLS_DESC = MDSE_SCLS_DESC,",
				"          ITM_STY_NBR = OPR_STY_CD,",
				"          ITM_STY_DESC = MDSE_STY_DESC,",
				"          MKT_DIFF1_ID = CLR_ID,",
				"          ITM_STY_CC_NBR = OPR_STY_CLR_NBR,",
				"          ITM_STY_CLR_DESC = PRD_UNQ_DESC,",
				"          PRGM_NBR = OPR_MDSE_PGM_ID,",
				"          PRGM_DESC = MDSE_PGM_DESC,",
				"          ITM_SKU_NBR = OPR_BRD_SKU_ID,",
				"          ITM_SKU_DESC = BRD_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC = BRD_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD = SZ_MDL_CD,",
				"          SZ_DESC,",
				"          SEASON_CD = SEAS_CD,",
				"          SEASON_YR = SEAS_YR_NBR,",
				"          SEASON_DESC = SEAS_YR_DESC,",
				"          MKT_DIFF2_ID = OPR_SZ_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FFBCRItemExtractSelect",
				"LLegacyIndMatchSplit@LLegacyIndNotMatch select(mapColumn(",
				"          BRD_ID = LLegacyIndMatchSplit@LLegacyIndNotMatch@BRD_ID,",
				"          MKT_ID = LLegacyIndMatchSplit@LLegacyIndNotMatch@MKT_ID,",
				"          CHNL_ID = LLegacyIndMatchSplit@LLegacyIndNotMatch@CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejBMCPC",
				"xoLMHDSSplit@xoUMHDS1 select(mapColumn(",
				"          BRD_ID = xoLMHDSSplit@xoUMHDS1@BRD_ID,",
				"          MKT_ID = xoLMHDSSplit@xoUMHDS1@MKT_ID,",
				"          CHNL_ID = xoLMHDSSplit@xoUMHDS1@CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID,",
				"          LGCY_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoUMHDSSelect",
				"xoLMHDSSplit@xoLMHDS select(mapColumn(",
				"          BRD_ID = xoLMHDSSplit@xoLMHDS@BRD_ID,",
				"          MKT_ID = xoLMHDSSplit@xoLMHDS@MKT_ID,",
				"          CHNL_ID = xoLMHDSSplit@xoLMHDS@CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID,",
				"          LGCY_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoLMHDSSelect",
				"split1@LOutletLookupNotMatch select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID,",
				"          LGCY_IND,",
				"          BrdId1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejUHILVLoad",
				"split1@LOutletLookupMatch select(mapColumn(",
				"          BRD_ID = APPL_BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID = APPL_DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID,",
				"          LGCY_IND,",
				"          BrdId1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUHILVLoad",
				"split2@xoLMHDSLookupNotMatch select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID,",
				"          CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID,",
				"          LGCY_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejLMHDSLoad",
				"split2@xoLMHDSLookupMatch select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          MKT_DESC,",
				"          CORP_ID = MDSE_CORP_ID,",
				"          CO_ID = MDSE_CO_ID,",
				"          CORP_DESC,",
				"          CO_DESC,",
				"          DIV_ID = MDSE_DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          ITM_STY_DESC,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_DESC,",
				"          PRGM_NBR,",
				"          PRGM_DESC,",
				"          ITM_SKU_NBR,",
				"          ITM_SKU_DESC,",
				"          ITM_SKU_ABBR_DESC,",
				"          SZ_CD,",
				"          SZ_M_CD,",
				"          SZ_DESC,",
				"          SEASON_CD,",
				"          SEASON_YR,",
				"          SEASON_DESC,",
				"          MKT_DIFF2_ID,",
				"          LGCY_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loLMHDSLoad",
				"rejBMCPC sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('srcIPT011BCRItemsLegacyInd_PX.FF_BMCPC_Rej_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRejBMCPC",
				"FOutlet sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIF2_ID as string,",
				"          MKT_DIFF1_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string,",
				"          BrdId1 as string",
				"     ),",
				"     partitionFileNames:[(concat('srcIPT011BCRItemsLegacyInd_PX.DS_UMHDS.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSUMHDS",
				"FOutletLegacyFunnel sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          BRD_DESC as string,",
				"          MKT_DESC as string,",
				"          CORP_ID as string,",
				"          CO_ID as string,",
				"          CORP_DESC as string,",
				"          CO_DESC as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          DEPT_ID as string,",
				"          DEPT_DESC as string,",
				"          CLS_ID as string,",
				"          CLS_DESC as string,",
				"          SCLS_ID as string,",
				"          SCLS_DESC as string,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_DESC as string,",
				"          ITM_STY_CLR_DESC as string,",
				"          ITM_STY_CC_NBR as string,",
				"          PRGM_NBR as string,",
				"          PRGM_DESC as string,",
				"          SZ_CD as string,",
				"          SZ_M_CD as string,",
				"          SZ_DESC as string,",
				"          SEASON_CD as string,",
				"          SEASON_YR as string,",
				"          SEASON_DESC as string,",
				"          MKT_DIFF1_ID as string,",
				"          MKT_DIF2_ID as string,",
				"          ITM_SKU_NBR as string,",
				"          ITM_SKU_DESC as string,",
				"          ITM_SKU_ABBR_DESC as string,",
				"          LGCY_IND as string",
				"     ),",
				"     partitionFileNames:[(concat('srcIPT011BCRItemsLegacyInd_PX.DS_LMHDS.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSLMHDS"
			]
		}
	}
}