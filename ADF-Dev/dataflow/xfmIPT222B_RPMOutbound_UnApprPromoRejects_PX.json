{
	"name": "xfmIPT222B_RPMOutbound_UnApprPromoRejects_PX",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221F_CombineRPMLoadFiles_DS_ComplexPromoUpdate_combine",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromoUpdate"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_UHILV_OPORI_222B",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOUHILVOPORI"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_TSPCT_222B",
						"type": "DatasetReference"
					},
					"name": "RPMTSPCT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT222_UnApproved_Promotions_Errored_In_RPM_ASIA",
						"type": "DatasetReference"
					},
					"name": "SeqBRDUNAPPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT22_UnApprovedPromo_Complete_RPMStaging_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSPromoUpdateComplete"
				}
			],
			"transformations": [
				{
					"name": "RDPromoID"
				},
				{
					"name": "LBrdMktChnl"
				},
				{
					"name": "fiBrdMktChnl"
				},
				{
					"name": "LPromoID"
				},
				{
					"name": "loBrdMktChnl"
				},
				{
					"name": "loPromoErrors"
				},
				{
					"name": "XUnappr"
				},
				{
					"name": "outUnappr"
				},
				{
					"name": "RemoveDuplicatesItem"
				},
				{
					"name": "liItem"
				},
				{
					"name": "loPromoUpdateComplete"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8'),",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSComplexPromoUpdate",
				"source(output(",
				"          PROMO_ID as integer,",
				"          PMOTN_GRP_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOUHILVOPORI",
				"source(output(",
				"          PMOTN_CMPLX_THLD_ID_S as integer,",
				"          PROMO_ID as integer,",
				"          PROMO_NAME as string,",
				"          MERCH_TYPE as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          START_DATE as date,",
				"          END_DATE as date,",
				"          CURRENCY_CODE as string,",
				"          THRESHOLD_QUANTITY as integer,",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as integer,",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as integer,",
				"          CHANGE_UOM as string,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMTSPCT",
				"DSComplexPromoUpdate aggregate(groupBy(PMOTN_REQ_ID_S),",
				"     each(match(!in(['PMOTN_REQ_ID_S'],name)), $$ = first($$))) ~> RDPromoID",
				"RDPromoID, IPTTPROOUHILVOPORI lookup(PMOTN_REQ_ID_S == PMOTN_GRP_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdMktChnl",
				"loBrdMktChnl filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> fiBrdMktChnl",
				"fiBrdMktChnl, RPMTSPCT lookup(PMOTN_GRP_ID_S == PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromoID",
				"LBrdMktChnl select(mapColumn(",
				"          BRD_ID,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          PROMO_REQ_ID_S = PROMO_ID,",
				"          PMOTN_GRP_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          CRT_UPDT_USER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loBrdMktChnl",
				"LPromoID select(mapColumn(",
				"          BRD_ID,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          PMOTN_CMPLX_THLD_ID_S,",
				"          PROMO_ID = PROMO_REQ_ID_S,",
				"          PMOTN_GRP_ID_S,",
				"          PROMO_NAME,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          DIFF_ID,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          CURRENCY_CODE,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_PERCENT,",
				"          CHANGE_UOM,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          CRT_UPDT_USER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoErrors",
				"loPromoErrors derive(MERCH_TYPE = iif(MERCH_TYPE==4, \"STYLECOLOR\", iif(MERCH_TYPE==0, \"STYLE\", iif(MERCH_TYPE==2, \"CLASS\", iif(MERCH_TYPE==6, \"DIV\", \"OTHER\")))),",
				"          DIVISION = iif(isNull(DIVISION), toInteger(null()), DIVISION),",
				"          GROUP_NO = iif(isNull(GROUP_NO), toInteger(null()), GROUP_NO),",
				"          DEPT = iif(isNull(DEPT), toInteger(null()), DEPT),",
				"          CLASS = iif(isNull(CLASS), toInteger(null()), CLASS),",
				"          SUBCLASS = iif(isNull(SUBCLASS), toInteger(null()), SUBCLASS),",
				"          DIFF_ID = iif(isNull(DIFF_ID), toString(null()), DIFF_ID),",
				"          ITEM = iif(isNull(ITEM), toString(null()), ITEM),",
				"          START_DATE = iif(isNull(START_DATE), toDate(null()), (START_DATE)),",
				"          END_DATE = iif(isNull(END_DATE), toDate(null()), (END_DATE)),",
				"          THRESHOLD_QUANTITY = iif(isNull(THRESHOLD_QUANTITY), toInteger(null()), toInteger(THRESHOLD_QUANTITY)),",
				"          LOCATION = iif(isNull(LOCATION), toInteger(null()), LOCATION),",
				"          CRT_UPDT_USER_ID = iif(isNull(CRT_UPDT_USER_ID), toString(null()), CRT_UPDT_USER_ID),",
				"          MESSAGE_KEY = '',",
				"          ACTION_TO_BE_TAKEN = iif(STATUS=='F', 'PLEASE REACH TO RPM TEAM FOR MORE DETAILS ON FAILURE', 'PLEASE REFER THE ERROR DESCRIPTION')) ~> XUnappr",
				"XUnappr select(mapColumn(",
				"          BRD_ID,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          IPT_PROMO_ID = PROMO_ID,",
				"          RPM_PROMO_ID = PMOTN_GRP_ID_S,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          START_DATE,",
				"          END_DATE,",
				"          THRESHOLD_QUANTITY,",
				"          PROMO_NAME,",
				"          LOCATION,",
				"          CURRENCY_CODE,",
				"          CRT_UPDT_USER_ID,",
				"          MESSAGE_KEY,",
				"          ERR_MSG_TXT,",
				"          ACTION_TO_BE_TAKEN",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outUnappr",
				"outUnappr aggregate(groupBy(ITEM,",
				"          DIFF_ID,",
				"          RPM_PROMO_ID,",
				"          LOCATION),",
				"     each(match(!in(['ITEM','DIFF_ID','RPM_PROMO_ID','LOCATION'],name)), $$ = first($$))) ~> RemoveDuplicatesItem",
				"RemoveDuplicatesItem select(mapColumn(",
				"          IPT_PROMO_ID,",
				"          RPM_PROMO_ID,",
				"          MERCH_TYPE,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          ITEM,",
				"          DIFF_ID,",
				"          START_DATE,",
				"          END_DATE,",
				"          THRESHOLD_QUANTITY,",
				"          PROMO_NAME,",
				"          LOCATION,",
				"          CURRENCY_CODE,",
				"          CRT_UPDT_USER_ID,",
				"          MESSAGE_KEY,",
				"          ERROR_DESCRIPTION = ERR_MSG_TXT,",
				"          ACTION_TO_BE_TAKEN",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> liItem",
				"LPromoID select(mapColumn(",
				"          BRD_ID,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          PROMO_REQ_ID_S,",
				"          PMOTN_GRP_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          CRT_UPDT_USER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoUpdateComplete",
				"liItem sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT222_UnApproved_Promotions_Errored_In_RPM.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeqBRDUNAPPromo",
				"loPromoUpdateComplete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT22_UnApprovedPromo_Complete_RPMStaging_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSPromoUpdateComplete"
			]
		}
	}
}