{
	"name": "srcIPT221C_RPMOutbound_ApprMDRejects_PX_copy1",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_FF_RMSStyDiff1Rejects",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1Rejects"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_MKDRQ_221C",
						"type": "DatasetReference"
					},
					"name": "IPTMKDRQ"
				},
				{
					"dataset": {
						"referenceName": "AB_UHILV_UNIV_HIER_LVL_T_221C",
						"type": "DatasetReference"
					},
					"name": "IPTUHILV"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Diffs",
						"type": "DatasetReference"
					},
					"name": "DSDiff"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Brd",
						"type": "DatasetReference"
					},
					"name": "DSBRD"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Currency",
						"type": "DatasetReference"
					},
					"name": "DSCurrency"
				},
				{
					"dataset": {
						"referenceName": "AB_srcIPT123RPMClearanceExtract_PX_FF_BrdIdRejects",
						"type": "DatasetReference"
					},
					"name": "FFBrdIdRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_FF_ZoneRejects",
						"type": "DatasetReference"
					},
					"name": "FFZoneRejects"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects_FF_ApprovedMDDummy1_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFApprovedMDDummy1"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects_FF_ApprovedMDDummy2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFApprovedMDDummy2"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects1_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1Rej1"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1Rej2"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects_FF_ApprovedMDDummy3_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFApprovedMDDummy3"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_MDRejects3_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1Rej3"
				}
			],
			"transformations": [
				{
					"name": "LApprovedMD1"
				},
				{
					"name": "loMDDummy1"
				},
				{
					"name": "rejApprovedMD1"
				},
				{
					"name": "LDeptID1"
				},
				{
					"name": "DSZone"
				},
				{
					"name": "LDeptID"
				},
				{
					"name": "xAddDesc"
				},
				{
					"name": "LClsID1"
				},
				{
					"name": "LClsID2"
				},
				{
					"name": "xoclsid"
				},
				{
					"name": "RMItem"
				},
				{
					"name": "DSLink221"
				},
				{
					"name": "LCNCY"
				},
				{
					"name": "lcncy11"
				},
				{
					"name": "LApprovedMD2"
				},
				{
					"name": "rejApprovedMD2"
				},
				{
					"name": "loMDDummy2"
				},
				{
					"name": "LBRDBrdId"
				},
				{
					"name": "transition2"
				},
				{
					"name": "xAddDesc1"
				},
				{
					"name": "loBrdId"
				},
				{
					"name": "loDeptID"
				},
				{
					"name": "xoRMSStyDiff1"
				},
				{
					"name": "transition1"
				},
				{
					"name": "XoBrd"
				},
				{
					"name": "LBrdID1"
				},
				{
					"name": "LBrdID2"
				},
				{
					"name": "xoBrdid"
				},
				{
					"name": "RMItem1"
				},
				{
					"name": "rmBrd",
					"description": "使用列“ITM_STY_NBR,DIFF_1_ID, BRD_ID, BRD_DESC, MKT_ID, CHNL_ID, DIV_ID, DIV_DESC, DEPT_ID, DEPT_DESC, CLS_ID, CLS_DESC, SCLS_ID, SCLS_DESC, CLEARANCE_ID, PRC_GRP_ZN_SEQ_NBR_S, STRT_DT, MD_PRC_AMT, DESCRIPTION”将 RMItem1 重命名为 rmBrd"
				},
				{
					"name": "LCNCY1"
				},
				{
					"name": "lcncy22"
				},
				{
					"name": "LApprovedMD3"
				},
				{
					"name": "rejApprovedMD3"
				},
				{
					"name": "loMDDummy3"
				},
				{
					"name": "LZoneZid"
				},
				{
					"name": "transition3"
				},
				{
					"name": "loZoneid"
				},
				{
					"name": "xAddDesc2"
				},
				{
					"name": "xozone"
				},
				{
					"name": "LZONEID"
				},
				{
					"name": "xozoneid"
				},
				{
					"name": "RMItem2"
				},
				{
					"name": "lpRmItem"
				},
				{
					"name": "LCNCY2"
				},
				{
					"name": "lcncy33"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA'),",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8')",
				"}",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(15,2),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(5,3),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          BRD_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRMSStyDiff1Rejects",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTMKDRQ",
				"source(output(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUHILV",
				"source(output(",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_NBR as string,",
				"          DIFF_1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDiff",
				"source(output(",
				"          BRD_ID as integer,",
				"          BRD_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSBRD",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSCurrency",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(15,2),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(5,3),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFBrdIdRejects",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(10,0),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(10,0),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          BRD_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFZoneRejects",
				"FFRMSStyDiff1Rejects, IPTMKDRQ lookup(FFRMSStyDiff1Rejects@MD_REQ_SEQ_NBR_S == IPTMKDRQ@MD_REQ_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LApprovedMD1",
				"LApprovedMD1 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S = FFRMSStyDiff1Rejects@MD_REQ_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMDDummy1",
				"LApprovedMD1 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S = FFRMSStyDiff1Rejects@MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejApprovedMD1",
				"rejApprovedMD1, LDeptID lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDeptID1",
				"IPTUHILV select(mapColumn(",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DSZone",
				"IPTUHILV select(mapColumn(",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LDeptID",
				"loDeptID derive(DESCRIPTION = 'Approved/Unapproved MD Record Rejected in Items lookup in job srcIPT123RPMClearanceExtract_PX- CC is not present under the BMC in  Items data',",
				"          BRD_ID = iif(isNull(BRD_ID), toInteger(null()), BRD_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID), toInteger(null()), DEPT_ID),",
				"          CLS_ID = iif(isNull(CLS_ID), toInteger(null()), CLS_ID),",
				"          DIV_ID = iif(isNull(DIV_ID), toInteger(null()), DIV_ID),",
				"          SCLS_ID = iif(isNull(SCLS_ID), toInteger(null()), SCLS_ID)) ~> xAddDesc",
				"xoRMSStyDiff1, DSDiff lookup(xoRMSStyDiff1@ITM_STY_SEQ_NBR_S == DSDiff@ITM_STY_SEQ_NBR_S",
				"     && xoRMSStyDiff1@ITM_STY_CLR_SEQ_NBR_S == DSDiff@ITM_STY_CLR_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClsID1",
				"LClsID1, DSBRD lookup(xoRMSStyDiff1@BRD_ID == DSBRD@BRD_ID",
				"     && xoRMSStyDiff1@DIV_ID == DSBRD@DIV_ID",
				"     && xoRMSStyDiff1@DEPT_ID == DSBRD@DEPT_ID",
				"     && xoRMSStyDiff1@CLS_ID == DSBRD@CLS_ID",
				"     && xoRMSStyDiff1@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClsID2",
				"LClsID2 select(mapColumn(",
				"          DIFF_1_ID,",
				"          ITM_STY_NBR,",
				"          CLEARANCE_ID = MD_REQ_SEQ_NBR_S,",
				"          STRT_DT,",
				"          BRD_ID = xoRMSStyDiff1@BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID = xoRMSStyDiff1@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = xoRMSStyDiff1@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = xoRMSStyDiff1@CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID = xoRMSStyDiff1@SCLS_ID,",
				"          SCLS_DESC,",
				"          DESCRIPTION,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MD_PRC_AMT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoclsid",
				"xoclsid aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CLEARANCE_ID),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PRC_GRP_ZN_SEQ_NBR_S','CLEARANCE_ID'],name)), $$ = first($$))) ~> RMItem",
				"RMItem select(mapColumn(",
				"          DIFF_1_ID,",
				"          ITM_STY_NBR,",
				"          CLEARANCE_ID,",
				"          STRT_DT,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          DESCRIPTION,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MD_PRC_AMT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DSLink221",
				"DSLink221, DSCurrency lookup(DSLink221@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCNCY",
				"LCNCY select(mapColumn(",
				"          DIFF_1_ID,",
				"          ITM_STY_NBR,",
				"          CLEARANCE_ID,",
				"          STRT_DT,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          DESCRIPTION,",
				"          PRC_GRP_ZN_SEQ_NBR_S = DSLink221@PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          MD_PRC_AMT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lcncy11",
				"FFBrdIdRejects, IPTMKDRQ lookup(FFBrdIdRejects@MD_REQ_SEQ_NBR_S == IPTMKDRQ@MD_REQ_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LApprovedMD2",
				"LApprovedMD2 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S = FFBrdIdRejects@MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejApprovedMD2",
				"LApprovedMD2 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S = FFBrdIdRejects@MD_REQ_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMDDummy2",
				"rejApprovedMD2, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDBrdId",
				"LBRDBrdId select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> transition2",
				"loBrdId derive(DESCRIPTION = 'Approved/Unapproved MD Record rejected in UHILV lookup in job srcIPT123RPMClearanceExtract_PX',",
				"          BRD_ID = iif(isNull(BRD_ID), toInteger(null()), BRD_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID), toInteger(null()), DEPT_ID),",
				"          CLS_ID = iif(isNull(CLS_ID), toInteger(null()), CLS_ID),",
				"          SCLS_ID = iif(isNull(SCLS_ID), toInteger(null()), SCLS_ID)) ~> xAddDesc1",
				"transition2 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> loBrdId",
				"transition1 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> loDeptID",
				"xAddDesc select(mapColumn(",
				"          BRD_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          SCLS_ID,",
				"          STRT_DT,",
				"          MD_REQ_SEQ_NBR_S,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          DESCRIPTION,",
				"          MD_PRC_AMT,",
				"          MDSE_LVL_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoRMSStyDiff1",
				"LDeptID1 select(mapColumn(",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID = LDeptID@BRD_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          SCLS_ID,",
				"          STRT_DT,",
				"          MD_REQ_SEQ_NBR_S,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MD_PRC_AMT,",
				"          MDSE_LVL_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> transition1",
				"xAddDesc1 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          CLEARANCE_ID = MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DESCRIPTION,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XoBrd",
				"XoBrd, DSBRD lookup(XoBrd@BRD_ID == DSBRD@BRD_ID",
				"     && XoBrd@DIV_ID == DSBRD@DIV_ID",
				"     && XoBrd@DEPT_ID == DSBRD@DEPT_ID",
				"     && XoBrd@CLS_ID == DSBRD@CLS_ID",
				"     && XoBrd@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdID1",
				"LBrdID1, DSDiff lookup(PRC_GRP_ZN_SEQ_NBR_S == DSDiff@ITM_STY_SEQ_NBR_S",
				"     && XoBrd@ITM_STY_CLR_SEQ_NBR_S == DSDiff@ITM_STY_CLR_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdID2",
				"LBrdID2 select(mapColumn(",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          BRD_ID = XoBrd@BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID = XoBrd@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = XoBrd@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = XoBrd@CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID = XoBrd@SCLS_ID,",
				"          SCLS_DESC,",
				"          CLEARANCE_ID,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoBrdid",
				"xoBrdid aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CLEARANCE_ID),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PRC_GRP_ZN_SEQ_NBR_S','CLEARANCE_ID'],name)), $$ = first($$))) ~> RMItem1",
				"RMItem1 select(mapColumn(",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          CLEARANCE_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rmBrd",
				"rmBrd, DSCurrency lookup(rmBrd@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCNCY1",
				"LCNCY1 select(mapColumn(",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          CLEARANCE_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S = rmBrd@PRC_GRP_ZN_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lcncy22",
				"FFZoneRejects, IPTMKDRQ lookup(FFZoneRejects@MD_REQ_SEQ_NBR_S == IPTMKDRQ@MD_REQ_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LApprovedMD3",
				"LApprovedMD3 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S = FFZoneRejects@MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejApprovedMD3",
				"LApprovedMD3 select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S = FFZoneRejects@MD_REQ_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMDDummy3",
				"rejApprovedMD3, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LZoneZid",
				"LZoneZid select(mapColumn(",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          BRD_ID = rejApprovedMD3@BRD_ID,",
				"          ITM_STY_SEQ_NBR_S = IPTUHILV@ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S = IPTUHILV@ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> transition3",
				"transition3 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> loZoneid",
				"loZoneid derive(DESCRIPTION = 'Approved MD Record Rejected while exploding Zone to Store in job xfmIPT125RPMClearanceTrnfrm_PX',",
				"          BRD_ID = iif(isNull(BRD_ID), toInteger(null()), BRD_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID), toInteger(null()), DEPT_ID),",
				"          CLS_ID = iif(isNull(CLS_ID), toInteger(null()), CLS_ID),",
				"          SCLS_ID = iif(isNull(SCLS_ID), toInteger(null()), SCLS_ID)) ~> xAddDesc2",
				"xAddDesc2 select(mapColumn(",
				"          CLEARANCE_ID = MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xozone",
				"xozone, DSBRD lookup(xozone@BRD_ID == DSBRD@BRD_ID",
				"     && xozone@DIV_ID == DSBRD@DIV_ID",
				"     && xozone@DEPT_ID == DSBRD@DEPT_ID",
				"     && xozone@CLS_ID == DSBRD@CLS_ID",
				"     && xozone@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LZONEID",
				"LZONEID select(mapColumn(",
				"          CLEARANCE_ID,",
				"          BRD_ID = xozone@BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID = xozone@DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID = xozone@DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID = xozone@CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID = xozone@SCLS_ID,",
				"          SCLS_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xozoneid",
				"xozoneid aggregate(groupBy(ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CLEARANCE_ID),",
				"     each(match(!in(['ITM_STY_NBR','MKT_DIFF1_ID','PRC_GRP_ZN_SEQ_NBR_S','CLEARANCE_ID'],name)), $$ = first($$))) ~> RMItem2",
				"RMItem2 select(mapColumn(",
				"          CLEARANCE_ID,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lpRmItem",
				"lpRmItem, DSCurrency lookup(lpRmItem@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCNCY2",
				"LCNCY2 select(mapColumn(",
				"          CLEARANCE_ID,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S = lpRmItem@PRC_GRP_ZN_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lcncy33",
				"loMDDummy1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects_FF_ApprovedMDDummy1_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFApprovedMDDummy1",
				"loMDDummy2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects_FF_ApprovedMDDummy2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFApprovedMDDummy2",
				"lcncy11 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects1_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRMSStyDiff1Rej1",
				"lcncy22 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRMSStyDiff1Rej2",
				"loMDDummy3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFApprovedMDDummy3",
				"lcncy33 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_MDRejects3_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRMSStyDiff1Rej3"
			]
		}
	}
}