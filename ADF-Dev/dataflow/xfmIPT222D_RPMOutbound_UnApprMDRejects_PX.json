{
	"name": "xfmIPT222D_RPMOutbound_UnApprMDRejects_PX",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221F_CombineRPMLoadFiles_DS_MDReqRPMLoad_combine",
						"type": "DatasetReference"
					},
					"name": "DSMDReqRPMLoad"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_UHILV_222D",
						"type": "DatasetReference"
					},
					"name": "IPTUHILV"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_STAGE_CLEARANCE_222D",
						"type": "DatasetReference"
					},
					"name": "RPMSTAGECLEARANCE"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_CON_CHECK_ERR_222D",
						"type": "DatasetReference"
					},
					"name": "RPMCONCHECKERR"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_LOC_222D",
						"type": "DatasetReference"
					},
					"name": "IPTLOC"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT22_Un_ApprovedMD_Success_RPMStaging_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSUnApprMDComplete"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT222_UnApproved_Markdown_Errored_In_RPM_ASIA",
						"type": "DatasetReference"
					},
					"name": "UnAppPromoErrItems"
				}
			],
			"transformations": [
				{
					"name": "LBrdId"
				},
				{
					"name": "loBrdId"
				},
				{
					"name": "inUnApprMDDt"
				},
				{
					"name": "LStyDiffLocDt"
				},
				{
					"name": "loMDUpdateErrors"
				},
				{
					"name": "loMDUpdateComplete"
				},
				{
					"name": "LErrorCheck"
				},
				{
					"name": "outMDErr2"
				},
				{
					"name": "outStatusW2"
				},
				{
					"name": "outStatusW1"
				},
				{
					"name": "outMDErr1"
				},
				{
					"name": "filterEorF"
				},
				{
					"name": "filterW"
				},
				{
					"name": "loErrorMsg"
				},
				{
					"name": "XReasonForError"
				},
				{
					"name": "FErrorCombine"
				},
				{
					"name": "LCrncy"
				},
				{
					"name": "locrncy"
				},
				{
					"name": "RMDUPITEMS"
				},
				{
					"name": "lrmItems"
				},
				{
					"name": "XDtConv"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8'),",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(15,2),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(15,2),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSMDReqRPMLoad",
				"source(output(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUHILV",
				"source(output(",
				"          RPM_STAGE_CLEARANCE_ID as integer,",
				"          REASON_CODE as integer,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          ZONE_NODE_TYPE as integer,",
				"          EFFECTIVE_DATE as date,",
				"          OUT_OF_STOCK_DATE as date,",
				"          RESET_DATE as date,",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as decimal(15,2),",
				"          CHANGE_PERCENT as integer,",
				"          PRICE_GUIDE_ID as integer,",
				"          AUTO_APPROVE_IND as integer,",
				"          STATUS as string,",
				"          ERROR_MESSAGE as string,",
				"          PROCESS_ID as integer,",
				"          CLEARANCE_ID as integer,",
				"          CLEARANCE_DISPLAY_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMSTAGECLEARANCE",
				"source(output(",
				"          REF_ID as integer,",
				"          MESSAGE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMCONCHECKERR",
				"source(output(",
				"          LOC_NBR as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTLOC",
				"DSMDReqRPMLoad, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdId",
				"LBrdId select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loBrdId",
				"XDtConv filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> inUnApprMDDt",
				"inUnApprMDDt, RPMSTAGECLEARANCE lookup(ITM_STY_NBR == ITEM",
				"     && MKT_DIFF1_ID == DIFF_ID",
				"     && STR_NBR == LOCATION",
				"     && STRT_DT == EFFECTIVE_DATE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyDiffLocDt",
				"LStyDiffLocDt select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          RPM_STAGE_CLEARANCE_ID,",
				"          REASON_CODE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          ZONE_NODE_TYPE,",
				"          EFFECTIVE_DATE,",
				"          OUT_OF_STOCK_DATE,",
				"          RESET_DATE,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_PERCENT,",
				"          PRICE_GUIDE_ID,",
				"          AUTO_APPROVE_IND,",
				"          STATUS,",
				"          ERROR_MESSAGE,",
				"          PROCESS_ID,",
				"          CLEARANCE_ID,",
				"          CLEARANCE_DISPLAY_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMDUpdateErrors",
				"LStyDiffLocDt select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          MD_REQ_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          STRT_DT,",
				"          MD_PRC_AMT,",
				"          RCMD_MD_PCT_OFF_RAT,",
				"          PROC_STAT_CD,",
				"          MDSE_LVL_CD,",
				"          MD_CNT,",
				"          PNT_DT,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          STR_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loMDUpdateComplete",
				"outStatusW2, RPMCONCHECKERR lookup(CLEARANCE_ID == REF_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LErrorCheck",
				"outMDErr1 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          CLEARANCE_ID,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          LOCATION,",
				"          MESSAGE_KEY,",
				"          ERROR_DESCRIPTION = ERROR_MESSAGE,",
				"          ACTION_TO_BE_TAKEN",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outMDErr2",
				"outStatusW1 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          CLEARANCE_ID,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          LOCATION,",
				"          DESCRIPTION = ERROR_MESSAGE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outStatusW2",
				"filterW derive(CLEARANCE_ID = iif(isNull(CLEARANCE_ID), toInteger(null()), CLEARANCE_ID),",
				"          ITEM = iif(isNull(ITEM), toString(null()), ITEM),",
				"          DIFF_ID = iif(isNull(DIFF_ID), toString(null()), DIFF_ID),",
				"          CHANGE_AMOUNT = iif(isNull(CHANGE_AMOUNT), toDecimal(null()), CHANGE_AMOUNT),",
				"          LOCATION = iif(isNull(LOCATION), toInteger(null()), LOCATION)) ~> outStatusW1",
				"filterEorF derive(MESSAGE_KEY = '',",
				"          ACTION_TO_BE_TAKEN = iif(STATUS=='E', 'PLEASE REFER THE ERROR DESCRIPTION', 'PLEASE REACH TO RPM TEAM FOR MORE DETAILS ON FAILURE')) ~> outMDErr1",
				"loMDUpdateErrors filter(STATUS =='E' || STATUS =='F') ~> filterEorF",
				"loMDUpdateErrors filter(STATUS =='W') ~> filterW",
				"LErrorCheck select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          CLEARANCE_ID,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          LOCATION,",
				"          MESSAGE_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loErrorMsg",
				"loErrorMsg derive(ERROR_DESCRIPTION = iif(MESSAGE_KEY=='event_causes_clearance_retail_less_than_regular', 'This conflict was caused by either penny retail or missing style/Diff_id in RPM. Although the retail of the item is valid in RMS',\r",
				"iif(MESSAGE_KEY=='event_causes_clearance_retail_less_than_prior_clearance', 'This conflict was caused by an existing active Markdown. The new Markdown is higher or same as the old active markdown', \r",
				"iif(MESSAGE_KEY=='future_retail_price_change_rule5', 'Item already on same clearance price', \r",
				"iif(MESSAGE_KEY=='future_retail_price_change_rule1', 'Item already on same clearance price', \r",
				"iif(MESSAGE_KEY=='future_retail_price_change_rule24', 'Item already on same clearance price', MESSAGE_KEY))))),",
				"          ACTION_TO_BE_TAKEN = iif(MESSAGE_KEY=='event_causes_clearance_retail_less_than_regular', 'Perform a price change on the impacted item with effective date as system date + 1 day. Then on the next day create desired clearance with effective date as system date + 1 day',\r",
				"iif(MESSAGE_KEY=='event_causes_clearance_retail_less_than_prior_clearance', 'Please reset the old Markdown through the Clearance Maintenance Screen or Create a new Markdown that has a lower Markdown retail than the old active Markdown', \r",
				"iif(MESSAGE_KEY=='future_retail_price_change_rule5', 'NO ACTION NEEDED', \r",
				"iif(MESSAGE_KEY=='future_retail_price_change_rule1', 'NO ACTION NEEDED', \r",
				"iif(MESSAGE_KEY=='future_retail_price_change_rule24', 'NO ACTION NEEDED', MESSAGE_KEY)))))) ~> XReasonForError",
				"XReasonForError, outMDErr2 union(byName: true)~> FErrorCombine",
				"FErrorCombine, IPTLOC lookup(LOCATION == LOC_NBR,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LCrncy",
				"LCrncy select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          CLEARANCE_ID,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          LOCATION,",
				"          CNCY_CD,",
				"          MESSAGE_KEY,",
				"          ERROR_DESCRIPTION,",
				"          ACTION_TO_BE_TAKEN",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> locrncy",
				"locrncy aggregate(groupBy(ITEM,",
				"          DIFF_ID,",
				"          LOCATION,",
				"          EFFECTIVE_DATE),",
				"     each(match(!in(['ITEM','DIFF_ID','LOCATION','EFFECTIVE_DATE'],name)), $$ = first($$))) ~> RMDUPITEMS",
				"RMDUPITEMS select(mapColumn(",
				"          CHNL_ID,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          ITEM,",
				"          DIFF_ID,",
				"          CHANGE_AMOUNT,",
				"          EFFECTIVE_DATE,",
				"          LOCATION,",
				"          CNCY_CD,",
				"          MESSAGE_KEY,",
				"          ERROR_DESCRIPTION,",
				"          ACTION_TO_BE_TAKEN",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lrmItems",
				"loBrdId derive(STRT_DT = toDate(STRT_DT)) ~> XDtConv",
				"loMDUpdateComplete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          DIV_ID as string,",
				"          DIV_DESC as string,",
				"          MD_REQ_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          STRT_DT as string,",
				"          MD_PRC_AMT as string,",
				"          RCMD_MD_PCT_OFF_RAT as string,",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MD_CNT as string,",
				"          PNT_DT as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT22_Un-ApprovedMD_Success_RPMStaging_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSUnApprMDComplete",
				"lrmItems sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT222_UnApproved_Markdown_Errored_In_RPM.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> UnAppPromoErrItems"
			]
		}
	}
}