{
	"name": "srcIPT221B_RPMOutbound_UnApprPromoRejects_PX_copy1",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_srcIPT122RPMUnApprPromoExtract1_PX_FF_Rej_Pmo_Grp_Id",
						"type": "DatasetReference"
					},
					"name": "FFRejPmoGrpId"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_2217",
						"type": "DatasetReference"
					},
					"name": "IPTTPROO2217"
				},
				{
					"dataset": {
						"referenceName": "AB_TPROO_UHILV_TPRGP_221_78",
						"type": "DatasetReference"
					},
					"name": "TPROOUHILVTPRGP"
				},
				{
					"dataset": {
						"referenceName": "AB_TPROO_UHILV_TNETP_221_78",
						"type": "DatasetReference"
					},
					"name": "TPROOUHILVTNETP"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT12CRPMComplexUpdate_PX_FF_ComplClearRej",
						"type": "DatasetReference"
					},
					"name": "FFComplClearRej"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_OPORI_221_78",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOOPORI"
				},
				{
					"dataset": {
						"referenceName": "AB_TPROO_UHILV_TPRGP1_2217",
						"type": "DatasetReference"
					},
					"name": "TPROOUHILVTPRGP1"
				},
				{
					"dataset": {
						"referenceName": "AB_TPROO_UHILV_TNETP1_2217",
						"type": "DatasetReference"
					},
					"name": "TPROOUHILVTNETP1"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Brd",
						"type": "DatasetReference"
					},
					"name": "DSBrdID"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Diffs",
						"type": "DatasetReference"
					},
					"name": "DSDiffs"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Users",
						"type": "DatasetReference"
					},
					"name": "DSUser"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_PromoUser",
						"type": "DatasetReference"
					},
					"name": "DSPromoUser"
				},
				{
					"dataset": {
						"referenceName": "AB_ExtIPT221_IPT_RPM_Table_Load_DS_TMRCY",
						"type": "DatasetReference"
					},
					"name": "DSTMRCY"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Currency",
						"type": "DatasetReference"
					},
					"name": "DSCurrency"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_UnApproved_PromoRejects1_FF_UnapprovedDummy1_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFUnapprovedDummy1"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_UnApproved_PromoRejects1_FF_UnapprovedDummy2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFUnapprovedDummy2"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_UnApproved_PromoRejects1_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFBrdMktChnItemsRej"
				}
			],
			"transformations": [
				{
					"name": "LPromo1"
				},
				{
					"name": "loUnapprovedDummy1"
				},
				{
					"name": "select1"
				},
				{
					"name": "LBRDPmoGrp"
				},
				{
					"name": "loPmoGrpId"
				},
				{
					"name": "select2"
				},
				{
					"name": "LTNETP1"
				},
				{
					"name": "loPromoTPRGP"
				},
				{
					"name": "FAddPromo"
				},
				{
					"name": "xAddDesc"
				},
				{
					"name": "foAddPromoID"
				},
				{
					"name": "xoDesc"
				},
				{
					"name": "LPromo2"
				},
				{
					"name": "loUnapprovedDummy2"
				},
				{
					"name": "rejUnapprovedItem2"
				},
				{
					"name": "LBRDCmplxClr"
				},
				{
					"name": "loCmplxClr"
				},
				{
					"name": "rejBRDCmplxClr"
				},
				{
					"name": "LTNETP2"
				},
				{
					"name": "loTNETP"
				},
				{
					"name": "FAddPromo1"
				},
				{
					"name": "foAddPromoID1"
				},
				{
					"name": "xAddDesc1"
				},
				{
					"name": "xoDesc1"
				},
				{
					"name": "fuPmoGrpCmplxClr"
				},
				{
					"name": "xoDesc2"
				},
				{
					"name": "split1"
				},
				{
					"name": "coStyle1"
				},
				{
					"name": "coClassLevel1"
				},
				{
					"name": "coDivlevel1"
				},
				{
					"name": "coDeptlevel1"
				},
				{
					"name": "LDiv1"
				},
				{
					"name": "LStyleDept1"
				},
				{
					"name": "LSubclass1"
				},
				{
					"name": "LClass1"
				},
				{
					"name": "LDept1"
				},
				{
					"name": "LStyleColor1"
				},
				{
					"name": "loDiv1"
				},
				{
					"name": "XDiv1"
				},
				{
					"name": "loDept1"
				},
				{
					"name": "XDept1"
				},
				{
					"name": "loClass1"
				},
				{
					"name": "XClass1"
				},
				{
					"name": "loSubclass1"
				},
				{
					"name": "LStyleDept2"
				},
				{
					"name": "loStyleDept1"
				},
				{
					"name": "LStyleColor2"
				},
				{
					"name": "loStyleColor1"
				},
				{
					"name": "FItems1"
				},
				{
					"name": "LBrdID"
				},
				{
					"name": "XODESC12"
				},
				{
					"name": "LPromoUserID"
				},
				{
					"name": "rejPromoID"
				},
				{
					"name": "xoPromoDetail"
				},
				{
					"name": "FPromoUser"
				},
				{
					"name": "LTRMCY"
				},
				{
					"name": "xoTMRCY"
				},
				{
					"name": "rmItems"
				},
				{
					"name": "xoDiffRej"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select3"
				},
				{
					"name": "loStyleDept2"
				},
				{
					"name": "loStyleColor2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA'),",
				"     pBrandId as integer (1),",
				"     pChnlId1 as integer (1),",
				"     pMarketId as string ('8')",
				"}",
				"source(output(",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as integer,",
				"          PMOTN_REQ_ID1 as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejPmoGrpId",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROO2217",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          PMOTN_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TPROOUHILVTPRGP",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          PMOTN_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TPROOUHILVTNETP",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFComplClearRej",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOOPORI",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          PMOTN_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TPROOUHILVTPRGP1",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          PMOTN_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TPROOUHILVTNETP1",
				"source(output(",
				"          BRD_ID as integer,",
				"          BRD_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSBrdID",
				"source(output(",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_NBR as string,",
				"          DIFF_1_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSDiffs",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSUser",
				"source(output(",
				"          PMOTN_REQ_ID as integer,",
				"          PMOTN_GRP_ID_S as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSPromoUser",
				"source(output(",
				"          MDSE_LVL_CD as string,",
				"          MDSE_LVL_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSTMRCY",
				"source(output(",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSCurrency",
				"FFRejPmoGrpId, IPTTPROO2217 lookup(PMOTN_REQ_ID1 == PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromo1",
				"LPromo1 select(mapColumn(",
				"          PMOTN_REQ_ID1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUnapprovedDummy1",
				"LPromo1 select(mapColumn(",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          PMOTN_REQ_ID1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, TPROOUHILVTPRGP lookup(PMOTN_REQ_ID1 == PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDPmoGrp",
				"LBRDPmoGrp select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPmoGrpId",
				"LBRDPmoGrp select(mapColumn(",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          PMOTN_REQ_ID1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, TPROOUHILVTNETP lookup(PMOTN_REQ_ID1 == PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTNETP1",
				"LTNETP1 select(mapColumn(",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_REQ_ID_S = PMOTN_REQ_ID1,",
				"          BRD_ID,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoTPRGP",
				"loPromoTPRGP, loPmoGrpId union(byName: true)~> FAddPromo",
				"foAddPromoID derive(BRD_ID = iif(isNull(BRD_ID) ,toInteger(null()) , BRD_ID),",
				"          SCLS_ID = iif(isNull(SCLS_ID) ,toInteger(null()) , SCLS_ID),",
				"          CLS_ID = iif(isNull(CLS_ID) ,toInteger(null()) , CLS_ID),",
				"          DIV_ID = iif(isNull(DIV_ID) ,toInteger(null()) , DIV_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID) ,toInteger(null()) , DEPT_ID),",
				"          DESCRIPTION = 'Unapproved Promo Record Rejected during lookup with OPORI table in job srcIPT122RPMUnApprPromoExtract1') ~> xAddDesc",
				"FAddPromo filter((BRD_ID == $pBrandId || BRD_ID == 0) && CHNL_ID == $pChnlId1 && MKT_ID == $pMarketId) ~> foAddPromoID",
				"xAddDesc select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDesc",
				"FFComplClearRej, IPTTPROOOPORI lookup(FFComplClearRej@PMOTN_REQ_ID_S == IPTTPROOOPORI@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromo2",
				"LPromo2 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFComplClearRej@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUnapprovedDummy2",
				"LPromo2 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFComplClearRej@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejUnapprovedItem2",
				"rejUnapprovedItem2, TPROOUHILVTPRGP1 lookup(rejUnapprovedItem2@PMOTN_REQ_ID_S == TPROOUHILVTPRGP1@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDCmplxClr",
				"LBRDCmplxClr select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S = rejUnapprovedItem2@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loCmplxClr",
				"LBRDCmplxClr select(mapColumn(",
				"          PMOTN_REQ_ID_S = rejUnapprovedItem2@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejBRDCmplxClr",
				"rejBRDCmplxClr, TPROOUHILVTNETP1 lookup(rejBRDCmplxClr@PMOTN_REQ_ID_S == TPROOUHILVTNETP1@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTNETP2",
				"LTNETP2 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S = rejBRDCmplxClr@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loTNETP",
				"loTNETP, loCmplxClr union(byName: true)~> FAddPromo1",
				"FAddPromo1 filter((BRD_ID == $pBrandId || BRD_ID == 0) && CHNL_ID == $pChnlId1 && MKT_ID == $pMarketId) ~> foAddPromoID1",
				"foAddPromoID1 derive(DESCRIPTION = 'Unapproved Promo Record Rejected by Oracle while updating RPM Staging in job ldIPT12CRPMComplexUpdate_PX',",
				"          BRD_ID = iif(isNull(BRD_ID) ,toInteger(null()) , BRD_ID),",
				"          SCLS_ID = iif(isNull(SCLS_ID) ,toInteger(null()) , SCLS_ID),",
				"          CLS_ID = iif(isNull(CLS_ID) ,toInteger(null()) , CLS_ID),",
				"          DIV_ID = iif(isNull(DIV_ID) ,toInteger(null()) , DIV_ID),",
				"          DEPT_ID = iif(isNull(DEPT_ID) ,toInteger(null()) , DEPT_ID)) ~> xAddDesc1",
				"xAddDesc1 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDesc1",
				"xoDesc, xoDesc1 union(byName: true)~> fuPmoGrpCmplxClr",
				"fuPmoGrpCmplxClr select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDesc2",
				"xoDesc2 split(MDSE_LVL_CD == '3',",
				"     MDSE_LVL_CD == '4',",
				"     MDSE_LVL_CD == '5',",
				"     MDSE_LVL_CD == '6',",
				"     MDSE_LVL_CD == '8',",
				"     MDSE_LVL_CD == '9',",
				"     disjoint: false) ~> split1@(fioDiv1, fioDept1, fioClass1, fioSubclass1, fioStyleDepte1, fioStyleColor1)",
				"DSDiffs select(mapColumn(",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coStyle1",
				"DSBrdID select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coClassLevel1",
				"DSBrdID select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDivlevel1",
				"DSBrdID select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDeptlevel1",
				"split1@fioDiv1, coDivlevel1 lookup(split1@fioDiv1@BRD_ID == coDivlevel1@BRD_ID",
				"     && split1@fioDiv1@DIV_ID == coDivlevel1@DIV_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDiv1",
				"split1@fioStyleDepte1, coStyle1 lookup(split1@fioStyleDepte1@ITM_STY_SEQ_NBR_S == coStyle1@ITM_STY_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleDept1",
				"split1@fioSubclass1, DSBrdID lookup(split1@fioSubclass1@BRD_ID == DSBrdID@BRD_ID",
				"     && split1@fioSubclass1@DIV_ID == DSBrdID@DIV_ID",
				"     && split1@fioSubclass1@DEPT_ID == DSBrdID@DEPT_ID",
				"     && split1@fioSubclass1@CLS_ID == DSBrdID@CLS_ID",
				"     && split1@fioSubclass1@SCLS_ID == DSBrdID@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LSubclass1",
				"split1@fioClass1, coClassLevel1 lookup(split1@fioClass1@BRD_ID == coClassLevel1@BRD_ID",
				"     && split1@fioClass1@DIV_ID == coClassLevel1@DIV_ID",
				"     && split1@fioClass1@DEPT_ID == coClassLevel1@DEPT_ID",
				"     && split1@fioClass1@CLS_ID == coClassLevel1@CLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClass1",
				"split1@fioDept1, coDeptlevel1 lookup(split1@fioDept1@BRD_ID == coDeptlevel1@BRD_ID",
				"     && split1@fioDept1@DIV_ID == coDeptlevel1@DIV_ID",
				"     && split1@fioDept1@DEPT_ID == coDeptlevel1@DEPT_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDept1",
				"split1@fioStyleColor1, DSBrdID lookup(split1@fioStyleColor1@BRD_ID == DSBrdID@BRD_ID",
				"     && split1@fioStyleColor1@DIV_ID == DSBrdID@DIV_ID",
				"     && split1@fioStyleColor1@DEPT_ID == DSBrdID@DEPT_ID",
				"     && split1@fioStyleColor1@CLS_ID == DSBrdID@CLS_ID",
				"     && split1@fioStyleColor1@SCLS_ID == DSBrdID@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleColor1",
				"LDiv1 select(mapColumn(",
				"          BRD_ID = split1@fioDiv1@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID = split1@fioDiv1@DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDiv1",
				"loDiv1 derive(DEPT_DESC = toString(null()),",
				"          CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDiv1",
				"LDept1 select(mapColumn(",
				"          BRD_ID = split1@fioDept1@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID = split1@fioDept1@DIV_ID,",
				"          DEPT_ID = split1@fioDept1@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDept1",
				"loDept1 derive(CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDept1",
				"LClass1 select(mapColumn(",
				"          BRD_ID = split1@fioClass1@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID = split1@fioClass1@CLS_ID,",
				"          DIV_ID = split1@fioClass1@DIV_ID,",
				"          DEPT_ID = split1@fioClass1@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loClass1",
				"loClass1 derive(SCLS_DESC = toString(null())) ~> XClass1",
				"LSubclass1 select(mapColumn(",
				"          BRD_ID = split1@fioSubclass1@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID = split1@fioSubclass1@SCLS_ID,",
				"          CLS_ID = split1@fioSubclass1@CLS_ID,",
				"          DIV_ID = split1@fioSubclass1@DIV_ID,",
				"          DEPT_ID = split1@fioSubclass1@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loSubclass1",
				"LStyleDept1, DSBrdID lookup(split1@fioStyleDepte1@BRD_ID == DSBrdID@BRD_ID",
				"     && split1@fioStyleDepte1@DIV_ID == DSBrdID@DIV_ID",
				"     && split1@fioStyleDepte1@DEPT_ID == DSBrdID@DEPT_ID",
				"     && split1@fioStyleDepte1@CLS_ID == DSBrdID@CLS_ID",
				"     && split1@fioStyleDepte1@SCLS_ID == DSBrdID@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleDept2",
				"LStyleDept2 select(mapColumn(",
				"          BRD_ID = split1@fioStyleDepte1@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID = split1@fioStyleDepte1@SCLS_ID,",
				"          CLS_ID = split1@fioStyleDepte1@CLS_ID,",
				"          DIV_ID = split1@fioStyleDepte1@DIV_ID,",
				"          DEPT_ID = split1@fioStyleDepte1@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S = ITM_STY_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStyleDept1",
				"LStyleColor1, DSDiffs lookup(split1@fioStyleColor1@ITM_STY_SEQ_NBR_S == DSDiffs@ITM_STY_SEQ_NBR_S",
				"     && split1@fioStyleColor1@ITM_STY_CLR_SEQ_NBR_S == DSDiffs@ITM_STY_CLR_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LStyleColor2",
				"LStyleColor2 select(mapColumn(",
				"          BRD_ID = split1@fioStyleColor1@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID = split1@fioStyleColor1@SCLS_ID,",
				"          CLS_ID = split1@fioStyleColor1@CLS_ID,",
				"          DIV_ID = split1@fioStyleColor1@DIV_ID,",
				"          DEPT_ID = split1@fioStyleColor1@DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S = ITM_STY_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = DIFF_1_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loStyleColor1",
				"XDiv1, loStyleDept2, loSubclass1, XClass1, XDept1, loStyleColor2 union(byName: true)~> FItems1",
				"FItems1, DSUser lookup(FItems1@PMOTN_REQ_ID_S == DSUser@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBrdID",
				"LBrdID select(mapColumn(",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S = FItems1@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          ITM_STY_NBR = ITM_STY_SEQ_NBR_S,",
				"          DIFF_1_ID = ITM_STY_CLR_SEQ_NBR_S,",
				"          CRT_UPDT_USER_ID,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XODESC12",
				"rejPromoID, DSPromoUser lookup(PMOTN_REQ_ID_S == PMOTN_GRP_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromoUserID",
				"LBrdID select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S = FItems1@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PRC_SYS_EXT_DTTM,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          ITM_STY_SEQ_NBR_S,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_DESC,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPromoID",
				"LPromoUserID select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          ITM_STY_NBR = ITM_STY_SEQ_NBR_S,",
				"          DIFF_1_ID = ITM_STY_CLR_SEQ_NBR_S,",
				"          CRT_UPDT_USER_ID,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoPromoDetail",
				"xoPromoDetail, XODESC12 union(byName: true)~> FPromoUser",
				"FPromoUser, DSTMRCY lookup(FPromoUser@MDSE_LVL_CD == DSTMRCY@MDSE_LVL_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTRMCY",
				"LTRMCY select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD = FPromoUser@MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          CRT_UPDT_USER_ID,",
				"          PMOTN_DESC,",
				"          MDSE_LVL_CD = DSTMRCY@MDSE_LVL_CD,",
				"          MDSE_LVL_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoTMRCY",
				"xoTMRCY aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PMOTN_REQ_ID_S','PRC_GRP_ZN_SEQ_NBR_S'],name)), $$ = first($$))) ~> rmItems",
				"rmItems select(mapColumn(",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_DESC,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          PMOTN_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDiffRej",
				"xoDiffRej, DSCurrency lookup(xoDiffRej@PRC_GRP_ZN_SEQ_NBR_S == DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S = xoDiffRej@PRC_GRP_ZN_SEQ_NBR_S,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          SCLS_ID,",
				"          CLS_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_DESC,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S = DSCurrency@PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          CRT_UPDT_USER_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"loStyleDept1 cast(output(",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     errors: true) ~> loStyleDept2",
				"loStyleColor1 cast(output(",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     errors: true) ~> loStyleColor2",
				"loUnapprovedDummy1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_UnApproved_PromoRejects1_FF_UnapprovedDummy1_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFUnapprovedDummy1",
				"loUnapprovedDummy2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_UnApproved_PromoRejects1_FF_UnapprovedDummy2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFUnapprovedDummy2",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_UnApproved_PromoRejects1_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdMktChnItemsRej"
			]
		}
	}
}