{
	"name": "xfmIPT221E_KeepRPMLoadFiles",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_ComplexPromo",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_srcIPT122RPMUnApprPromoExtract1_PX_DS_ComplexPromoUpdate",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromoUpdate"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_DS_MDReqRPMLoad",
						"type": "DatasetReference"
					},
					"name": "DSMDReqRPMLoad"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT125RPMClearanceTrnfrm_PX_DS_UnApprMDReqRPMUpdate",
						"type": "DatasetReference"
					},
					"name": "DSMDReqRPMUpdate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221E_KeepRPMLoadFiles_FF_ComplexPromo",
						"type": "DatasetReference"
					},
					"name": "FFComplexPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221E_KeepRPMLoadFiles_FF_ComplexPromoUpdate",
						"type": "DatasetReference"
					},
					"name": "FFComplexPromoUpdate"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221E_KeepRPMLoadFiles_FF_MDReqRPMLoad",
						"type": "DatasetReference"
					},
					"name": "FFMDReqRPMLoad"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT221E_KeepRPMLoadFiles_FF_UnApprMDReqRPMUpdate",
						"type": "DatasetReference"
					},
					"name": "FFMDReqRPMUpdate"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          PROMO_ID as string,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as integer,",
				"          PROMO_COMP_DETAIL_ID as integer,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as integer,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as integer,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IGNORE_CONSTRAINTS as integer,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as integer,",
				"          THRESHOLD_TYPE as integer,",
				"          THRESHOLD_AMOUNT as decimal(15,2),",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as decimal(15,2),",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as decimal(15,2),",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as decimal(15,2),",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as integer,",
				"          PROCESS_ID as integer,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSComplexPromo",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSComplexPromoUpdate",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(15,2),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(15,2),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSMDReqRPMLoad",
				"source(output(",
				"          MD_REQ_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          STRT_DT as timestamp,",
				"          MD_PRC_AMT as decimal(15,2),",
				"          RCMD_MD_PCT_OFF_RAT as decimal(15,2),",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          MD_CNT as string,",
				"          PNT_DT as timestamp,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSMDReqRPMUpdate",
				"DSComplexPromo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PROMO_ID as string,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as string,",
				"          PROMO_COMP_DETAIL_ID as string,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as string,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as string,",
				"          DIVISION as string,",
				"          GROUP_NO as string,",
				"          DEPT as string,",
				"          CLASS as string,",
				"          SUBCLASS as string,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as string,",
				"          ZONE_ID as string,",
				"          LOCATION as string,",
				"          APPLY_TO_CODE as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          IGNORE_CONSTRAINTS as string,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as string,",
				"          THRESHOLD_TYPE as string,",
				"          THRESHOLD_AMOUNT as string,",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as string,",
				"          CHANGE_TYPE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as string,",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as string,",
				"          PROCESS_ID as string,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT221E_KeepRPMLoadFiles.FF_ComplexPromo.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFComplexPromo",
				"DSComplexPromoUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MIN_QTY as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT221E_KeepRPMLoadFiles.FF_ComplexPromoUpdate.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFComplexPromoUpdate",
				"DSMDReqRPMLoad sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MD_REQ_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          STRT_DT as string,",
				"          MD_PRC_AMT as string,",
				"          RCMD_MD_PCT_OFF_RAT as string,",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          MD_CNT as string,",
				"          PNT_DT as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT221E_KeepRPMLoadFiles.FF_MDReqRPMLoad.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFMDReqRPMLoad",
				"DSMDReqRPMUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MD_REQ_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          STRT_DT as string,",
				"          MD_PRC_AMT as string,",
				"          RCMD_MD_PCT_OFF_RAT as string,",
				"          PROC_STAT_CD as string,",
				"          MDSE_LVL_CD as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          MD_CNT as string,",
				"          PNT_DT as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          STR_NBR as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT221E_KeepRPMLoadFiles.FF_UnApprMDReqRPMUpdate.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFMDReqRPMUpdate"
			]
		}
	}
}