{
	"name": "xfmIPT124RPMTrnfrm3_PX",
	"properties": {
		"folder": {
			"name": "12-PriceUpdatesRPM"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_DS_ApprPromo",
						"type": "DatasetReference"
					},
					"name": "DSApprPromo"
				},
				{
					"dataset": {
						"referenceName": "AB_DS_GlobalCC_seqNbr_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSGlobalCCseqNbr"
				},
				{
					"dataset": {
						"referenceName": "AB_DS_GlobalCC_seqNbr_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSGlobalCCseqNbr1"
				},
				{
					"dataset": {
						"referenceName": "AB_UIACX_UNIV_INTR_APPL_XREF_T_124",
						"type": "DatasetReference"
					},
					"name": "UIACXUNIVINTRAPPLXREFT"
				},
				{
					"dataset": {
						"referenceName": "AB_BrandMarket_IPA",
						"type": "DatasetReference"
					},
					"name": "FFBrdMktConfig"
				},
				{
					"dataset": {
						"referenceName": "AB_LOCLT_LOC_LIST_T_124",
						"type": "DatasetReference"
					},
					"name": "LOCLTLOCLISTT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_RMSStyDiff1Rej",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm3_PX_FF_ItmSty",
						"type": "DatasetReference"
					},
					"name": "FFItmSty"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_BrdIdRejects",
						"type": "DatasetReference"
					},
					"name": "FFBrdIdRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_CurrencyCdRejects",
						"type": "DatasetReference"
					},
					"name": "FFCurrencyCdRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_DS_ComplexPromoLoad",
						"type": "DatasetReference"
					},
					"name": "DSComplexPromoLoad"
				}
			],
			"transformations": [
				{
					"name": "FiStyClr"
				},
				{
					"name": "LRMSStyDiff1"
				},
				{
					"name": "LRMSStyDiff1Select1"
				},
				{
					"name": "LRMSStyDiff1DerivedColumn1"
				},
				{
					"name": "LRMSStyDiff1split1"
				},
				{
					"name": "loRMSStyDiff1"
				},
				{
					"name": "rejRMSStyDiff1"
				},
				{
					"name": "LItmSty"
				},
				{
					"name": "LItmStySelect1"
				},
				{
					"name": "LItmStyDerivedColumn1"
				},
				{
					"name": "LItmStysplit1"
				},
				{
					"name": "loItmStyNbr"
				},
				{
					"name": "rejItmSty"
				},
				{
					"name": "XStyDiff1Id"
				},
				{
					"name": "XMktDiff1Id"
				},
				{
					"name": "FItmStyDiff1"
				},
				{
					"name": "LUIACX"
				},
				{
					"name": "LUIACXderivedColumn"
				},
				{
					"name": "LUIACXsplit1"
				},
				{
					"name": "loUIACX"
				},
				{
					"name": "rejUIACX"
				},
				{
					"name": "FBrandId"
				},
				{
					"name": "loBrdId"
				},
				{
					"name": "rejBrdId"
				},
				{
					"name": "LCurrencyCd"
				},
				{
					"name": "LCurrencyCdDerivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "loCurrencyCd"
				},
				{
					"name": "rejCurrencyCd"
				},
				{
					"name": "select1"
				},
				{
					"name": "YesLBrdId"
				},
				{
					"name": "NoLBrdId"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          { BRD_ID} as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSApprPromo",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_CC_NBR as string,",
				"          ITM_SKU_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          GLBL_ITM_STY_NBR as string,",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          GLBL_SKU_NBR as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSGlobalCCseqNbr",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_CC_NBR as string,",
				"          ITM_SKU_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          GLBL_ITM_STY_NBR as string,",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          GLBL_SKU_NBR as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSGlobalCCseqNbr1",
				"source(output(",
				"          BRD_ID as integer,",
				"          INTR_APPL_BRD_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UIACXUNIVINTRAPPLXREFT",
				"source(output(",
				"          BrdId as string,",
				"          MktId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFBrdMktConfig",
				"source(output(",
				"          LOC_NBR as integer,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LOCLTLOCLISTT",
				"DSApprPromo split(MDSE_LVL_CD == '9',",
				"     or(MDSE_LVL_CD == '8' , MDSE_LVL_CD == '4'),",
				"     disjoint: false) ~> FiStyClr@(fioStyClr, fioSty, rejStyStyCC)",
				"FiStyClr@fioStyClr, DSGlobalCCseqNbr lookup({ BRD_ID} == BRD_ID",
				"     && FiStyClr@fioStyClr@MKT_ID == DSGlobalCCseqNbr@MKT_ID",
				"     && FiStyClr@fioStyClr@CHNL_ID == DSGlobalCCseqNbr@CHNL_ID",
				"     && FiStyClr@fioStyClr@ITM_STY_CLR_SEQ_NBR_S == DSGlobalCCseqNbr@ITM_STY_CLR_SEQ_NBR_S,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LRMSStyDiff1",
				"LRMSStyDiff1 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID = FiStyClr@fioStyClr@CHNL_ID,",
				"          MKT_ID = FiStyClr@fioStyClr@MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S = FiStyClr@fioStyClr@ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S = FiStyClr@fioStyClr@ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          BRD_ID,",
				"          MKT_ID = DSGlobalCCseqNbr@MKT_ID,",
				"          CHNL_ID = DSGlobalCCseqNbr@CHNL_ID,",
				"          ITM_STY_NBR,",
				"          ITM_STY_CC_NBR,",
				"          ITM_SKU_NBR,",
				"          MKT_DIFF1_ID,",
				"          GLBL_ITM_STY_NBR,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          GLBL_SKU_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = DSGlobalCCseqNbr@ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S = DSGlobalCCseqNbr@ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LRMSStyDiff1Select1",
				"LRMSStyDiff1Select1 derive(IsMatch = isMatch()) ~> LRMSStyDiff1DerivedColumn1",
				"LRMSStyDiff1DerivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> LRMSStyDiff1split1@(LRMSStyDiff1Match, LRMSStyDiff1NotMatch)",
				"LRMSStyDiff1split1@LRMSStyDiff1Match select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID = BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loRMSStyDiff1",
				"LRMSStyDiff1split1@LRMSStyDiff1NotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejRMSStyDiff1",
				"select1, DSGlobalCCseqNbr1 lookup({ BRD_ID} == BRD_ID",
				"     && select1@MKT_ID == DSGlobalCCseqNbr1@MKT_ID",
				"     && select1@CHNL_ID == DSGlobalCCseqNbr1@CHNL_ID",
				"     && select1@ITM_STY_SEQ_NBR_S == DSGlobalCCseqNbr1@ITM_STY_SEQ_NBR_S,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LItmSty",
				"LItmSty select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID = select1@CHNL_ID,",
				"          MKT_ID = select1@MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S = select1@ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S = select1@ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          BRD_ID,",
				"          MKT_ID = DSGlobalCCseqNbr1@MKT_ID,",
				"          CHNL_ID = DSGlobalCCseqNbr1@CHNL_ID,",
				"          ITM_STY_NBR,",
				"          ITM_STY_CC_NBR,",
				"          ITM_SKU_NBR,",
				"          MKT_DIFF1_ID,",
				"          GLBL_ITM_STY_NBR,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          GLBL_SKU_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = DSGlobalCCseqNbr1@ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S = DSGlobalCCseqNbr1@ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LItmStySelect1",
				"LItmStySelect1 derive(IsMatch = isMatch()) ~> LItmStyDerivedColumn1",
				"LItmStyDerivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> LItmStysplit1@(LItmStyMatch, LItmStyNotMatch)",
				"LItmStysplit1@LItmStyMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID = BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loItmStyNbr",
				"LItmStysplit1@LItmStyNotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejItmSty",
				"select2 derive(ITM_STY_NBR = '',",
				"          MKT_DIFF1_ID = '') ~> XStyDiff1Id",
				"loItmStyNbr derive(MKT_DIFF1_ID = '') ~> XMktDiff1Id",
				"XStyDiff1Id, aggregate1, loRMSStyDiff1 union(byName: true)~> FItmStyDiff1",
				"FItmStyDiff1, UIACXUNIVINTRAPPLXREFT lookup(BRAND_ID == INTR_APPL_BRD_ID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LUIACX",
				"LUIACX derive(IsMatch = isMatch()) ~> LUIACXderivedColumn",
				"LUIACXderivedColumn split(IsMatch==true(),",
				"     disjoint: false) ~> LUIACXsplit1@(LUIACXMatch, LUIACXNotMatch)",
				"LUIACXsplit1@LUIACXMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID = BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUIACX",
				"LUIACXsplit1@LUIACXNotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejUIACX",
				"loUIACX, rejUIACX union(byName: true)~> FBrandId",
				"YesLBrdId select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loBrdId",
				"NoLBrdId select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejBrdId",
				"loBrdId, LOCLTLOCLISTT lookup(STR_NBR == LOC_NBR,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LCurrencyCd",
				"LCurrencyCd derive(IsMatch = isMatch()) ~> LCurrencyCdDerivedColumn1",
				"LCurrencyCdDerivedColumn1 split(IsMatch==true(),",
				"     disjoint: false) ~> split1@(LCurrencyCdMatch, LCurrencyCdNotMatch)",
				"split1@LCurrencyCdMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loCurrencyCd",
				"split1@LCurrencyCdNotMatch select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejCurrencyCd",
				"FiStyClr@fioSty select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"FBrandId, FFBrdMktConfig exists(BRAND_ID == toInteger(BrdId),",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLBrdId",
				"FBrandId, FFBrdMktConfig exists(BRAND_ID == toInteger(BrdId),",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLBrdId",
				"XMktDiff1Id aggregate(groupBy(PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID),",
				"     each(match(!in(['PMOTN_REQ_ID_S','PMOTN_STRT_DT','PMOTN_END_DT','PROC_STAT_CD','PRC_SYS_EXT_DTTM','EXTL_PMOTN_IND','MDSE_LVL_CD','CHNL_ID','MKT_ID','PMOTN_APPL_TYP_CD','MDSE_HIER_LVL_SEQ_NBR_S','PRC_GRP_ZN_SEQ_NBR_S','MIN_QTY','PMOTN_PRC_UN_AMT','PMOTN_PCT_OFF_RAT','PMOTN_DLR_OFF_AMT','PMOTN_DSCT_CD','PMOTN_DESC','STR_NBR','BRAND_ID','DIV_ID','DEPT_ID','CLS_ID','ITM_STY_CLR_SEQ_NBR_S','ITM_STY_SEQ_NBR_S','SCLS_ID','ITM_STY_NBR','MKT_DIFF1_ID'],name)), $$ = first($$))) ~> aggregate1",
				"FiStyClr@rejStyStyCC select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRAND_ID = { BRD_ID},",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"rejRMSStyDiff1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          BRAND_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          SCLS_ID as string",
				"     ),",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm1_PX.FF_RMSStyDiff1Rej.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRMSStyDiff1",
				"rejItmSty sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          BRAND_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          SCLS_ID as string",
				"     ),",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm3_PX.FF_ItmSty.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFItmSty",
				"rejBrdId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm2_PX.FF_BrdIdRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdIdRejects",
				"rejCurrencyCd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm1_PX.FF_CurrencyCdRejects.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFCurrencyCdRejects",
				"loCurrencyCd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['xfmIPT124RPMTrnfrm2_PX.DS_ComplexPromoLoad.txt'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSComplexPromoLoad"
			]
		}
	}
}