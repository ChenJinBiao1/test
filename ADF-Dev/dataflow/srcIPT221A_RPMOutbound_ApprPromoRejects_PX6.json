{
	"name": "srcIPT221A_RPMOutbound_ApprPromoRejects_PX6",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved5_PromoRejects5_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject5"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved6_PromoRejects6_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject6"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Brd",
						"type": "DatasetReference"
					},
					"name": "DSBRD"
				},
				{
					"dataset": {
						"referenceName": "AB_ExtIPT221_IPT_RPM_Table_Load_DS_TMRCY",
						"type": "DatasetReference"
					},
					"name": "DSTMRCY"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_PromoUser",
						"type": "DatasetReference"
					},
					"name": "DSPromoUser"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMCmplxSeqNbrGen_PX_DS_Users",
						"type": "DatasetReference"
					},
					"name": "DSUser"
				},
				{
					"dataset": {
						"referenceName": "AB_ExtIPT221_IPT_RPM_Table_Load_DS_TMRCY",
						"type": "DatasetReference"
					},
					"name": "DSTMRCY1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects5_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFBrdmktRjctComplex"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved_PromoRejects6_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFBrdmktRjctPromoGrp"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "split2"
				},
				{
					"name": "LDiv5"
				},
				{
					"name": "coClasss5"
				},
				{
					"name": "coDiv6"
				},
				{
					"name": "coDiv5"
				},
				{
					"name": "coClasss6"
				},
				{
					"name": "coDept6"
				},
				{
					"name": "coDept5"
				},
				{
					"name": "XDiv5"
				},
				{
					"name": "xoDiv5"
				},
				{
					"name": "LClass5"
				},
				{
					"name": "LDept5"
				},
				{
					"name": "LSubclass5"
				},
				{
					"name": "XClass5"
				},
				{
					"name": "xoClass5"
				},
				{
					"name": "XDept5"
				},
				{
					"name": "xoDept5"
				},
				{
					"name": "loSubclass5"
				},
				{
					"name": "FStyleCombine5"
				},
				{
					"name": "LComplex"
				},
				{
					"name": "xolnvStyle"
				},
				{
					"name": "LTMRCY"
				},
				{
					"name": "xoTMRCY"
				},
				{
					"name": "rmItems3"
				},
				{
					"name": "xoDiffRej"
				},
				{
					"name": "LDiv6"
				},
				{
					"name": "LClass6"
				},
				{
					"name": "LSubclass6"
				},
				{
					"name": "loDiv6"
				},
				{
					"name": "XDiv6"
				},
				{
					"name": "loSubclass6"
				},
				{
					"name": "loClass6"
				},
				{
					"name": "XClass6"
				},
				{
					"name": "FStyleCombine6"
				},
				{
					"name": "LPromoGrp"
				},
				{
					"name": "xoProGrpId"
				},
				{
					"name": "split3"
				},
				{
					"name": "XSetNull6"
				},
				{
					"name": "FDept6"
				},
				{
					"name": "LTMRCY1"
				},
				{
					"name": "rmItems4"
				},
				{
					"name": "xoDmRej"
				},
				{
					"name": "xoTMRCY1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          PROMO_ID as integer,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as integer,",
				"          PROMO_COMP_DETAIL_ID as integer,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as integer,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as integer,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IGNORE_CONSTRAINTS as integer,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as integer,",
				"          THRESHOLD_TYPE as integer,",
				"          THRESHOLD_AMOUNT as decimal(15,2),",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as decimal(15,2),",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as decimal(15,2),",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as decimal(15,2),",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as integer,",
				"          PROCESS_ID as integer,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string,",
				"          MDSE_LVL_CD as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFReject5",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFReject6",
				"source(output(",
				"          BRD_ID as integer,",
				"          BRD_DESC as string,",
				"          DIV_ID as integer,",
				"          DIV_DESC as string,",
				"          DEPT_ID as integer,",
				"          DEPT_DESC as string,",
				"          CLS_ID as integer,",
				"          CLS_DESC as string,",
				"          SCLS_ID as integer,",
				"          SCLS_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSBRD",
				"source(output(",
				"          MDSE_LVL_CD as integer,",
				"          MDSE_LVL_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSTMRCY",
				"source(output(",
				"          PMOTN_REQ_ID as integer,",
				"          PMOTN_GRP_ID_S as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSPromoUser",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSUser",
				"source(output(",
				"          MDSE_LVL_CD as string,",
				"          MDSE_LVL_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSTMRCY1",
				"FFReject5 split(MDSE_LVL_CD == 3,",
				"     MDSE_LVL_CD == 4,",
				"     MDSE_LVL_CD == 5,",
				"     disjoint: false) ~> split1@(fioDiv5, fioDept5, fioClass5, rejStyles2)",
				"FFReject6 split(MDSE_LVL_CD == '3',",
				"     MDSE_LVL_CD == '5',",
				"     disjoint: false) ~> split2@(fioDiv6, fioClass6, rejStyle2)",
				"split1@fioDiv5, coDiv5 lookup(split1@fioDiv5@BRD_ID == coDiv5@BRD_ID",
				"     && GROUP_NO == DIV_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDiv5",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coClasss5",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDiv6",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDiv5",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coClasss6",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDept6",
				"DSBRD select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coDept5",
				"LDiv5 select(mapColumn(",
				"          BRD_ID = split1@fioDiv5@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_PERCENT,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          MDSE_LVL_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XDiv5",
				"XDiv5 derive(DEPT_DESC = toString(null()),",
				"          CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> xoDiv5",
				"split1@fioClass5, coClasss5 lookup(split1@fioClass5@BRD_ID == coClasss5@BRD_ID",
				"     && GROUP_NO == DIV_ID",
				"     && DEPT == DEPT_ID",
				"     && CLASS == CLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClass5",
				"split1@fioDept5, coDept5 lookup(split1@fioDept5@BRD_ID == coDept5@BRD_ID",
				"     && GROUP_NO == DIV_ID",
				"     && DEPT == DEPT_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDept5",
				"split1@rejStyles2, DSBRD lookup(split1@rejStyles2@BRD_ID == DSBRD@BRD_ID",
				"     && GROUP_NO == DIV_ID",
				"     && DEPT == DEPT_ID",
				"     && CLASS == CLS_ID",
				"     && SUBCLASS == SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LSubclass5",
				"LClass5 select(mapColumn(",
				"          BRD_ID = split1@fioClass5@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_PERCENT,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          MDSE_LVL_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XClass5",
				"XClass5 derive(SCLS_DESC = toString(null())) ~> xoClass5",
				"LDept5 select(mapColumn(",
				"          BRD_ID = split1@fioDept5@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_PERCENT,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          MDSE_LVL_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> XDept5",
				"XDept5 derive(CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> xoDept5",
				"LSubclass5 select(mapColumn(",
				"          BRD_ID = split1@rejStyles2@BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_PERCENT,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          MDSE_LVL_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loSubclass5",
				"xoDiv5, xoClass5, xoDept5, loSubclass5 union(byName: true)~> FStyleCombine5",
				"FStyleCombine5, DSPromoUser lookup(PROMO_ID == PMOTN_GRP_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LComplex",
				"LComplex select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          DIV_ID = GROUP_NO,",
				"          DIV_DESC,",
				"          DEPT_ID = DEPT,",
				"          DEPT_DESC,",
				"          CLS_ID = CLASS,",
				"          CLS_DESC,",
				"          SCLS_ID = SUBCLASS,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S = PROMO_ID,",
				"          PROMO_DESC = PROMO_NAME,",
				"          DIFF_1_ID = DIFF_ID,",
				"          ITM_STY_NBR = ITEM,",
				"          PRC_GRP_ZN_SEQ_NBR_S = ZONE_ID,",
				"          PMOTN_APPL_TYP_CD = STATUS,",
				"          PMOTN_START_DATE = START_DATE,",
				"          MDSE_LVL_CD,",
				"          PMOTN_END_DATE = END_DATE,",
				"          CNCY_CODE = CURRENCY_CODE,",
				"          MIN_QTY = THRESHOLD_QUANTITY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xolnvStyle",
				"xolnvStyle, DSTMRCY lookup(xolnvStyle@MDSE_LVL_CD == DSTMRCY@MDSE_LVL_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTMRCY",
				"LTMRCY select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_REQ_ID_S,",
				"          PROMO_DESC,",
				"          DIFF_1_ID,",
				"          ITM_STY_NBR,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          PMOTN_APPL_TYP_CD,",
				"          PMOTN_START_DATE,",
				"          MDSE_LVL_CD = xolnvStyle@MDSE_LVL_CD,",
				"          PMOTN_END_DATE,",
				"          CNCY_CODE,",
				"          MIN_QTY,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          MDSE_LVL_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoTMRCY",
				"xoTMRCY aggregate(groupBy(ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S),",
				"     each(match(!in(['ITM_STY_NBR','DIFF_1_ID','PMOTN_REQ_ID_S','PRC_GRP_ZN_SEQ_NBR_S'],name)), $$ = first($$))) ~> rmItems3",
				"rmItems3 select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          MDSE_LVL_CD = MDSE_LVL_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          DIFF_1_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          PMOTN_START_DATE,",
				"          PMOTN_END_DATE,",
				"          MIN_QTY,",
				"          PROMO_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CODE,",
				"          CRT_UPDT_USER_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDiffRej",
				"split2@fioDiv6, coDiv6 lookup(split2@fioDiv6@BRD_ID == coDiv6@BRD_ID",
				"     && split2@fioDiv6@DIV_ID == coDiv6@DIV_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LDiv6",
				"split2@fioClass6, coClasss6 lookup(split2@fioClass6@BRD_ID == coClasss6@BRD_ID",
				"     && split2@fioClass6@DIV_ID == coClasss6@DIV_ID",
				"     && split2@fioClass6@DEPT_ID == coClasss6@DEPT_ID",
				"     && split2@fioClass6@CLS_ID == coClasss6@CLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LClass6",
				"split2@rejStyle2, DSBRD lookup(split2@rejStyle2@BRD_ID == DSBRD@BRD_ID",
				"     && split2@rejStyle2@DIV_ID == DSBRD@DIV_ID",
				"     && split2@rejStyle2@DEPT_ID == DSBRD@DEPT_ID",
				"     && split2@rejStyle2@CLS_ID == DSBRD@CLS_ID",
				"     && split2@rejStyle2@SCLS_ID == DSBRD@SCLS_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LSubclass6",
				"LDiv6 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = split2@fioDiv6@BRD_ID,",
				"          DIV_ID = split2@fioDiv6@DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDiv6",
				"loDiv6 derive(DEPT_DESC = toString(null()),",
				"          CLS_DESC = toString(null()),",
				"          SCLS_DESC = toString(null())) ~> XDiv6",
				"LSubclass6 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = split2@rejStyle2@BRD_ID,",
				"          DIV_ID = split2@rejStyle2@DIV_ID,",
				"          DEPT_ID = split2@rejStyle2@DEPT_ID,",
				"          CLS_ID = split2@rejStyle2@CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID = split2@rejStyle2@SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC,",
				"          SCLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loSubclass6",
				"LClass6 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID = split2@fioClass6@BRD_ID,",
				"          DIV_ID = split2@fioClass6@DIV_ID,",
				"          DEPT_ID = split2@fioClass6@DEPT_ID,",
				"          CLS_ID = split2@fioClass6@CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          BRD_DESC,",
				"          DIV_DESC,",
				"          DEPT_DESC,",
				"          CLS_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loClass6",
				"loClass6 derive(SCLS_DESC = toString(null())) ~> XClass6",
				"XDiv6, XClass6, loSubclass6 union(byName: true)~> FStyleCombine6",
				"FStyleCombine6, DSUser lookup(FStyleCombine6@PMOTN_REQ_ID_S == DSUser@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromoGrp",
				"LPromoGrp select(mapColumn(",
				"          PMOTN_REQ_ID_S = FStyleCombine6@PMOTN_REQ_ID_S,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoProGrpId",
				"xoProGrpId split(MDSE_LVL_CD == '4',",
				"     disjoint: false) ~> split3@(xoDept6, xoStyle6)",
				"split3@xoDept6 derive(CLS_ID = toInteger(null()),",
				"          CLS_DESC = toString(null()),",
				"          SCLS_ID = toInteger(null()),",
				"          SCLS_DESC = toString(null()),",
				"          ITM_STY_NBR = toString(null()),",
				"          MKT_DIFF1_ID = toString(null())) ~> XSetNull6",
				"XSetNull6, split3@xoStyle6 union(byName: true)~> FDept6",
				"FDept6, DSTMRCY1 lookup(FDept6@MDSE_LVL_CD == DSTMRCY1@MDSE_LVL_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LTMRCY1",
				"xoTMRCY1 aggregate(groupBy(ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S),",
				"     each(match(!in(['ITM_STY_NBR','MKT_DIFF1_ID','PMOTN_REQ_ID_S','PRC_GRP_ZN_SEQ_NBR_S'],name)), $$ = first($$))) ~> rmItems4",
				"rmItems4 select(mapColumn(",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          MDSE_LVL_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PMOTN_APPL_TYP_CD,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          CNCY_CD,",
				"          CRT_UPDT_USER_ID,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDmRej",
				"LTMRCY1 select(mapColumn(",
				"          PMOTN_REQ_ID_S,",
				"          BRD_ID,",
				"          BRD_DESC,",
				"          DIV_ID,",
				"          DIV_DESC,",
				"          DEPT_ID,",
				"          DEPT_DESC,",
				"          CLS_ID,",
				"          CLS_DESC,",
				"          SCLS_ID,",
				"          SCLS_DESC,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          MDSE_LVL_CD = FDept6@MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          CRT_UPDT_USER_ID,",
				"          MDSE_LVL_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoTMRCY1",
				"xoDiffRej sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_PromoRejects5_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdmktRjctComplex",
				"xoDmRej sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved_PromoRejects6_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFBrdmktRjctPromoGrp"
			]
		}
	}
}