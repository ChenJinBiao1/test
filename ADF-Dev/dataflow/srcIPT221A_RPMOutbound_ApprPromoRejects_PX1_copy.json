{
	"name": "srcIPT221A_RPMOutbound_ApprPromoRejects_PX1_copy",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_TPROO_PMOTN_REQ_HDR_OTPT_T_221",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOPromoID"
				},
				{
					"dataset": {
						"referenceName": "AB_UHILV_UNIV_HIER_LVL_T_221",
						"type": "DatasetReference"
					},
					"name": "IPTUHILV"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm0_PX_FF_RejMultiCncy",
						"type": "DatasetReference"
					},
					"name": "FFRejMultiCncy"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_PromoZoneRejects",
						"type": "DatasetReference"
					},
					"name": "FFPromoZoneRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_OPORI_OUTB_PMOTN_REQ_GRP_T_221",
						"type": "DatasetReference"
					},
					"name": "IPTOPORIPromoID"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPNTrnfrm2_PX_FF_UHILVRejects",
						"type": "DatasetReference"
					},
					"name": "FFUHILVRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_OPORI_OUTB_PMOTN_REQ_GRP_T_2212",
						"type": "DatasetReference"
					},
					"name": "IPTTPROO"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_DeptRejects",
						"type": "DatasetReference"
					},
					"name": "FFDeptRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_InvalidStyRejects",
						"type": "DatasetReference"
					},
					"name": "FFInvalidStyRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm2_PX_FF_RejPrcStatA",
						"type": "DatasetReference"
					},
					"name": "FFRejPrcStatA"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm3_PX_FF_ItmSty",
						"type": "DatasetReference"
					},
					"name": "FFItmSty"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT124RPMTrnfrm1_PX_FF_RMSStyDiff1Rej",
						"type": "DatasetReference"
					},
					"name": "FFRMSStyDiff1"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT127RPMComplexLoad_PX_FF_ComplexRej",
						"type": "DatasetReference"
					},
					"name": "FFComplexRej"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_UHILV_OPORI",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOUHILVOPORI"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT128TPROOApprUpdate_PX_FF_Rej_Pmo_Grp_Id",
						"type": "DatasetReference"
					},
					"name": "FFRejPmoGrpId"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_OPORI_PromoID1_2212",
						"type": "DatasetReference"
					},
					"name": "IPTOPORIPromoID1"
				},
				{
					"dataset": {
						"referenceName": "AB_ldIPT128TPROOApprUpdate_PX_FF_TPROORej",
						"type": "DatasetReference"
					},
					"name": "FFTPROORej"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_TPROO_PromoID1_2112",
						"type": "DatasetReference"
					},
					"name": "IPTTPROOPromoID1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy1A_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject1A"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy1B_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject1B"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject1"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject2"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved2_PromoRejects2_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject2"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy3_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject3"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved3_PromoRejects3_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject3"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy4_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpeReject4"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved4_PromoRejects4_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject4"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy5_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject5"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved5_PromoRejects5_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject5"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy6A_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject6A"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved1_PromoRejects1_Dummy6B_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFDumpReject6B"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT221_RPMOutbound_Approved6_PromoRejects6_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFReject6"
				}
			],
			"transformations": [
				{
					"name": "LBRDMultiCncy"
				},
				{
					"name": "lomultiCncy"
				},
				{
					"name": "xAddDesc1"
				},
				{
					"name": "ADD1"
				},
				{
					"name": "xoDesc1"
				},
				{
					"name": "LPromoID1"
				},
				{
					"name": "loPromoID1"
				},
				{
					"name": "LBRDPromoZone"
				},
				{
					"name": "loPromoZone"
				},
				{
					"name": "xAddDesc2"
				},
				{
					"name": "ADD2"
				},
				{
					"name": "xoDesc2"
				},
				{
					"name": "LPromoID2"
				},
				{
					"name": "loPromoID2"
				},
				{
					"name": "rejPID2"
				},
				{
					"name": "rejPID1"
				},
				{
					"name": "fuRejects1"
				},
				{
					"name": "LBRDUHILV"
				},
				{
					"name": "loUHILV"
				},
				{
					"name": "xAddDesc3"
				},
				{
					"name": "ADD3"
				},
				{
					"name": "LReject2"
				},
				{
					"name": "loDummy2"
				},
				{
					"name": "RejApproved2"
				},
				{
					"name": "ADD4"
				},
				{
					"name": "LReject3"
				},
				{
					"name": "loDummy3"
				},
				{
					"name": "RejApproved3"
				},
				{
					"name": "ADD5"
				},
				{
					"name": "ADD6"
				},
				{
					"name": "xAddDesc5"
				},
				{
					"name": "xAddDesc4"
				},
				{
					"name": "xAddDesc6"
				},
				{
					"name": "ADD7"
				},
				{
					"name": "xAddDesc7"
				},
				{
					"name": "ADD8"
				},
				{
					"name": "xAddDesc8"
				},
				{
					"name": "fuRejects2"
				},
				{
					"name": "LReject4"
				},
				{
					"name": "loDummy4"
				},
				{
					"name": "RejApproved4"
				},
				{
					"name": "LBRDComplx"
				},
				{
					"name": "loCmplx"
				},
				{
					"name": "ADD9"
				},
				{
					"name": "foCmplx"
				},
				{
					"name": "xAddDesc9"
				},
				{
					"name": "LReject5"
				},
				{
					"name": "loDummy5"
				},
				{
					"name": "RejApproved5"
				},
				{
					"name": "ADD10"
				},
				{
					"name": "xAddDesc10"
				},
				{
					"name": "LPromoID3"
				},
				{
					"name": "loPromoID3"
				},
				{
					"name": "rejPID3"
				},
				{
					"name": "ADD11"
				},
				{
					"name": "xAddDesc11"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "loPromoID4"
				},
				{
					"name": "rejPID4"
				},
				{
					"name": "fuRejects3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pBrandId as integer (1),",
				"     pChnlId as integer (1),",
				"     pMarketId as string ('8'),",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOPromoID",
				"source(output(",
				"          UNIV_HIER_LVL_SEQ_NBR_S as integer,",
				"          { BRD_ID} as integer,",
				"          { DIV_ID} as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTUHILV",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string,",
				"          Count as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejMultiCncy",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string,",
				"          Count as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFPromoZoneRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTOPORIPromoID",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFUHILVRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROO",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as decimal(15,2),",
				"          PMOTN_DESC as decimal(15,2),",
				"          STR_NBR as decimal(15,2),",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFDeptRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRAND_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFInvalidStyRejects",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRAND_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejPrcStatA",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRAND_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFItmSty",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(15,2),",
				"          PMOTN_PCT_OFF_RAT as decimal(15,2),",
				"          PMOTN_DLR_OFF_AMT as decimal(15,2),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRAND_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRMSStyDiff1",
				"source(output(",
				"          PROMO_ID as integer,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as integer,",
				"          PROMO_COMP_DETAIL_ID as integer,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as integer,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as integer,",
				"          DIVISION as integer,",
				"          GROUP_NO as integer,",
				"          DEPT as integer,",
				"          CLASS as integer,",
				"          SUBCLASS as integer,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as integer,",
				"          ZONE_ID as integer,",
				"          LOCATION as integer,",
				"          APPLY_TO_CODE as integer,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IGNORE_CONSTRAINTS as integer,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as integer,",
				"          THRESHOLD_TYPE as integer,",
				"          THRESHOLD_AMOUNT as decimal(20,4),",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as decimal(20,4),",
				"          CHANGE_TYPE as integer,",
				"          CHANGE_AMOUNT as string,",
				"          CHANGE_CURRENCY as decimal(20,4),",
				"          CHANGE_QUANTITY as string,",
				"          CHANGE_UOM as decimal(20,4),",
				"          AUTO_APPROVE_IND as integer,",
				"          PROCESS_ID as integer,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string,",
				"          sqlcode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFComplexRej",
				"source(output(",
				"          PROMO_ID as integer,",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          MDSE_LVL_CD as integer,",
				"          CRT_UPDT_USER_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOUHILVOPORI",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFRejPmoGrpId",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTOPORIPromoID1",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer,",
				"          PMOTN_STRT_DT as timestamp,",
				"          PMOTN_END_DT as timestamp,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as timestamp,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as integer,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          MIN_QTY as integer,",
				"          PMOTN_PRC_UN_AMT as decimal(10,0),",
				"          PMOTN_PCT_OFF_RAT as decimal(10,0),",
				"          PMOTN_DLR_OFF_AMT as decimal(10,0),",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as integer,",
				"          BRD_ID as integer,",
				"          DIV_ID as integer,",
				"          DEPT_ID as integer,",
				"          CLS_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer,",
				"          SCLS_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string,",
				"          sqlcode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FFTPROORej",
				"source(output(",
				"          PMOTN_REQ_ID_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPROOPromoID1",
				"FFRejMultiCncy, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDMultiCncy",
				"LBRDMultiCncy select(mapColumn(",
				"          { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD,",
				"          UNIV_HIER_LVL_SEQ_NBR_S,",
				"          DIV_ID = { DIV_ID},",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lomultiCncy",
				"lomultiCncy filter({ BRD_ID} == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc1",
				"xAddDesc1 derive(DESCRIPTION = 'Approved Promo Record Rejected while splitting the promo based on multi currency logic in job xfmIPT124RPMTrnfrm0_PX') ~> ADD1",
				"ADD1 select(mapColumn(",
				"          { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDesc1",
				"IPTTPROOPromoID, xoDesc1 lookup(IPTTPROOPromoID@PMOTN_REQ_ID_S == xoDesc1@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromoID1",
				"LPromoID1 select(mapColumn(",
				"          PMOTN_REQ_ID_S = xoDesc1@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoID1",
				"FFPromoZoneRejects, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDPromoZone",
				"LBRDPromoZone select(mapColumn(",
				"          { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD,",
				"          DIV_ID = { DIV_ID},",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoZone",
				"loPromoZone filter({ BRD_ID} == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc2",
				"xAddDesc2 derive(DESCRIPTION = 'Approved Promo Record Rejected while exploding Zone to Store in job xfmIPT124RPMTrnfrm1_PX') ~> ADD2",
				"ADD2 select(mapColumn(",
				"          { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoDesc2",
				"IPTOPORIPromoID, xoDesc2 lookup(IPTOPORIPromoID@PMOTN_REQ_ID_S == xoDesc2@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromoID2",
				"LPromoID2 select(mapColumn(",
				"          PMOTN_REQ_ID_S = xoDesc2@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoID2",
				"LPromoID2 select(mapColumn(",
				"          { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S = xoDesc2@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPID2",
				"LPromoID1 select(mapColumn(",
				"          { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S = xoDesc1@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          CNCY_CD,",
				"          DESCRIPTION,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          DIV_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPID1",
				"rejPID1, rejPID2 union(byName: true)~> fuRejects1",
				"FFUHILVRejects, IPTUHILV lookup(MDSE_HIER_LVL_SEQ_NBR_S == UNIV_HIER_LVL_SEQ_NBR_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDUHILV",
				"LBRDUHILV select(mapColumn(",
				"          BRD_ID = { BRD_ID},",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { DIV_ID},",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loUHILV",
				"loUHILV filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc3",
				"xAddDesc3 derive(DESCRIPTION = 'Approved Promo Record Rejected while fetching MH from UHILV  in job xfmIPT124RPMTrnfrm1_PX') ~> ADD3",
				"ADD3, IPTTPROO lookup(MDSE_HIER_LVL_SEQ_NBR_S == IPTTPROO@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LReject2",
				"LReject2 select(mapColumn(",
				"          PMOTN_REQ_ID_S = IPTTPROO@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDummy2",
				"LReject2 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PMOTN_REQ_ID_S = loUHILV@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          { DIV_ID},",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          DESCRIPTION,",
				"          PMOTN_REQ_ID_S = IPTTPROO@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RejApproved2",
				"FFDeptRejects derive(DESCRIPTION = 'Approved Promo Record Rejected while exploding Dept to Style  in job xfmIPT124RPMTrnfrm1_PX') ~> ADD4",
				"xAddDesc4, IPTTPROO lookup(FFDeptRejects@PMOTN_REQ_ID_S == IPTTPROO@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LReject3",
				"LReject3 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFDeptRejects@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDummy3",
				"LReject3 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFDeptRejects@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          SCLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RejApproved3",
				"FFInvalidStyRejects derive(DESCRIPTION = 'Approved Dept level Promo Record Rejected in sales or inv check  in job xfmIPT124RPMTrnfrm2_PX') ~> ADD5",
				"FFRejPrcStatA derive(DESCRIPTION = 'Approved Dept level Promo applied to both R and M Record Rejected in sales or inv check  in job xfmIPT124RPMTrnfrm2_PX') ~> ADD6",
				"ADD5 filter(BRAND_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc5",
				"ADD4 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc4",
				"ADD6 filter(BRAND_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc6",
				"FFItmSty derive(DESCRIPTION = 'Approved  Promo  Record Rejected in  Items dataset lookup in job xfmIPT124RPMTrnfrm3_PX-BMC for this Style is not matching with BMC in BCR items data') ~> ADD7",
				"ADD7 filter(BRAND_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc7",
				"FFRMSStyDiff1 derive(DESCRIPTION = 'Approved  Promo  Record Rejected in  Items dataset lookup in job xfmIPT124RPMTrnfrm3_PX-BMC for this CC is not matching with BMC in BCR items data') ~> ADD8",
				"ADD8 filter(BRAND_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc8",
				"xAddDesc5, xAddDesc6, xAddDesc7, xAddDesc8 union(byName: true)~> fuRejects2",
				"fuRejects2, IPTTPROO lookup(fuRejects2@PMOTN_REQ_ID_S == IPTTPROO@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LReject4",
				"LReject4 select(mapColumn(",
				"          PMOTN_REQ_ID_S = fuRejects2@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDummy4",
				"LReject4 select(mapColumn(",
				"          PMOTN_REQ_ID_S = fuRejects2@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          DESCRIPTION,",
				"          BRAND_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RejApproved4",
				"FFComplexRej, IPTTPROOUHILVOPORI lookup(FFComplexRej@PROMO_ID == IPTTPROOUHILVOPORI@PROMO_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LBRDComplx",
				"LBRDComplx select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID = FFComplexRej@PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_QUANTITY,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          CRT_UPDT_USER_ID,",
				"          MDSE_LVL_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loCmplx",
				"loCmplx derive(DESCRIPTION = 'Approved Promo Record rejected by Oracle while inserting into RPM Staging in the job ldIPT127RPMComplexLoad_PX') ~> ADD9",
				"xAddDesc9 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_QUANTITY,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          MDSE_LVL_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> foCmplx",
				"ADD9 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc9",
				"foCmplx, IPTTPROO lookup(PROMO_ID == PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LReject5",
				"LReject5 select(mapColumn(",
				"          PROMO_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loDummy5",
				"LReject5 select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PROMO_ID,",
				"          PROMO_NAME,",
				"          COMP_DISPLAY_ID,",
				"          PROMO_COMP_ID,",
				"          PROMO_COMP_DETAIL_ID,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID,",
				"          THRESHOLD_ID,",
				"          THRESHOLD_DISPLAY_ID,",
				"          MERCH_TYPE,",
				"          DIVISION,",
				"          GROUP_NO,",
				"          DEPT,",
				"          CLASS,",
				"          SUBCLASS,",
				"          DIFF_ID,",
				"          ITEM,",
				"          ATTRIBUTE_1,",
				"          ATTRIBUTE_2,",
				"          ATTRIBUTE_3,",
				"          ZONE_NODE_TYPE,",
				"          ZONE_ID,",
				"          LOCATION,",
				"          APPLY_TO_CODE,",
				"          START_DATE,",
				"          END_DATE,",
				"          IGNORE_CONSTRAINTS,",
				"          THRESHOLD_NAME,",
				"          CURRENCY_CODE,",
				"          QUALIFICATION_TYPE,",
				"          THRESHOLD_TYPE,",
				"          THRESHOLD_AMOUNT,",
				"          THRESHOLD_CURRENCY,",
				"          THRESHOLD_QUANTITY,",
				"          CHANGE_TYPE,",
				"          CHANGE_AMOUNT,",
				"          CHANGE_CURRENCY,",
				"          CHANGE_QUANTITY,",
				"          CHANGE_UOM,",
				"          AUTO_APPROVE_IND,",
				"          PROCESS_ID,",
				"          STATUS,",
				"          ERR_MSG_TXT,",
				"          MDSE_LVL_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RejApproved5",
				"FFRejPmoGrpId derive(DESCRIPTION = 'Approved Promo Record Rejected in OPORI lookup while updating the status as SENT in TPROO in job ldIPT128TPROOApprUpdate_PX') ~> ADD10",
				"ADD10 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc10",
				"xAddDesc10, IPTOPORIPromoID1 lookup(FFRejPmoGrpId@PMOTN_REQ_ID_S == IPTOPORIPromoID1@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPromoID3",
				"LPromoID3 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFRejPmoGrpId@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoID3",
				"LPromoID3 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFRejPmoGrpId@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPID3",
				"FFTPROORej derive(DESCRIPTION = 'Approved Promo Record Rejected by Oracle while updating the status as SENT in TPROO in job ldIPT128TPROOApprUpdate_PX') ~> ADD11",
				"ADD11 filter(BRD_ID == $pBrandId && CHNL_ID == $pChnlId && MKT_ID == $pMarketId) ~> xAddDesc11",
				"xAddDesc11, IPTTPROOPromoID1 lookup(FFTPROORej@PMOTN_REQ_ID_S == IPTTPROOPromoID1@PMOTN_REQ_ID_S,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFTPROORej@PMOTN_REQ_ID_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPromoID4",
				"lookup1 select(mapColumn(",
				"          PMOTN_REQ_ID_S = FFTPROORej@PMOTN_REQ_ID_S,",
				"          PMOTN_STRT_DT,",
				"          PMOTN_END_DT,",
				"          PROC_STAT_CD,",
				"          PRC_SYS_EXT_DTTM,",
				"          EXTL_PMOTN_IND,",
				"          MDSE_LVL_CD,",
				"          CHNL_ID,",
				"          MKT_ID,",
				"          PMOTN_APPL_TYP_CD,",
				"          MDSE_HIER_LVL_SEQ_NBR_S,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          MIN_QTY,",
				"          PMOTN_PRC_UN_AMT,",
				"          PMOTN_PCT_OFF_RAT,",
				"          PMOTN_DLR_OFF_AMT,",
				"          PMOTN_DSCT_CD,",
				"          PMOTN_DESC,",
				"          STR_NBR,",
				"          BRD_ID,",
				"          DIV_ID,",
				"          DEPT_ID,",
				"          CLS_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_STY_SEQ_NBR_S,",
				"          SCLS_ID,",
				"          ITM_STY_NBR,",
				"          MKT_DIFF1_ID,",
				"          CNCY_CD,",
				"          DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejPID4",
				"rejPID4, rejPID3 union(byName: true)~> fuRejects3",
				"loPromoID1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy1A_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject1A",
				"loPromoID2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy1B_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject1B",
				"fuRejects1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          CNCY_CD as string,",
				"          DESCRIPTION as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          SCLS_ID as string,",
				"          DIV_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject1",
				"loDummy2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject2",
				"RejApproved2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          MDSE_LVL_CD as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          DESCRIPTION as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          SCLS_ID as string,",
				"          DIV_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved2_PromoRejects2_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject2",
				"loDummy3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy3_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject3",
				"RejApproved3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          BRD_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          SCLS_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved3_PromoRejects3_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject3",
				"loDummy4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy4_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpeReject4",
				"RejApproved4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          SCLS_ID as string,",
				"          DESCRIPTION as string,",
				"          BRAND_ID as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved4_PromoRejects4_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject4",
				"loDummy5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy5_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject5",
				"RejApproved5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRD_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          PROMO_ID as string,",
				"          PROMO_NAME as string,",
				"          COMP_DISPLAY_ID as string,",
				"          PROMO_COMP_ID as string,",
				"          PROMO_COMP_DETAIL_ID as string,",
				"          PROMO_COMP_DETAIL_DISPLAY_ID as string,",
				"          THRESHOLD_ID as string,",
				"          THRESHOLD_DISPLAY_ID as string,",
				"          MERCH_TYPE as string,",
				"          DIVISION as string,",
				"          GROUP_NO as string,",
				"          DEPT as string,",
				"          CLASS as string,",
				"          SUBCLASS as string,",
				"          DIFF_ID as string,",
				"          ITEM as string,",
				"          ATTRIBUTE_1 as string,",
				"          ATTRIBUTE_2 as string,",
				"          ATTRIBUTE_3 as string,",
				"          ZONE_NODE_TYPE as string,",
				"          ZONE_ID as string,",
				"          LOCATION as string,",
				"          APPLY_TO_CODE as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          IGNORE_CONSTRAINTS as string,",
				"          THRESHOLD_NAME as string,",
				"          CURRENCY_CODE as string,",
				"          QUALIFICATION_TYPE as string,",
				"          THRESHOLD_TYPE as string,",
				"          THRESHOLD_AMOUNT as string,",
				"          THRESHOLD_CURRENCY as string,",
				"          THRESHOLD_QUANTITY as string,",
				"          CHANGE_TYPE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CHANGE_CURRENCY as string,",
				"          CHANGE_PERCENT as string,",
				"          CHANGE_UOM as string,",
				"          AUTO_APPROVE_IND as string,",
				"          PROCESS_ID as string,",
				"          STATUS as string,",
				"          ERR_MSG_TXT as string,",
				"          MDSE_LVL_CD as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved5_PromoRejects5_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject5",
				"loPromoID3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy6A_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject6A",
				"loPromoID4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved1_PromoRejects1_Dummy6B_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFDumpReject6B",
				"fuRejects3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_REQ_ID_S as string,",
				"          PMOTN_STRT_DT as string,",
				"          PMOTN_END_DT as string,",
				"          PROC_STAT_CD as string,",
				"          PRC_SYS_EXT_DTTM as string,",
				"          EXTL_PMOTN_IND as string,",
				"          MDSE_LVL_CD as string,",
				"          CHNL_ID as string,",
				"          MKT_ID as string,",
				"          PMOTN_APPL_TYP_CD as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string,",
				"          MIN_QTY as string,",
				"          PMOTN_PRC_UN_AMT as string,",
				"          PMOTN_PCT_OFF_RAT as string,",
				"          PMOTN_DLR_OFF_AMT as string,",
				"          PMOTN_DSCT_CD as string,",
				"          PMOTN_DESC as string,",
				"          STR_NBR as string,",
				"          BRD_ID as string,",
				"          DIV_ID as string,",
				"          DEPT_ID as string,",
				"          CLS_ID as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          ITM_STY_SEQ_NBR_S as string,",
				"          SCLS_ID as string,",
				"          ITM_STY_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          CNCY_CD as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT221-RPMOutbound_Approved6_PromoRejects6_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFReject6"
			]
		}
	}
}