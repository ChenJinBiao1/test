{
	"name": "xfmIPT045PriceTrnfrm_PX",
	"properties": {
		"folder": {
			"name": "04-CurrentPriceInbound"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_srcIPT041FlattenPriceEBO_PX_IPTPrice_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSIPTPrice"
				},
				{
					"dataset": {
						"referenceName": "AB_IPTEGI_Ora_IPE_T_MKT_T_045",
						"type": "DatasetReference"
					},
					"name": "OraIPETMKTT"
				},
				{
					"dataset": {
						"referenceName": "AB_IPTCGI_Ora_IPA_T_MKT_T_045",
						"type": "DatasetReference"
					},
					"name": "OraIPATMKTT"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT013BCRItemsStyClrSeqNbr_PX_DS_GlobalCC_seqNbr_EU_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSGlobalCCSeqNbr"
				},
				{
					"dataset": {
						"referenceName": "AB_IPTCGI_IPA_ITSKU_ITM_SKU_045",
						"type": "DatasetReference"
					},
					"name": "IPAITSKUTMSKU"
				},
				{
					"dataset": {
						"referenceName": "AB_IPTEGI_IPE_ITSKU_ITM_SKU_045",
						"type": "DatasetReference"
					},
					"name": "IPEITSKUITMSKU"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT045PriceTrnfrm_PX_Rej_CtryCd_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFCtryCd"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT045PriceTrnfrm_PX_Rej_InvalidSku_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFInvalidSku"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT045PriceTrnfrm_PX_PriceUpdate_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSPriceUpdate"
				}
			],
			"transformations": [
				{
					"name": "FMKT"
				},
				{
					"name": "LMarket"
				},
				{
					"name": "rejCtryCd"
				},
				{
					"name": "lomktID"
				},
				{
					"name": "LRMSSKUGlblCCSeqNbr"
				},
				{
					"name": "FSKU"
				},
				{
					"name": "rejRMSItemSku"
				},
				{
					"name": "LGLBLSKUGlblCSeqNbr"
				},
				{
					"name": "loGlbalSKUGlblCCSeqNbr"
				},
				{
					"name": "FnRMSGlblSKUCC"
				},
				{
					"name": "rejItemSku"
				},
				{
					"name": "RDItmSkuNbr"
				},
				{
					"name": "AGGRAvgPrcAmt"
				},
				{
					"name": "outPrcAmt"
				},
				{
					"name": "xoGlblCC"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "LAvgPrcAmt"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "IsMatch"
				},
				{
					"name": "split1"
				},
				{
					"name": "IsMatch2"
				},
				{
					"name": "split2"
				},
				{
					"name": "select2"
				},
				{
					"name": "IsMatchN"
				},
				{
					"name": "split3"
				},
				{
					"name": "IsMatch3"
				},
				{
					"name": "split4"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          LocationNbr as integer,",
				"          LocationTypeCode as string,",
				"          CountryCode as string,",
				"          CountryDesc as string,",
				"          CurrencyCode as string,",
				"          CurrencyDesc as string,",
				"          BrandID as string,",
				"          PriceChgStatusCode as string,",
				"          AreaId as string,",
				"          PriceChgId as integer,",
				"          ItemSKUID as string,",
				"          MerchandiseDivisionID as string,",
				"          MerchandiseDepartmentID as string,",
				"          MerchandiseClassID as string,",
				"          MerchandiseSubclassID as string,",
				"          ItemStyleID as string,",
				"          ColorDiffID as string,",
				"          SizeDiffID as string,",
				"          PriceAmt as decimal(15,2),",
				"          EffectiveDate as date,",
				"          EndDate as date,",
				"          Timestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSIPTPrice",
				"source(output(",
				"          LOC_NBR as integer,",
				"          MKT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OraIPETMKTT",
				"source(output(",
				"          LOC_NBR as integer,",
				"          MKT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OraIPATMKTT",
				"source(output(",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          ITM_STY_NBR as string,",
				"          ITM_STY_CC_NBR as string,",
				"          ITM_SKU_NBR as string,",
				"          MKT_DIFF1_ID as string,",
				"          GLBL_ITM_STY_NBR as string,",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          GLBL_SKU_NBR as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSGlobalCCSeqNbr",
				"source(output(",
				"          MKT_ID as string,",
				"          SKU_NBR as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_CC_NBR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPAITSKUTMSKU",
				"source(output(",
				"          MKT_ID as string,",
				"          SKU_NBR as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          ITM_STY_CC_NBR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPEITSKUITMSKU",
				"OraIPETMKTT, OraIPATMKTT union(byName: true)~> FMKT",
				"DSIPTPrice, FMKT lookup(LocationNbr == LOC_NBR,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LMarket",
				"LMarket select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          Timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejCtryCd",
				"split3@YesN select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          Timestamp,",
				"          MKT_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lomktID",
				"lomktID, DSGlobalCCSeqNbr lookup(lomktID@MKT_ID == DSGlobalCCSeqNbr@MKT_ID",
				"     && ItemSKUID == ITM_SKU_NBR,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LRMSSKUGlblCCSeqNbr",
				"IPAITSKUTMSKU, IPEITSKUITMSKU union(byName: true)~> FSKU",
				"split1@No select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          Timestamp,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MKT_ID = split1@No@MKT_ID,",
				"          ITM_STY_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejRMSItemSku",
				"rejRMSItemSku, FSKU lookup(rejRMSItemSku@MKT_ID == FSKU@MKT_ID",
				"     && ItemSKUID == SKU_NBR,",
				"     multiple: true,",
				"     broadcast: 'auto',",
				"     pickup: 'any')~> LGLBLSKUGlblCSeqNbr",
				"split2@Yes2 select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          Timestamp,",
				"          GLBL_ITM_STY_CC_NBR = ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MKT_ID,",
				"          ITM_SKU_NBR = SKU_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loGlbalSKUGlblCCSeqNbr",
				"loGlbalSKUGlblCCSeqNbr, select2 union(byName: true)~> FnRMSGlblSKUCC",
				"split2@No2 select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          Timestamp,",
				"          MKT_ID = split2@No2@MKT_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejItemSku",
				"FnRMSGlblSKUCC aggregate(groupBy(ITM_STY_CLR_SEQ_NBR_S,",
				"          ITM_SKU_NBR,",
				"          EffectiveDate,",
				"          PriceChgStatusCode,",
				"          LocationNbr),",
				"     each(match(!in(['ITM_STY_CLR_SEQ_NBR_S','ITM_SKU_NBR','EffectiveDate','PriceChgStatusCode','LocationNbr'],name)), $$ = first($$))) ~> RDItmSkuNbr",
				"RDItmSkuNbr aggregate(groupBy(ITM_STY_CLR_SEQ_NBR_S,",
				"          LocationNbr,",
				"          EffectiveDate,",
				"          PriceChgStatusCode),",
				"     AvgPrcAmt = avg(PriceAmt)) ~> AGGRAvgPrcAmt",
				"AGGRAvgPrcAmt select(mapColumn(",
				"          AvgPrcAmt,",
				"          EffectiveDate,",
				"          PriceChgStatusCode,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          LocationNbr",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outPrcAmt",
				"RDItmSkuNbr select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          Timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoGlblCC",
				"xoGlblCC, outPrcAmt lookup(xoGlblCC@EffectiveDate == outPrcAmt@EffectiveDate",
				"     && xoGlblCC@PriceChgStatusCode == outPrcAmt@PriceChgStatusCode",
				"     && xoGlblCC@ITM_STY_CLR_SEQ_NBR_S == outPrcAmt@ITM_STY_CLR_SEQ_NBR_S",
				"     && xoGlblCC@LocationNbr == outPrcAmt@LocationNbr,",
				"     multiple: true,",
				"     broadcast: 'auto',",
				"     pickup: 'any')~> lookup1",
				"split4@Yes3 select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt = AvgPrcAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          Timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LAvgPrcAmt",
				"LAvgPrcAmt aggregate(groupBy(ITM_STY_CLR_SEQ_NBR_S,",
				"          LocationNbr,",
				"          EffectiveDate,",
				"          PriceChgStatusCode),",
				"     each(match(!in(['ITM_STY_CLR_SEQ_NBR_S','LocationNbr','EffectiveDate','PriceChgStatusCode'],name)), $$ = last($$))) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          Timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"LRMSSKUGlblCCSeqNbr derive(IsMatch = isMatch()) ~> IsMatch",
				"IsMatch split(IsMatch==true(),",
				"     disjoint: false) ~> split1@(Yes, No)",
				"LGLBLSKUGlblCSeqNbr derive(IsMatch = isMatch()) ~> IsMatch2",
				"IsMatch2 split(IsMatch==true(),",
				"     disjoint: false) ~> split2@(Yes2, No2)",
				"split1@Yes select(mapColumn(",
				"          LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate,",
				"          EndDate,",
				"          Timestamp,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          MKT_ID = split1@Yes@MKT_ID,",
				"          ITM_SKU_NBR",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"LMarket derive(IsMatch = isMatch()) ~> IsMatchN",
				"IsMatchN split(IsMatch==true(),",
				"     disjoint: false) ~> split3@(YesN)",
				"lookup1 derive(IsMatch = isMatch()) ~> IsMatch3",
				"select3 split(IsMatch==true(),",
				"     disjoint: false) ~> split4@(Yes3)",
				"IsMatch3 select(mapColumn(",
				"          LocationNbr = xoGlblCC@LocationNbr,",
				"          LocationTypeCode,",
				"          CountryCode,",
				"          CountryDesc,",
				"          CurrencyCode,",
				"          CurrencyDesc,",
				"          BrandID,",
				"          PriceChgStatusCode = xoGlblCC@PriceChgStatusCode,",
				"          AreaId,",
				"          PriceChgId,",
				"          ItemSKUID,",
				"          MerchandiseDivisionID,",
				"          MerchandiseDepartmentID,",
				"          MerchandiseClassID,",
				"          MerchandiseSubclassID,",
				"          ItemStyleID,",
				"          ColorDiffID,",
				"          SizeDiffID,",
				"          PriceAmt,",
				"          EffectiveDate = xoGlblCC@EffectiveDate,",
				"          EndDate,",
				"          GLBL_ITM_STY_CC_NBR,",
				"          ITM_STY_CLR_SEQ_NBR_S = xoGlblCC@ITM_STY_CLR_SEQ_NBR_S,",
				"          Timestamp,",
				"          AvgPrcAmt,",
				"          IsMatch",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"rejCtryCd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT045PriceTrnfrm_PX.Rej_CtryCd.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFCtryCd",
				"rejItemSku sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('xfmIPT045PriceTrnfrm_PX.Rej_InvalidSku.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFInvalidSku",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LocationNbr as string,",
				"          PriceChgStatusCode as string,",
				"          LocationTypeCode as string,",
				"          CountryCode as string,",
				"          CountryDesc as string,",
				"          CurrencyCode as string,",
				"          CurrencyDesc as string,",
				"          BrandID as string,",
				"          AreaId as string,",
				"          PriceChgId as string,",
				"          ItemSKUID as string,",
				"          MerchandiseDivisionID as string,",
				"          MerchandiseDepartmentID as string,",
				"          MerchandiseClassID as string,",
				"          MerchandiseSubclassID as string,",
				"          ItemStyleID as string,",
				"          ColorDiffID as string,",
				"          SizeDiffID as string,",
				"          PriceAmt as string,",
				"          EffectiveDate as string,",
				"          EndDate as string,",
				"          GLBL_ITM_STY_CC_NBR as string,",
				"          ITM_STY_CLR_SEQ_NBR_S as string,",
				"          Timestamp as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT045PriceTrnfrm_PX.PriceUpdate.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSPriceUpdate"
			]
		}
	}
}