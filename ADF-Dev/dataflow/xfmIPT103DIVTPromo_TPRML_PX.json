{
	"name": "xfmIPT103DIVTPromo_TPRML_PX",
	"properties": {
		"folder": {
			"name": "10-DIVTPriceLadders"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT101DIVTPromo_TPRML_PX_DS_ALL_data_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSALLDATA"
				},
				{
					"dataset": {
						"referenceName": "AB_MHIERSEQNBR_TPRML1",
						"type": "DatasetReference"
					},
					"name": "IPTTPRML1"
				},
				{
					"dataset": {
						"referenceName": "AB_TPRML_PMOTN_LADR_T_103",
						"type": "DatasetReference"
					},
					"name": "IPTTPRML"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT103DIVTPromo_TPRML_PX_DS_TPRML_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSTPRML"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "inLPMOTN"
				},
				{
					"name": "LPMOTN"
				},
				{
					"name": "loFunnel"
				},
				{
					"name": "inLPMOTN1"
				},
				{
					"name": "LPMOTN1"
				},
				{
					"name": "loPMOTN"
				},
				{
					"name": "XGenPMOTNId"
				},
				{
					"name": "xoTPRML"
				},
				{
					"name": "loFunnel2"
				},
				{
					"name": "Xdateid"
				},
				{
					"name": "FPMOTNID"
				},
				{
					"name": "IsMatch"
				},
				{
					"name": "split1"
				},
				{
					"name": "IsMatch2"
				},
				{
					"name": "split2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pUserId as string ('PIPT091U'),",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          MKT_ID as string,",
				"          BRD_ID as integer,",
				"          PRC_GRP_ZN_SEQ_NBR_S as integer,",
				"          CHNL_ID as integer,",
				"          LADR_NAME as string,",
				"          LADR_TYP as string,",
				"          PCT_OFF as decimal(15,2),",
				"          AMT_OFF as decimal(15,2),",
				"          NET_PRICE as decimal(15,2),",
				"          HIER_LVL_SEQ_NBR_S as integer,",
				"          LADR_TYP_CD as string,",
				"          DSCT_TYP_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSALLDATA",
				"source(output(",
				"          PMOTN_ID as integer,",
				"          DUMMY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPRML1",
				"source(output(",
				"          PMOTN_LADR_ID_S as integer,",
				"          { MKT_ID} as string,",
				"          { MDSE_HIER_LVL_SEQ_NBR_S} as integer,",
				"          { LADR_TYP_CD} as string,",
				"          { DSCT_TYP_CD} as string,",
				"          { PRC_GRP_ZN_SEQ_NBR_S} as integer,",
				"          { CHNL_ID} as integer,",
				"          PMOTN_LADR_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTTPRML",
				"DSALLDATA derive(LadderDesc = upper(concat(LADR_NAME, LADR_TYP)),",
				"          DSCT_TYP_CD = upper(DSCT_TYP_CD),",
				"          LADR_TYP_CD = upper(LADR_TYP_CD),",
				"          Test = 1) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(MKT_ID,",
				"          CHNL_ID,",
				"          DSCT_TYP_CD,",
				"          LADR_TYP_CD,",
				"          LadderDesc,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          HIER_LVL_SEQ_NBR_S),",
				"     each(match(!in(['MKT_ID','CHNL_ID','DSCT_TYP_CD','LADR_TYP_CD','LadderDesc','HIER_LVL_SEQ_NBR_S','PRC_GRP_ZN_SEQ_NBR_S'],name)), $$ = first($$))) ~> inLPMOTN",
				"inLPMOTN, IPTTPRML lookup(MKT_ID == { MKT_ID}",
				"     && HIER_LVL_SEQ_NBR_S == { MDSE_HIER_LVL_SEQ_NBR_S}",
				"     && upper(LADR_TYP_CD) == upper({ LADR_TYP_CD})",
				"     && upper(DSCT_TYP_CD) == upper({ DSCT_TYP_CD})",
				"     && PRC_GRP_ZN_SEQ_NBR_S == { PRC_GRP_ZN_SEQ_NBR_S}",
				"     && CHNL_ID == { CHNL_ID}",
				"     && upper(LadderDesc) == upper(PMOTN_LADR_DESC),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPMOTN",
				"split1@Yes select(mapColumn(",
				"          PMOTN_LADR_ID_S,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          LADR_NAME,",
				"          LADR_TYP,",
				"          LADR_TYP_CD,",
				"          DSCT_TYP_CD,",
				"          { MDSE_HIER_LVL_SEQ_NBR_S},",
				"          LadderDesc",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loFunnel",
				"split1@No select(mapColumn(",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          LADR_NAME,",
				"          LADR_TYP,",
				"          PCT_OFF,",
				"          AMT_OFF,",
				"          NET_PRICE,",
				"          LADR_TYP_CD,",
				"          DSCT_TYP_CD,",
				"          HIER_LVL_SEQ_NBR_S,",
				"          LadderDesc,",
				"          Test",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> inLPMOTN1",
				"inLPMOTN1, IPTTPRML1 lookup(Test == DUMMY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LPMOTN1",
				"LPMOTN1 select(mapColumn(",
				"          PMOTN_LADR_ID_S = PMOTN_ID,",
				"          HIER_LVL_SEQ_NBR_S,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S,",
				"          LADR_NAME,",
				"          LADR_TYP,",
				"          PCT_OFF,",
				"          AMT_OFF,",
				"          NET_PRICE,",
				"          LADR_TYP_CD,",
				"          DSCT_TYP_CD,",
				"          LadderDesc",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loPMOTN",
				"split2@Yes2 derive(CRT_UPDT_DTTM = currentDate(),",
				"          LST_UPDT_ID = $pUserId,",
				"          LST_UPDT_DTTM = currentDate(),",
				"          CRT_UPDT_USER_ID = $pUserId) ~> XGenPMOTNId",
				"XGenPMOTNId select(mapColumn(",
				"          PMOTN_LADR_ID_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S = HIER_LVL_SEQ_NBR_S,",
				"          PMOTN_LADR_DESC = LadderDesc,",
				"          DSCT_TYP_CD,",
				"          LADR_TYP_CD,",
				"          CRT_UPDT_DTTM,",
				"          LST_UPDT_ID,",
				"          LST_UPDT_DTTM,",
				"          CRT_UPDT_USER_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> xoTPRML",
				"loFunnel derive(CRT_UPDT_DTTM = currentDate(),",
				"          LST_UPDT_ID = $pUserId,",
				"          LST_UPDT_DTTM = currentDate(),",
				"          CRT_UPDT_USER_ID = $pUserId) ~> loFunnel2",
				"loFunnel2 select(mapColumn(",
				"          PMOTN_LADR_ID_S,",
				"          MDSE_HIER_LVL_SEQ_NBR_S = { MDSE_HIER_LVL_SEQ_NBR_S},",
				"          PMOTN_LADR_DESC = LadderDesc,",
				"          DSCT_TYP_CD,",
				"          LADR_TYP_CD,",
				"          CRT_UPDT_DTTM,",
				"          LST_UPDT_ID,",
				"          LST_UPDT_DTTM,",
				"          CRT_UPDT_USER_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          PRC_GRP_ZN_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Xdateid",
				"Xdateid, xoTPRML union(byName: true)~> FPMOTNID",
				"LPMOTN derive(IsMatch = isMatch()) ~> IsMatch",
				"IsMatch split(IsMatch==true(),",
				"     disjoint: false) ~> split1@(Yes, No)",
				"loPMOTN derive(IsMatch = isMatch()) ~> IsMatch2",
				"IsMatch2 split(IsMatch==true(),",
				"     disjoint: false) ~> split2@(Yes2)",
				"FPMOTNID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PMOTN_LADR_ID_S as string,",
				"          MDSE_HIER_LVL_SEQ_NBR_S as string,",
				"          PMOTN_LADR_DESC as string,",
				"          { DSCT_TYP_CD} as string,",
				"          { LADR_TYP_CD} as string,",
				"          CRT_UPDT_DTTM as string,",
				"          CRT_UPDT_USER_ID as string,",
				"          LST_UPDT_DTTM as string,",
				"          LST_UPDT_USER_ID as string,",
				"          MKT_ID as string,",
				"          CHNL_ID as string,",
				"          PRC_GRP_ZN_SEQ_NBR_S as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT103DIVTPromo_TPRML_PX.DS_TPRML.',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSTPRML"
			]
		}
	}
}