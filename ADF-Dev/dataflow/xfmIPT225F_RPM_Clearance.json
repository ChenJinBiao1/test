{
	"name": "xfmIPT225F_RPM_Clearance",
	"properties": {
		"folder": {
			"name": "22-E2EPricingValidations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AB_xfmIPT225E_RPM_Clearance_DS_RPM_Clearance_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSRPMClearance"
				},
				{
					"dataset": {
						"referenceName": "AB_RPM_CLEARANCE_225F",
						"type": "DatasetReference"
					},
					"name": "RPMCLEARANCE"
				},
				{
					"dataset": {
						"referenceName": "AB_ITEM_LOC_225F",
						"type": "DatasetReference"
					},
					"name": "ITEMLOC"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_LOCLT_225F",
						"type": "DatasetReference"
					},
					"name": "IPTLOCLT"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_ISCLA_225F",
						"type": "DatasetReference"
					},
					"name": "IPTISCLA"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT_ISCLA_1_225F",
						"type": "DatasetReference"
					},
					"name": "IPTISCLA1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AB_LookUp_MD_Reset",
						"type": "DatasetReference"
					},
					"name": "FFClearanceRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_Retail_Price_NotIn_ITEM_LOC",
						"type": "DatasetReference"
					},
					"name": "FFRetailPriceRej"
				},
				{
					"dataset": {
						"referenceName": "AB_FF_MD_Reset_Rejects",
						"type": "DatasetReference"
					},
					"name": "FFMDResetRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT225E_RPM_Clearance_DS_Dummy_Md_resetASIA",
						"type": "DatasetReference"
					},
					"name": "DummyMDReset"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT225F_RPM_Clearance_FF_Str_Rejects",
						"type": "DatasetReference"
					},
					"name": "FFStrRejects"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT225F_RPM_Clearance_DS_UnApprClr_Success_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSUnApprClrSuccess"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT225_RPM_UnApprovedMD_Notin_IPT_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFUnApprClrError"
				},
				{
					"dataset": {
						"referenceName": "AB_xfmIPT225F_RPM_Clearance_DS_ApprClr_Success_ASIA",
						"type": "DatasetReference"
					},
					"name": "DSApprClrSuccess"
				},
				{
					"dataset": {
						"referenceName": "AB_IPT225_RPM_ApprovedMD_Notin_IPT_ASIA",
						"type": "DatasetReference"
					},
					"name": "FFApprClrError"
				}
			],
			"transformations": [
				{
					"name": "LResetInd"
				},
				{
					"name": "outResetInd"
				},
				{
					"name": "rejClearancerejects"
				},
				{
					"name": "split1"
				},
				{
					"name": "LRetailPrice"
				},
				{
					"name": "outLMDReset"
				},
				{
					"name": "rejRetailPrice"
				},
				{
					"name": "OUTLSTR"
				},
				{
					"name": "split2"
				},
				{
					"name": "RDWorksheetEffDate"
				},
				{
					"name": "outUnapprSucc"
				},
				{
					"name": "XAddDescUnappr"
				},
				{
					"name": "outSuccess"
				},
				{
					"name": "outNotinISCLA"
				},
				{
					"name": "XAddDesc"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "ITEMLOC1"
				},
				{
					"name": "IsMatch"
				},
				{
					"name": "split3"
				},
				{
					"name": "IsMatch2"
				},
				{
					"name": "split4"
				},
				{
					"name": "LMDRest"
				},
				{
					"name": "a"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "IsMatch3"
				},
				{
					"name": "split5"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "YesLSTR"
				},
				{
					"name": "NoLSTR"
				},
				{
					"name": "YesLValidateUnappr"
				},
				{
					"name": "NoLValidateUnappr"
				},
				{
					"name": "YesLValidate"
				},
				{
					"name": "NoLValidate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pInvocationId as string ('ASIA')",
				"}",
				"source(output(",
				"          CLEARANCE_ID as integer,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as integer,",
				"          EFFECTIVE_DATE as timestamp,",
				"          CHANGE_AMOUNT as decimal(10,0),",
				"          CREATE_DATE as timestamp,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as timestamp,",
				"          APPROVAL_ID as string,",
				"          LOCATION as integer,",
				"          BRD_ID as integer,",
				"          MKT_ID as string,",
				"          CHNL_ID as integer,",
				"          ITM_STY_CLR_SEQ_NBR_S as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DSRPMClearance",
				"source(output(",
				"          CLEARANCE_ID as integer,",
				"          RESET_IND as integer,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RPMCLEARANCE",
				"source(output(",
				"          ITEM as string,",
				"          LOC as integer,",
				"          REGULAR_UNIT_RETAIL as decimal(15,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ITEMLOC",
				"source(output(",
				"          IPT_LOCLT as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTLOCLT",
				"source(output(",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          LOC_NBR as integer,",
				"          STRT_DT as timestamp,",
				"          RTL_PRC_AMT as decimal(15,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTISCLA",
				"source(output(",
				"          ITM_STY_CLR_SEQ_NBR_S as integer,",
				"          LOC_NBR as integer,",
				"          STRT_DT as timestamp,",
				"          RTL_PRC_AMT as decimal(15,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IPTISCLA1",
				"DSRPMClearance, RPMCLEARANCE lookup(DSRPMClearance@STATE == RPMCLEARANCE@STATE",
				"     && DSRPMClearance@CLEARANCE_ID == RPMCLEARANCE@CLEARANCE_ID",
				"     && DSRPMClearance@ITEM == RPMCLEARANCE@ITEM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LResetInd",
				"split3@Yes select(mapColumn(",
				"          CLEARANCE_ID = split3@Yes@CLEARANCE_ID,",
				"          STATE = split3@Yes@STATE,",
				"          ITEM = split3@Yes@ITEM,",
				"          DIFF_ID = split3@Yes@DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          RESET_IND",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outResetInd",
				"split3@No select(mapColumn(",
				"          CLEARANCE_ID = split3@No@CLEARANCE_ID,",
				"          STATE = split3@No@STATE,",
				"          ITEM = split3@No@ITEM,",
				"          DIFF_ID = split3@No@DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejClearancerejects",
				"outResetInd split(RESET_IND == 0,",
				"     RESET_IND == 1,",
				"     disjoint: false) ~> split1@(outLMDReset1, outMD)",
				"derivedColumn1, ITEMLOC1 lookup(derivedColumn1@A == ITEMLOC1@A,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LRetailPrice",
				"split5@Yes3 select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM = split5@Yes3@ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT = REGULAR_UNIT_RETAIL,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S = split5@Yes3@ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outLMDReset",
				"split4@No2 select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM = split4@No2@ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rejRetailPrice",
				"YesLSTR select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OUTLSTR",
				"OUTLSTR split(STATE=='pricechange.state.worksheet',",
				"     disjoint: false) ~> split2@(outUnAppr, outAppr)",
				"split2@outUnAppr aggregate(groupBy(EFFECTIVE_DATE,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          LOCATION),",
				"     each(match(!in(['EFFECTIVE_DATE','ITM_STY_CLR_SEQ_NBR_S','LOCATION'],name)), $$ = first($$))) ~> RDWorksheetEffDate",
				"NoLValidateUnappr select(mapColumn(",
				"          EFFECTIVE_DATE,",
				"          ITM_STY_CLR_SEQ_NBR_S,",
				"          LOCATION,",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outUnapprSucc",
				"YesLValidateUnappr derive(DESCRIPTION = 'UnApproved MD present in RPM is NOT available in IPT') ~> XAddDescUnappr",
				"NoLValidate select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outSuccess",
				"YesLValidate select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outNotinISCLA",
				"outNotinISCLA derive(DESCRIPTION = 'Approved MD present in RPM is NOT available in IPT') ~> XAddDesc",
				"split1@outLMDReset1 derive(A = 1) ~> derivedColumn1",
				"ITEMLOC derive(A = 1) ~> ITEMLOC1",
				"LResetInd derive(IsMatch = isMatch()) ~> IsMatch",
				"IsMatch split(IsMatch==true(),",
				"     disjoint: false) ~> split3@(Yes, No)",
				"LRetailPrice derive(IsMatch = isMatch()) ~> IsMatch2",
				"IsMatch2 split(IsMatch==true(),",
				"     disjoint: false) ~> split4@(Yes2, No2)",
				"derivedColumn2, a lookup(derivedColumn2@a == a@a,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LMDRest",
				"IPTISCLA1 derive(a = 1) ~> a",
				"split4@Yes2 derive(a = 1) ~> derivedColumn2",
				"LMDRest derive(IsMatch = isMatch()) ~> IsMatch3",
				"IsMatch3 split(IsMatch==true(),",
				"     disjoint: false) ~> split5@(Yes3, No3)",
				"split5@No3 select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM = split5@No3@ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S = split5@No3@ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"NoLSTR select(mapColumn(",
				"          CLEARANCE_ID,",
				"          STATE,",
				"          ITEM,",
				"          DIFF_ID,",
				"          ZONE_ID,",
				"          EFFECTIVE_DATE,",
				"          CHANGE_AMOUNT,",
				"          CREATE_DATE,",
				"          CREATE_ID,",
				"          APPROVAL_DATE,",
				"          APPROVAL_ID,",
				"          LOCATION,",
				"          BRD_ID,",
				"          MKT_ID,",
				"          CHNL_ID,",
				"          ITM_STY_CLR_SEQ_NBR_S",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@outMD, IPTLOCLT exists(LOCATION == IPT_LOCLT,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLSTR",
				"split1@outMD, IPTLOCLT exists(LOCATION == IPT_LOCLT,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLSTR",
				"RDWorksheetEffDate, IPTISCLA1 exists(LOCATION == LOC_NBR",
				"     && RDWorksheetEffDate@ITM_STY_CLR_SEQ_NBR_S == IPTISCLA1@ITM_STY_CLR_SEQ_NBR_S",
				"     && EFFECTIVE_DATE == STRT_DT",
				"     && CHANGE_AMOUNT == RTL_PRC_AMT,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLValidateUnappr",
				"RDWorksheetEffDate, IPTISCLA1 exists(RDWorksheetEffDate@ITM_STY_CLR_SEQ_NBR_S == IPTISCLA1@ITM_STY_CLR_SEQ_NBR_S",
				"     && LOCATION == LOC_NBR",
				"     && EFFECTIVE_DATE == STRT_DT",
				"     && CHANGE_AMOUNT == RTL_PRC_AMT,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLValidateUnappr",
				"split2@outAppr, IPTISCLA exists(split2@outAppr@ITM_STY_CLR_SEQ_NBR_S == IPTISCLA@ITM_STY_CLR_SEQ_NBR_S",
				"     && LOCATION == LOC_NBR",
				"     && EFFECTIVE_DATE == STRT_DT",
				"     && CHANGE_AMOUNT == RTL_PRC_AMT,",
				"     negate:false,",
				"     broadcast: 'auto')~> YesLValidate",
				"split2@outAppr, IPTISCLA exists(split2@outAppr@ITM_STY_CLR_SEQ_NBR_S == IPTISCLA@ITM_STY_CLR_SEQ_NBR_S",
				"     && LOCATION == LOC_NBR",
				"     && EFFECTIVE_DATE == STRT_DT",
				"     && CHANGE_AMOUNT == RTL_PRC_AMT,",
				"     negate:true,",
				"     broadcast: 'auto')~> NoLValidate",
				"rejClearancerejects sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('LookUp_MD_Reset.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFClearanceRejects",
				"rejRetailPrice sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('Retail_Price_NotIn_ITEM_LOC.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFRetailPriceRej",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('FF_MD_Reset_Rejects.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFMDResetRejects",
				"outLMDReset sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT225E_RPM_Clearance.DS_Dummy_Md_reset',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DummyMDReset",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT225F_RPM_Clearance.FF_Str_Rejects.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFStrRejects",
				"outUnapprSucc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT225F_RPM_Clearance.DS_UnApprClr_Success_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSUnApprClrSuccess",
				"XAddDescUnappr sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT225_RPM_UnApprovedMD_Notin_IPT_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFUnApprClrError",
				"outSuccess sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('xfmIPT225F_RPM_Clearance.DS_ApprClr_Success_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DSApprClrSuccess",
				"XAddDesc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLEARANCE_ID as string,",
				"          STATE as string,",
				"          ITEM as string,",
				"          DIFF_ID as string,",
				"          ZONE_ID as string,",
				"          EFFECTIVE_DATE as string,",
				"          CHANGE_AMOUNT as string,",
				"          CREATE_DATE as string,",
				"          CREATE_ID as string,",
				"          APPROVAL_DATE as string,",
				"          APPROVAL_ID as string,",
				"          LOCATION as string",
				"     ),",
				"     partitionFileNames:[(concat('IPT225_RPM_ApprovedMD_Notin_IPT_',$pInvocationId,'.txt'))],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FFApprClrError"
			]
		}
	}
}